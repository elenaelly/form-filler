(function (e) { function t(t) { for (var s, n, r = t[0], l = t[1], c = t[2], u = 0, _ = []; u < r.length; u++)n = r[u], Object.prototype.hasOwnProperty.call(i, n) && i[n] && _.push(i[n][0]), i[n] = 0; for (s in l) Object.prototype.hasOwnProperty.call(l, s) && (e[s] = l[s]); d && d(t); while (_.length) _.shift()(); return o.push.apply(o, c || []), a() } function a() { for (var e, t = 0; t < o.length; t++) { for (var a = o[t], s = !0, r = 1; r < a.length; r++) { var l = a[r]; 0 !== i[l] && (s = !1) } s && (o.splice(t--, 1), e = n(n.s = a[0])) } return e } var s = {}, i = { index: 0 }, o = []; function n(t) { if (s[t]) return s[t].exports; var a = s[t] = { i: t, l: !1, exports: {} }; return e[t].call(a.exports, a, a.exports, n), a.l = !0, a.exports } n.m = e, n.c = s, n.d = function (e, t, a) { n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: a }) }, n.r = function (e) { "undefined" !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) }, n.t = function (e, t) { if (1 & t && (e = n(e)), 8 & t) return e; if (4 & t && "object" === typeof e && e && e.__esModule) return e; var a = Object.create(null); if (n.r(a), Object.defineProperty(a, "default", { enumerable: !0, value: e }), 2 & t && "string" != typeof e) for (var s in e) n.d(a, s, function (t) { return e[t] }.bind(null, s)); return a }, n.n = function (e) { var t = e && e.__esModule ? function () { return e["default"] } : function () { return e }; return n.d(t, "a", t), t }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t) }, n.p = ""; var r = window["webpackJsonp"] = window["webpackJsonp"] || [], l = r.push.bind(r); r.push = t, r = r.slice(); for (var c = 0; c < r.length; c++)t(r[c]); var d = l; o.push([0, "chunk-vendors"]), a() })({ 0: function (e, t, a) { e.exports = a("56d7") }, "034f": function (e, t, a) { "use strict"; a("85ec") }, "05e8": function (e, t, a) { "use strict"; a("3ed6") }, "0651": function (e, t, a) { "use strict"; a("8394") }, 1: function (e, t) { }, 10: function (e, t) { }, 11: function (e, t) { }, 12: function (e, t) { }, 13: function (e, t) { }, 14: function (e, t) { }, 1518: function (e, t, a) { }, "18b0": function (e, t, a) { "use strict"; a("ad14") }, "1d8e": function (e, t, a) { "use strict"; a("44f3") }, 2: function (e, t) { }, "215f": function (e, t, a) { "use strict"; a("b792") }, "219d": function (e, t, a) { "use strict"; a("6442") }, "22a7": function (e, t, a) { }, 2388: function (e, t, a) { }, "2bdd": function (e, t, a) { }, 3: function (e, t) { }, 3314: function (e, t, a) { "use strict"; a("747b") }, "3ca4": function (e, t, a) { }, "3ed6": function (e, t, a) { }, 4: function (e, t) { }, 4182: function (e, t, a) { }, "43a3": function (e, t, a) { }, "44f3": function (e, t, a) { }, "4c9e": function (e, t, a) { "use strict"; a("4182") }, "4df6": function (e, t, a) { "use strict"; a("2bdd") }, 5: function (e, t) { }, "529e": function (e, t, a) { "use strict"; a("fd3d") }, "56d7": function (e, t, a) { "use strict"; a.r(t), a.d(t, "router", (function () { return Ts })), a.d(t, "VueInstance", (function () { return Us })); var s = a("2b0e"), i = a("8c4f"), o = a("4328"), n = a.n(o), r = a("ecee"), l = a("c074"), c = a("f2d1"), d = a("ad3d"), u = a("8f94"), _ = a.n(u), m = (a("f9d4"), a("10b2"), a("31c5"), a("6d78"), a("7289"), a("9a48"), a("6a70"), a("a7be"), a("7a7a"), function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "div-body", attrs: { "data-route-name": e.$route.matched[0].name } }, [e.is_popup ? e._e() : a("nav", { staticClass: "navbar navbar-expand-lg navbar-dark bg-dark" }, [a("router-link", { staticClass: "navbar-brand", attrs: { to: "/generators/default" } }, [a("img", { staticClass: "fakedata_logo", staticStyle: { transform: "scale(1.22)", "transform-origin": "center left" }, attrs: { src: e.logo_file } })]), e._m(0), a("div", { staticClass: "collapse navbar-collapse", attrs: { id: "navbarSupportedContent" } }, [a("ul", { staticClass: "navbar-nav ml-auto" }, [a("router-link", { attrs: { custom: "", to: "/generators/default" }, scopedSlots: e._u([{ key: "default", fn: function (t) { var s = t.navigate; return [a("li", { staticClass: "nav-item", class: { active: "generators" == e.route_component } }, [a("a", { staticClass: "nav-link", on: { click: s } }, [e._v("Generators")])])] } }], null, !1, 2699128489) }), a("router-link", { attrs: { custom: "", to: "/fields/named" }, scopedSlots: e._u([{ key: "default", fn: function (t) { var s = t.navigate; return [a("li", { staticClass: "nav-item", class: { active: "fields" == e.route_component } }, [a("a", { staticClass: "nav-link", on: { click: s } }, [e._v("Fields")])])] } }], null, !1, 1191078441) }), a("router-link", { attrs: { custom: "", to: "/cloud" }, scopedSlots: e._u([{ key: "default", fn: function (t) { var s = t.navigate; return [a("li", { staticClass: "nav-item", class: { active: "cloud" == e.route_component } }, [a("a", { staticClass: "nav-link", on: { click: s } }, [e._v("SpamBox "), e.isUltraSubscriber() && e.cloud_enabled ? e.cloud_notifications_badge && e.cloud_unread_notifications > 0 ? a("span", { staticClass: "badge badge-danger ml-2" }, [e._v(e._s(e.cloud_unread_notifications))]) : e._e() : a("span", { staticClass: "badge badge-danger ml-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1)])])] } }], null, !1, 866177965) }), a("router-link", { attrs: { custom: "", to: "/settings/general" }, scopedSlots: e._u([{ key: "default", fn: function (t) { var s = t.navigate; return [a("li", { staticClass: "nav-item", class: { active: "settings" == e.route_component } }, [a("a", { staticClass: "nav-link", on: { click: s } }, [e._v("Settings")])])] } }], null, !1, 3327354153) }), a("li", { staticClass: "nav-item" }, [a("a", { staticClass: "nav-link", attrs: { href: "https://docs.fakedata.pro/how-to-use-fake-data/filling-forms/how-to-fill-forms.html", target: "_blank" } }, [e._v("How to use "), a("sup", [a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"], size: "xs" } })], 1)])]), a("router-link", { attrs: { custom: "", to: "/about/intro" }, scopedSlots: e._u([{ key: "default", fn: function (t) { var s = t.navigate; return [a("li", { staticClass: "nav-item", class: { active: "about" == e.route_component } }, [a("a", { staticClass: "nav-link", on: { click: s } }, [e._v("About")])])] } }], null, !1, 3574245993) }), a("router-link", { attrs: { custom: "", to: "/account" }, scopedSlots: e._u([{ key: "default", fn: function (t) { var s = t.navigate; return [a("li", { staticClass: "nav-item", class: { active: "account" == e.route_component } }, [a("a", { staticClass: "nav-link", on: { click: s } }, [e._v("Account")])])] } }], null, !1, 418098153) })], 1)])], 1), e.is_popup ? a("nav", { staticClass: "navbar navbar-expand-lg navbar-dark bg-dark" }, [a("router-link", { staticClass: "navbar-brand", attrs: { to: "/popup/main" } }, [a("img", { staticClass: "fakedata_logo", staticStyle: { transform: "scale(1.22)", "transform-origin": "center left" }, attrs: { src: e.logo_file } })]), a("div", [a("ul", { staticClass: "navbar-nav ml-auto" }, [a("router-link", { attrs: { custom: "", to: "/popup/main" }, scopedSlots: e._u([{ key: "default", fn: function (t) { var s = t.navigate; return [a("li", { staticClass: "nav-item", class: { active: "main" == e.route_component }, attrs: { title: "Dashboard" } }, [a("a", { staticClass: "nav-link", on: { click: s } }, [a("font-awesome-icon", { class: ["fs-25px"], attrs: { icon: ["fas", "edit"] } })], 1)])] } }], null, !1, 1832453783) }), a("router-link", { attrs: { custom: "", to: "/popup/spambox" }, scopedSlots: e._u([{ key: "default", fn: function (t) { var s = t.navigate; return [a("li", { staticClass: "nav-item", class: { active: "spambox" == e.route_component }, attrs: { title: "SpamBox" } }, [a("a", { staticClass: "nav-link", on: { click: s } }, [a("font-awesome-icon", { class: ["fs-25px"], attrs: { icon: ["fas", "envelope"] } }), e.isUltraSubscriber() && e.cloud_enabled ? e._e() : a("span", { staticClass: "badge badge-danger ml-2", staticStyle: { position: "absolute", top: "0px", right: "5px" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e.cloud_notifications_badge && e.cloud_unread_notifications > 0 ? a("span", { staticClass: "badge badge-danger ml-2", staticStyle: { position: "absolute", top: "0px", right: "5px" } }, [e._v(e._s(e.cloud_unread_notifications))]) : e._e()], 1)])] } }], null, !1, 2215619346) }), a("li", { staticClass: "nav-item", attrs: { title: "Settings" } }, [a("a", { staticClass: "nav-link", on: { click: function (t) { return e.openOptionsPage("/settings/general", !0) } } }, [a("font-awesome-icon", { class: ["fs-25px"], attrs: { icon: ["fas", "cog"] } })], 1)])], 1)])], 1) : e._e(), a("div", { staticClass: "container" }, [e.cloud_enabled && e.cloud_communication_error ? a("div", { staticClass: "alert alert-danger", staticStyle: { "margin-bottom": "30px" }, attrs: { role: "alert" } }, [e._m(1)]) : e._e(), e.is_popup ? e._e() : a("router-view", { ref: "view", attrs: { root: this } }), e.is_popup ? a("div", { staticClass: "popup-content-container" }, [a("router-view", { attrs: { root: this } })], 1) : e._e()], 1), e.is_popup ? e._e() : a("a", { staticClass: "btn-floating elegant-color-dark fab", attrs: { title: "Throw your hate here" }, on: { click: function (t) { return e.openFeedbackModal() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "comment-alt"] } })], 1), e.is_popup ? e._e() : a("feedback-modal", { attrs: { root: this } })], 1) }), h = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("button", { staticClass: "navbar-toggler", attrs: { type: "button", "data-toggle": "collapse", "data-target": "#navbarSupportedContent", "aria-controls": "navbarSupportedContent", "aria-expanded": "false", "aria-label": "Toggle navigation" } }, [a("span", { staticClass: "navbar-toggler-icon" })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", { staticClass: "no-margin" }, [e._v("There seems to be an issue while connecting to Fake Data Cloud. That's not good! Please reach out to "), a("a", { attrs: { href: "mailto:frustrations@haterapps.com" } }, [e._v("frustrations@haterapps.com")])]) }], p = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade feedback_modal", attrs: { id: "feedback_modal", tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title w-100" }, [e._v(e._s(e.title))]), e._m(0)]), a("div", { staticClass: "modal-body" }, [a("div", { staticClass: "carousel slide" }, [a("div", { staticClass: "carousel-inner" }, [a("div", { staticClass: "carousel-item active" }, [a("button", { staticClass: "btn btn-lg btn-block elegant-color", attrs: { type: "button" }, on: { click: function (t) { return e.selectSubject("bug") } } }, [e._v("Something is not working properly")]), a("br"), a("button", { staticClass: "btn btn-lg btn-block elegant-color", attrs: { type: "button" }, on: { click: function (t) { return e.selectSubject("feature") } } }, [e._v("A feature is missing")]), a("br"), a("button", { staticClass: "btn btn-lg btn-block elegant-color", attrs: { type: "button" }, on: { click: function (t) { return e.selectSubject("message") } } }, [e._v("Something else")]), a("br")]), a("div", { staticClass: "carousel-item" }, [a("form", { on: { submit: function (t) { return t.stopPropagation(), t.preventDefault(), e.carouselNext() } } }, ["bug" == e.form.subject ? a("p", [e._v("Any bug sucks and must be fixed as soon as possible. Write below as detailed as possible what is the issue you are having. If it's something that happens on a specific page, add the link to it if possible.")]) : "feature" == e.form.subject ? a("p", [e._v("Is Fake Data missing something? Would it be cool if there was a specific feature available? Write below your suggestion and I'll see what can be done in short time. No promises though.")]) : "message" == e.form.subject ? a("p", [e._v("Let me know what's on your mind")]) : e._e(), a("div", { staticClass: "md-form unique-textarea mt-5 mb-5" }, [a("textarea", { directives: [{ name: "model", rawName: "v-model", value: e.form.message, expression: "form.message" }], staticClass: "md-textarea text-white form-control", attrs: { id: "feedback_message", required: "", rows: "5" }, domProps: { value: e.form.message }, on: { input: function (t) { t.target.composing || e.$set(e.form, "message", t.target.value) } } }), a("label", { attrs: { for: "feedback_message" } }, [e._v(e._s({ bug: "Write the bug details here", feature: "Write your suggestion here", message: "Write your message here" }[e.form.subject]))])]), a("div", { staticClass: "md-form form-check mt-5 mb-3" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.form.debug_info, expression: "form.debug_info" }], staticClass: "filled-in form-check-input", attrs: { id: "feedback_debug", type: "checkbox" }, domProps: { checked: Array.isArray(e.form.debug_info) ? e._i(e.form.debug_info, null) > -1 : e.form.debug_info }, on: { change: function (t) { var a = e.form.debug_info, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.form, "debug_info", a.concat([o])) : n > -1 && e.$set(e.form, "debug_info", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.form, "debug_info", i) } } }), a("label", { staticClass: "form-check-label inline-block", attrs: { for: "feedback_debug" } }, [e._v("Also include debug info"), e.form.debug_info ? a("span", [e._v(":")]) : e._e()])]), e.form.debug_info ? a("div", { staticClass: "elegant-color p-2 small rounded-lg mb-4" }, [a("code", { staticStyle: { "white-space": "break-spaces", "word-break": "break-all" } }, [e._v(e._s(e.debug_info))])]) : e._e(), a("button", { staticClass: "btn btn-md btn-dark-green pull-right", attrs: { type: "submit", disabled: !e.form.message } }, [e._v("Next "), a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-right"], size: "sm" } })], 1), a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button" }, on: { click: function (t) { return e.carouselPrev() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-left"], size: "sm" } }), e._v(" Back")], 1)])]), a("div", { staticClass: "carousel-item" }, [a("form", { on: { submit: function (t) { return t.stopPropagation(), t.preventDefault(), e.sendForm() } } }, [a("p", [e._v("Where should the answer to your message be sent?")]), a("div", { staticClass: "md-form unique-textarea mt-5 mb-5" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.form.email, expression: "form.email" }], staticClass: "text-white form-control", attrs: { id: "feedback_email", type: "email", required: "" }, domProps: { value: e.form.email }, on: { input: function (t) { t.target.composing || e.$set(e.form, "email", t.target.value) } } }), a("label", { attrs: { for: "feedback_email" } }, [e._v("Your e-mail address")])]), a("button", { staticClass: "btn btn-md btn-dark-green pull-right", attrs: { type: "submit", disabled: !e.form.email } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"], size: "sm" } }), e._v(" Send")], 1), a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button" }, on: { click: function (t) { return e.carouselPrev() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-left"], size: "sm" } }), e._v(" Back")], 1)])])])])])])])]) }, f = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { attrs: { "aria-hidden": "true" } }, [e._v("×")])]) }], v = { name: "FeedbackModal", data() { return { form: { subject: null, message: "", email: "", debug_info: !0 }, carousel: null } }, props: ["root"], computed: { title: function () { return "What's up?" }, debug_info: function () { return window.navigator.userAgent + "\r\nFD: " + chrome.runtime.getManifest().version + " MV" + chrome.runtime.getManifest().manifest_version + "\r\nID: " + chrome.runtime.id } }, mounted() { $("#feedback_modal .carousel").carousel({ ride: !1, keyboard: !1, touch: !1, interval: !1 }), this.carousel = $("#feedback_modal .carousel").data("bs.carousel"), $("#feedback_modal").on("hidden.bs.modal", function () { this.carouselReset() }.bind(this)) }, methods: { closeFeedbackModal: function () { $("#feedback_modal").modal("hide") }, carouselNext: function () { this.carousel.next() }, carouselPrev: function () { this.carousel.prev() }, carouselReset: function () { this.carousel.to(0), this.form.subject = null, this.form.message = "", this.form.email = "" }, selectSubject: function (e) { this.carouselNext(), this.form.subject = e }, sendForm: function () { var e = $("<form></form>").css("display", "none").attr("method", "post").attr("action", "https://fakedata.haterapps.com/contact/"); "firefox" != this.root.getBrowser() && e.attr("target", "_blank"); let t = this.form.message; this.form.debug_info && (t += "\r\n\r\n" + this.debug_info); var a = $("<input />").attr("name", "subject").val(this.form.subject), s = $("<textarea></textarea>").attr("name", "message").val(t), i = $("<input />").attr("name", "email").val(this.form.email); e.append(a).append(s).append(i), $(document.body).append(e), e.submit(), e.remove(), this.closeFeedbackModal() } } }, g = v, b = (a("4df6"), a("215f"), a("2877")), w = Object(b["a"])(g, p, f, !1, null, null, null), k = w.exports, y = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("a", { staticClass: "pro_required", attrs: { href: "#" }, on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.goToLicense.apply(null, arguments) } } }, [!e.root.isLicenseActive() && !e.ultra_required || e.ultra_required && !e.root.isUltraSubscriber() ? a("span", { staticClass: "badge pro_required danger-color-dark" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } }), e._v("  " + e._s(e.lbl_false))], 1) : a("span", { staticClass: "badge pro_required success-color-dark" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock-open"] } }), e._v("  " + e._s(e.lbl_true))], 1)]) }, x = [], C = { name: "pro_required", props: ["root", "labelFalse", "labelTrue", "ultra_required"], data() { return { lbl_false: null === this.labelFalse ? null : this.labelFalse || (this.ultra_required ? "Ultra" : "Pro"), lbl_true: null === this.labelTrue ? null : this.labelTrue || (this.ultra_required ? "Ultra" : "Pro") } }, methods: { goToLicense: function () { $("#add_new_field_modal:visible").length && $(document).off("hide.bs.modal", "#add_new_field_modal, #active_edit_field_pending"), $(".modal:visible").modal("hide"), $(".modal-backdrop").remove(), this.$nextTick(function () { this.$router.push({ path: "/account/license" }) }.bind(this)) } } }, S = C, A = Object(b["a"])(S, y, x, !1, null, null, null), F = A.exports; window.process = "browser", window.Buffer = window.Buffer || a("b639").Buffer; const D = a("5928"); var E = a("f302").default, j = a("f576"), O = { components: { Pro_required: F, FeedbackModal: k }, data: function () { return { languages: { ar: "Arabic", az: "Azerbaijani", zh_CN: "Chinese", zh_TW: "Chinese (Taiwan)", cz: "Czech", nl: "Dutch", nl_BE: "Dutch (Belgium)", de: "German", de_AT: "German (Austria)", de_CH: "German (Switzerland)", en: "English", en_AU: "English (Australia)", en_AU_ocker: "English (Australia Ocker)", en_BORK: "English (Bork)", en_CA: "English (Canada)", en_GB: "English (Great Britain)", en_IND: "English (India)", en_IE: "English (Ireland)", en_ZA: "English (South Africa)", en_US: "English (United States)", fa: "Farsi", fi: "Finnish", fr: "French", fr_CA: "French (Canada)", fr_CH: "French (Switzerland)", ge: "Georgian", id_ID: "Indonesia", it: "Italian", ja: "Japanese", ko: "Korean", nep: "Nepalese", nb_NO: "Norwegian", pl: "Polish", pt_BR: "Portuguese (Brazil)", pt_PT: "Portuguese (Portugal)", ro: "Romanian", ru: "Russian", sk: "Slovakian", es: "Spanish", es_MX: "Spanish (Mexico)", sv: "Swedish", tr: "Turkish", uk: "Ukrainian", vi: "Vietnamese" }, fields: ["full_name", "first_name", "last_name", "username", "email", "password", "phone", "job_title", "company", "address", "city", "country", "state", "zip", "words", "sentence", "paragraph", "text", "datetime", "number"], licenseActive: 1, license_key: null, license_data: null, currentView: null, last_seen_version: E.length, current_version: E.length, dismiss_version_notif: 0, cloud_enabled: 1, cloud_notifications_count: { emails: 0, sms: 0 }, cloud_notifications_badge: !0, cloud_communication_error: !1, ultra_subscription_meta: null } }, beforeMount() { this.is_popup && this.retrieveCloudData() }, mounted: function () { console.log("Fake Data Options page mounted"), this.is_popup && document.body.classList.add("fd-ext-popup"), this.updateLastSeen(), this.checkLicenseStatus(function () { this.is_popup && this.getStorageEngine().get({ popup_init_goto: "generators", popup_last_page: "generators" }, function (e) { ("spambox" == e.popup_init_goto || "last" == e.popup_init_goto && "PopupSpambox" == e.popup_last_page || "most_relevant" == e.popup_init_goto && this.cloud_unread_notifications > 0) && this.$router.replace({ path: "/popup/spambox" }) }.bind(this)) }.bind(this)), this.$router.afterEach((function () { $(".navbar-collapse").collapse("hide") })), chrome.runtime.onMessage.addListener(this.onMessageReceived), this.notifyBackgroundScriptAboutMe() }, computed: { is_popup: function () { return this.$route.matched[0] && this.$route.matched[0].props && this.$route.matched[0].props.default && this.$route.matched[0].props.default.popup }, route_component: function () { var e = this.$route.path.split("/").filter((function (e) { return !!e })); return this.is_popup ? e[1] : e[0] }, cloud_unread_notifications: function () { return this.cloud_notifications_count.emails + this.cloud_notifications_count.sms }, logo_file: function () { return this.isUltraSubscriber() ? "assets/fake_data_ultra_logo.svg" : this.isLicenseActive() ? "assets/fake_data_pro_logo.svg" : "assets/fake_data_logo.svg" } }, watch: { $route: function () { this.is_popup && this.getStorageEngine().set({ popup_last_page: this.$route.name }) } }, methods: { retrieveCloudData: function () { chrome.runtime.sendMessage({ type: "cloud.retrieve_cloud_data" }, this.onMessageReceived) }, onMessageReceived: function (e) { if (e && e.type) { if ("cloud.update_meta" == e.type) { if ("undefined" != typeof e.meta_data && (this.ultra_subscription_meta = e.meta_data), e.cloud_notifications_count) { var t = !1; e.cloud_notifications_count.emails + e.cloud_notifications_count.sms > this.cloud_notifications_count.emails + this.cloud_notifications_count.sms && (t = !0), this.cloud_notifications_count = e.cloud_notifications_count, this.$eventHub.$emit("cloud_meta_updated", this.ultra_subscription_meta), t && this.$eventHub.$emit("cloud_new_messages_received") } } else if ("cloud.communication_errors" == e.type) this.cloud_communication_error = e.communication_status; else if ("cloud.gather_tabs" == e.type) this.notifyBackgroundScriptAboutMe(); else if ("run_sandbox_iframe_code" == e.type) { if (!0 === e.for_popup && !this.is_popup) return; declareRequestFakeDomDataFunction(), fdSandboxContentScriptRunnerFunction(e.js_code, e.promise_id) } else if ("manage_tab_pending_element_resolved" == e.type) { if ("Fields" != this.$refs.view.$options.name) return; if (!this.$refs.view.active_edit_field_pending || this.$refs.view.active_edit_field_pending.wait_id != e.wait_id) return; this.$refs.view.active_edit_field_pending = null; var a = e.last_activated_element; this.$router.replace({ path: "/fields/" + a.kind, query: { data: a.inputName, backto: a.tab, frameid: a.frame, elementid: a.element_id, url: a.url, selector: a.selector, original_selector: a.original_selector, kind: a.kind, inputType: a.inputType, selOption: a.selectOptions } }), this.$refs.view.setActiveEditFieldFromRoute(), this.$refs.view.load_active_edit_field() } return !0 } }, notifyBackgroundScriptAboutMe: function () { chrome.runtime.sendMessage({ type: "cloud.options_page_loaded" }) }, updateLastSeen: function () { this.getStorageEngine().get({ last_seen_version: 0 }, function (e) { this.last_seen_version = e.last_seen_version || 0, this.getStorageEngine().set({ last_seen_version: this.current_version }) }.bind(this)) }, mapFields: function (e) { var t = {}; for (var a in this.fields) t[this.fields[a]] = e; return t }, getStorageEngine: function () { return chrome.storage.local }, generateDefaultKeyboardShortcuts: function () { var e; return e = -1 != navigator.platform.indexOf("Mac") ? "Meta" : "Alt", { keyboard: [this.parseKeyboardButton(e)], mouse: "dblclick" } }, generateDefaultKeyboardShortcutsForEntireForm: function () { var e; return e = -1 != navigator.platform.indexOf("Mac") ? "Meta" : "Alt", { keyboard: [this.parseKeyboardButton(e), this.parseKeyboardButton("Shift")], mouse: "dblclick" } }, getMetaKeyName: function () { return -1 != navigator.platform.indexOf("Mac") ? "Cmd" : "Windows" }, parseKeyboardButton: function (e) { if (!e) return !1; var t = e; return " " == t && (t = "Space"), "Meta" == t && (t = this.getMetaKeyName()), 1 == t.length && (t = t.toUpperCase()), t }, resetMdbEvents: async function () { if (!$.fn.materialSelect) { let e = null; await new Promise((function (t) { e = setInterval((function () { $.fn.materialSelect && (clearInterval(e), t()) }), 50) })) } $.fn.materialSelect && $("select.mdb-select:not(.initialized)").materialSelect(), $.fn.tooltip && $("[title]").tooltip() }, resetBsEvents: function () { this.$nextTick((function () { this.initWavesEffects(), this.resetInputLabels(), this.resetMdbEvents(), this.$nextTick((function () { $(".CodeMirror:visible").each((function () { $(this).get(0).CodeMirror.refresh() })) })) })) }, resetInputLabels: function () { var e = ["text", "password", "email", "url", "tel", "number", "search", "search-md"].map((function (e) { return "input[type=" + e + "]" })).join(", ") + ", textarea"; $(e).each((function (e, t) { var a = $(this), s = a.siblings("label, i, svg"), i = a.val().length, o = a.attr("placeholder"), n = (i || o ? "add" : "remove") + "Class"; s[n]("active") })) }, initWavesEffects: function () { window.Waves && window.Waves.attach && (Waves.attach(".btn:not(.btn-flat):not(.no-waves), .btn-floating", ["waves-light"]), Waves.attach(".btn-flat", ["waves-effect"]), Waves.attach(".waves-light", ["waves-light"]), Waves.attach(".navbar-nav a:not(.navbar-brand), .nav-icons li a, .navbar input", ["waves-light"])) }, functionReviver: function (e, t) { if ("" === e) return t; if ("string" === typeof t) { var a = /function[^\(]*\(([^\)]*)\)[^\{]*{([^\}]*)\}/, s = t.match(a); if (s) return new Function("return " + t)() } return t }, functionReplacer: function (e, t) { return "function" === typeof t ? t.toString() : t }, codeMirrorFullScreen: function (e) { if (e && e[0]) var t = e[0]; else if (e) t = e; t && (t.codemirror.setOption("fullScreen", !t.codemirror.getOption("fullScreen")), t.codemirror.getOption("fullScreen") ? $("body").addClass("has_full_editor") : $("body").removeClass("has_full_editor"), this.$nextTick((function () { t.codemirror.focus() }))) }, prettyBytes: function (e) { var t = ["B", "kB", "MB", "GB", "TB"], a = 0; while (e > 1024) e /= 1024, a++; return e.toFixed(2) + " " + t[a] }, parseDate: function (e, t = !1, a = !1) { e = new Date(e); var s = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], i = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec."], o = a ? i : s, n = e.getDate(); if (n < 10 && (n = "0" + n), t) { var r = e.getHours() % 12; 0 == r && (r = 12), r < 10 && (r = "0" + r); var l = e.getMinutes(); return l < 10 && (l = "0" + l), n + " " + o[e.getMonth()] + " " + e.getFullYear() + " " + r + ":" + l + " " + (e.getHours() < 12 ? "AM" : "PM") } return n + " " + o[e.getMonth()] + " " + e.getFullYear() }, unParseDate: function (e, t = !0) { e = new Date(e); if (isNaN(e.getTime())) return null; var a = e.getFullYear(), s = e.getMonth() + 1, i = e.getDate(), o = e.getHours(), n = e.getMinutes(), r = e.getSeconds(); return s < 10 && (s = "0" + s), i < 10 && (i = "0" + i), o < 10 && (o = "0" + o), n < 10 && (n = "0" + n), r < 10 && (r = "0" + r), t ? a + "-" + s + "-" + i + " " + o + ":" + n + ":" + r : a + "-" + s + "-" + i }, getPublicKey: function () { return "-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEA1THdl9p+XAMctOn3QTLDl7Sq6u/B4e6vUc0l7dbFdiMkzUMgwIgd\nEXbffC2k3fPag5DkvQHirtoW1HX8td2yyZrbBoy6/GaVrXi+AGwvsXFV1mutfZrD\nKY3FX8ZDVvUY6NvXOPPloU0GvkVx9BiP9OgwJI7hQoDDSOesLP2hhe60jlEMnpM8\n1/NwsnmB7Es1AdZnoJp2PVZPasbByY7ChgbB550haKrSFSXcTMBk+hzMkLuM71uM\ndedY7KRrn8TPn6D0VD8sfcqS6KAscnYiTCHzOvZNyg5Q9Yq9T+j1ch4xtdtyUVp4\nN+tbnldV8g2TnwMNFBVpt63ro9txQeHSCwIDAQAB\n-----END RSA PUBLIC KEY-----\n" }, setLicenseActive: function (e) { return this.licenseActive = !!e, this.resetBsEvents(), this.isLicenseActive() }, checkLicenseStatus: function (e) { this.getStorageEngine().get({ license_key: null, cloud_online: !1, cloud_notifications_badge: !0, cloud_notifications_count: { emails: 0, sms: 0 } }, function (t) { this.license_key = t.license_key; try { var a = this.getPublicKey(), s = this.license_key, i = new D; i.importKey(a); var o = i.decryptPublic(s, "json"); if ("object" != typeof o) throw "Not a valid Object"; if ("undefined" == typeof o.type) { for (var n = ["name", "email", "expire", "seed"], r = 0; r < n.length; r++)if ("undefined" == typeof o[n[r]]) throw "This ain't a license" } else if ("license" != o.type) throw "This ain't a license"; if (this.licenseActive = !0, this.license_data = o, o.expire) { var l = (new Date).getTime(); 1e3 * o.expire <= l && (this.licenseActive = !1) } this.isLicenseBlacklisted() && (this.licenseActive = !1), this.enableCloudButton(this.licenseActive && t.cloud_online), this.cloud_notifications_count = t.cloud_notifications_count, this.cloud_notifications_badge = t.cloud_notifications_badge, "function" == typeof e && e({ status: "success", message: o }) } catch (c) { this.licenseActive = !1, this.license_data = null, "function" == typeof e && e({ status: "error", message: c }) } }.bind(this)) }, revokeLicense: function (e) { this.getStorageEngine().set({ license_key: null }, function () { this.licenseActive = !1, this.license_data = null, this.license_key = null, this.enableCloudButton(!1), "function" == typeof e && (chrome.runtime.sendMessage({ type: "reload_script" }), e()) }.bind(this)) }, isLicenseActive: function () { return this.licenseActive }, isUltraSubscriber: function () { return !(!this.isLicenseActive() || !this.ultra_subscription_meta || !this.ultra_subscription_meta.subscription_active && !this.ultra_subscription_meta.had_trial) }, isActiveUltraSubscriber: function () { return !!(this.isLicenseActive() && this.ultra_subscription_meta && this.ultra_subscription_meta.subscription_active) }, isLicenseBlacklisted: function () { var e = this.license_data.email + " " + this.license_data.name + " " + this.license_data.seed, t = ["5f142a96f95325b0d33abe6d3d6e30f1", "14c5239154ddba8f48e03d39cdfc08d0", "bc4f18021cb18b6fa27890979b7156e3", "0fb722413c0e00086a2a26ab6c6f44ab", "513366db29d2bdfd20487f349752da0a", "bf14e83533643eb984ad3ac0e18131dc", "6050c818a25c1f57fe168ba049a223e1", "ca0a3da3410c25b2f2d2d7f877c33f7c", "197986d7ac99fdb964aa80c6a746d6ce", "d7ae2e041983aff3314a73613e3013de", "37df1f20568da2ec19a5d73e5b261d71", "c0bbef9407a1359a2cde262be1c11e63", "cd3d5e3f7b84e1dae265899b57727908", "07399b2f668581e63ce0b80a3c4c8b06", "fe3010a24a5d404cecacda9be701408e"], a = (new j).update(e).digest("hex"), s = t.indexOf(a) >= 0; return s }, normalizeVueObject: function (e) { return JSON.parse(JSON.stringify(e)) }, slideToggle: function (e) { var t = document.querySelector(e), a = "true" === t.getAttribute("data-collapsed"); a ? (this.expandSection(t), t.setAttribute("data-collapsed", "false")) : this.collapseSection(t) }, expandSection: function (e) { var t = e.scrollHeight; e.style.height = t + "px"; var a = function (t) { e.removeEventListener("transitionend", a), e.style.height = null }; e.addEventListener("transitionend", a), e.setAttribute("data-collapsed", "false") }, collapseSection: function (e) { var t = e.scrollHeight, a = e.style.transition; e.style.transition = "", requestAnimationFrame((function () { e.style.height = t + "px", e.style.transition = a, requestAnimationFrame((function () { e.style.height = "0px" })) })), e.setAttribute("data-collapsed", "true") }, getBrowser: function () { var e = !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(" OPR/") >= 0, t = "undefined" !== typeof browser, a = (!!window.chrome && window.chrome.webstore, navigator.userAgent.indexOf(" Edg/") >= 0); return t ? "firefox" : e ? "opera" : a ? "edge" : "chrome" }, openFeedbackModal: function () { $("#feedback_modal").modal("show") }, enableCloudButton: function (e) { this.cloud_enabled = !!e, this.cloud_enabled || (this.ultra_subscription_meta = null) }, openOptionsPage: function (e = "/", t = !1) { chrome.tabs.create({ url: "/options/index.html#" + e }), t && window.close() }, getManifestVersion: function () { return chrome.runtime.getManifest().manifest_version }, evalMV3CodeInSandbox: function (e) { return new Promise((function (t) { let a = { type: "run_mv3_code_in_sandbox", js_code: e }; chrome.runtime.sendMessage(a, (function (e) { e && "undefined" != typeof e.text ? t(e.text) : t(!0) })) })) }, getProLicensePrice: function () { return 0 }, getUuid: function () { if (window.crypto && window.crypto.randomUUID) return window.crypto.randomUUID(); { let e, t, a; for (e = "", a = 0; a < 32; a++)8 != a && 12 != a && 16 != a && 20 != a || (e += "-"), t = Math.floor(16 * Math.random()).toString(16).toUpperCase(), e += t; return e } } } }, P = O, M = (a("034f"), Object(b["a"])(P, m, h, !1, null, null, null)), T = M.exports, U = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "page-settings" }, [a("ul", { staticClass: "nav md-tabs nav-justified elegant-color-dark" }, [a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/settings/general", "active-class": "active" } }, [e._v("General Settings")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", class: { "text-muted": !e.can_popup }, attrs: { to: "/settings/popup", "active-class": "active" } }, [e._v("Popup Settings")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/settings/keyboard", "active-class": "active" } }, [e._v("Keyboard Shortcuts")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/settings/developer", "active-class": "active" } }, [e._v("Developer Options")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/settings/cloud", "active-class": "active" } }, [e.cloud_page_unlocked ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e._v("  Cloud Settings ")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/settings/backup", "active-class": "active" } }, [e._v("Backup & Restore")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/settings/stats", "active-class": "active" } }, [e._v("Offline Stats")])], 1)]), e.settings ? a("div", { staticClass: "tab-content grey darken-3 card" }, ["general" == e.active_tab ? a("settings-general", { attrs: { settings: e.settings, root: e.root } }) : e._e(), "popup" == e.active_tab ? a("settings-popup", { attrs: { settings: e.settings, root: e.root } }) : e._e(), "keyboard" == e.active_tab ? a("settings-keyboard", { attrs: { settings: e.settings, root: e.root } }) : e._e(), "backup" == e.active_tab ? a("settings-backup", { attrs: { settings: e.settings, root: e.root } }) : e._e(), "stats" == e.active_tab ? a("settings-stats", { attrs: { custom_generators: e.custom_generators, install_date: e.install_date, extra_fields: e.extra_fields, root: e.root, settings: e.settings, stats: e.stats } }) : e._e(), "developer" == e.active_tab ? a("settings-developer", { attrs: { active_sub_sub_tab: e.active_sub_sub_tab, active_sub_tab: e.active_sub_tab, custom_generators: e.custom_generators, root: e.root, settings: e.settings, initial_values: e.initial_values } }) : e._e(), "cloud" == e.active_tab ? a("settings-cloud", { attrs: { settings: e.settings, initial_values: e.initial_values, root: e.root, unlocked: e.cloud_page_unlocked } }) : e._e()], 1) : e._e(), a("div", { staticClass: "position-relative small mt-5 text-center" }, [a("label", [e._v("Current version: " + e._s(e.fd_current_version))])]), a("nav", { staticClass: "navbar navbar-dark elegant-color-dark fixed-bottom d-block save_bar slider", class: { closed: !e.any_changes } }, [a("div", { staticClass: "text-center" }, [a("button", { staticClass: "btn btn-md btn-dark-green save_btn", attrs: { type: "button" }, on: { click: e.saveChanges } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v(" Save Changes")], 1), a("button", { staticClass: "btn btn-md btn-unique cancel_btn", attrs: { type: "button" }, on: { click: e.cancelChanges } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Cancel")], 1)])])]) }, q = [], L = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "tab-pane in active", attrs: { id: "tab_general", role: "tabpanel" } }, [a("setting-dropdown", { attrs: { options: e.root.languages, label: "Generator language:" }, model: { value: e.settings.language, callback: function (t) { e.$set(e.settings, "language", t) }, expression: "settings.language" } }), a("setting-dropdown", { attrs: { options: { replace: "Replace content", append: "Append to content", prepend: "Prepend to content", cursor: "Insert at cursor position" }, label: "Input insert method:" }, model: { value: e.settings.insert_method, callback: function (t) { e.$set(e.settings, "insert_method", t) }, expression: "settings.insert_method" } }), a("setting-dropdown", { attrs: { options: { nothing: "Do nothing unless learned as Option Field", required: "Only required checkboxes & radio buttons & learned Option Fields", random: "Random checkboxes / Random radio buttons", all: "All checkboxes / Random radio buttons" }, label: "Checkbox and radio button selection behavior when filling entire form:" }, model: { value: e.settings.checkbox_behavior, callback: function (t) { e.$set(e.settings, "checkbox_behavior", t) }, expression: "settings.checkbox_behavior" } }), a("setting-dropdown", { attrs: { options: { nothing: "Do nothing unless learned as Option Field", required: "Random selection only for required fields & Option Fields", all: "Random selection for all fields" }, label: "Behavior for <select> dropdowns:" }, model: { value: e.settings.select_behavior, callback: function (t) { e.$set(e.settings, "select_behavior", t) }, expression: "settings.select_behavior" } }), a("setting-dropdown", { attrs: { options: { one: "Select one random option at a time", all: "Select all options", random: "Select a random number of random options" }, label: "How should multi-<select> dropdowns behave:" }, model: { value: e.settings.multi_select_behavior, callback: function (t) { e.$set(e.settings, "multi_select_behavior", t) }, expression: "settings.multi_select_behavior" } }), a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Ignore non-empty fields")]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Fill all fields "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.ignore_empty_fields, expression: "settings.ignore_empty_fields" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.ignore_empty_fields) ? e._i(e.settings.ignore_empty_fields, null) > -1 : e.settings.ignore_empty_fields }, on: { change: function (t) { var a = e.settings.ignore_empty_fields, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "ignore_empty_fields", a.concat([o])) : n > -1 && e.$set(e.settings, "ignore_empty_fields", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "ignore_empty_fields", i) } } }), a("span", { staticClass: "lever" }), e._v(" Fill only empty fields "), a("span", { attrs: { "data-html": "true", title: "Fields that are not empty are ignored. Applies only when filling entire form at once, not when filling individual fields." } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } })], 1)])])])]), a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-4 setting-fill_on_load" }, [a("label", [e._v("Page load action")]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Do nothing "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.fill_on_load, expression: "settings.fill_on_load" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.fill_on_load) ? e._i(e.settings.fill_on_load, null) > -1 : e.settings.fill_on_load }, on: { change: function (t) { var a = e.settings.fill_on_load, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "fill_on_load", a.concat([o])) : n > -1 && e.$set(e.settings, "fill_on_load", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "fill_on_load", i) } } }), a("span", { staticClass: "lever" }), e._v(" Fill all fields on page ")])])])]), e.settings.fill_on_load ? a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-4 setting-fill_on_load_urls" }, [a("label", [e._v("Manage URL whitelist / blacklist")]), a("div", [a("button", { staticClass: "btn btn-sm elegant-color-dark", attrs: { type: "button" }, on: { click: e.manageAutoFillUrls } }, [e._v("Manage URLs")])])])]) : e._e(), e.settings.fill_on_load ? a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-4 setting-fill_on_load_observe_dom" }, [a("label", [e._v("Monitor DOM changes")]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Do not monitor DOM changes "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.fill_on_load_observe_dom, expression: "settings.fill_on_load_observe_dom" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.fill_on_load_observe_dom) ? e._i(e.settings.fill_on_load_observe_dom, null) > -1 : e.settings.fill_on_load_observe_dom }, on: { change: function (t) { var a = e.settings.fill_on_load_observe_dom, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "fill_on_load_observe_dom", a.concat([o])) : n > -1 && e.$set(e.settings, "fill_on_load_observe_dom", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "fill_on_load_observe_dom", i) } } }), a("span", { staticClass: "lever" }), e._v(" Monitor DOM changes and fill fields as they appear on the page ")])])])]) : e._e(), a("div", { class: { nopro: !e.root.isLicenseActive() } }, [a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Custom Code editor type:")]), e.root.isLicenseActive() ? e._e() : a("pro-required", { attrs: { "label-false": "Pro Only", root: e.root } }), a("div", { staticClass: "switch" }, [a("label", [e._v(" Lame editor "), e.root.isLicenseActive() ? a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.codemirror_enabled, expression: "settings.codemirror_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.codemirror_enabled) ? e._i(e.settings.codemirror_enabled, null) > -1 : e.settings.codemirror_enabled }, on: { change: function (t) { var a = e.settings.codemirror_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "codemirror_enabled", a.concat([o])) : n > -1 && e.$set(e.settings, "codemirror_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "codemirror_enabled", i) } } }) : a("input", { attrs: { type: "checkbox", disabled: "" }, domProps: { value: !1 } }), a("span", { staticClass: "lever" }), e._v(" Awesome editor with syntax highlight and a lot of other cool stuff ")])])], 1)]), a("setting-dropdown", { attrs: { options: { popup: "Show Fake Data Popup", options: "Open Options page", fill_input: "Fill current active input", fill_form: "Fill current active form", fill_page: "Fill entire page" }, label: "Pressing Fake Data icon will do the following action:" }, model: { value: e.settings.icon_action, callback: function (t) { e.$set(e.settings, "icon_action", t) }, expression: "settings.icon_action" } }), a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Group Default Generators inside context menu")]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Do not group "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.group_default_generators, expression: "settings.group_default_generators" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.group_default_generators) ? e._i(e.settings.group_default_generators, null) > -1 : e.settings.group_default_generators }, on: { change: function (t) { var a = e.settings.group_default_generators, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "group_default_generators", a.concat([o])) : n > -1 && e.$set(e.settings, "group_default_generators", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "group_default_generators", i) } } }), a("span", { staticClass: "lever" }), e._v(" Group under parent sub-menu "), a("span", { attrs: { "data-html": "true", title: "This will help reducing clutter a little if you have a lot of Custom Generators created." } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } })], 1)])])])]), a("settings-general_-manage-urls-modal", { attrs: { settings: e.settings, root: e.root } })], 1) }, B = [], N = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade enable-fd-cloud-modal", attrs: { id: "SettingsGeneral_ManageUrlsModal", tabindex: "-1", role: "dialog", "aria-hidden": "true" } }, [a("div", { staticClass: "modal-dialog modal-xl", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [e._m(0), a("div", { staticClass: "modal-body" }, [a("div", { staticClass: "position-relative setting_wrapper" }, [a("div", { staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), a("input", { staticClass: "select-dropdown dropdown-toggle", attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: e.fill_on_load_urls_type_dropdown_options[e.type] } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, e._l(e.fill_on_load_urls_type_dropdown_options, (function (t, s) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.type = s } } }, [e._v(e._s(t))]) })), 0)]), a("label", [e._v("How should the URL list behave?")])]), a("div", { staticClass: "card card-cascade narrower elegant-color px-4" }, [a("div", { staticClass: "table-wrapper" }, [a("table", { staticClass: "table table-hover" }, [e._m(1), a("tbody", e._l(e.urls, (function (t, s) { return a("tr", [a("td", [a("input", { directives: [{ name: "model", rawName: "v-model", value: t.url, expression: "url.url" }], staticClass: "form-control elegant-color-dark text-white text-monospace", attrs: { type: "text", placeholder: "URL" }, domProps: { value: t.url }, on: { input: function (a) { a.target.composing || e.$set(t, "url", a.target.value) } } })]), a("td", [a("div", { staticClass: "form-check regex_check_div" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: t.regex, expression: "url.regex" }], staticClass: "filled-in form-check-input url_input", attrs: { type: "checkbox", id: "regex_check_" + s }, domProps: { checked: Array.isArray(t.regex) ? e._i(t.regex, null) > -1 : t.regex }, on: { change: function (a) { var s = t.regex, i = a.target, o = !!i.checked; if (Array.isArray(s)) { var n = null, r = e._i(s, n); i.checked ? r < 0 && e.$set(t, "regex", s.concat([n])) : r > -1 && e.$set(t, "regex", s.slice(0, r).concat(s.slice(r + 1))) } else e.$set(t, "regex", o) } } }), a("label", { staticClass: "form-check-label", attrs: { for: "regex_check_" + s } })])]), a("td", [a("button", { staticClass: "btn btn-unique btn-flat btn-sm", on: { click: function (t) { return e.removeUrl(s) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"], size: "sm" } }), e._v("  Delete")], 1)])]) })), 0), a("tfoot", [a("tr", [a("td", { staticClass: "text-center", attrs: { colspan: "3" } }, [a("button", { staticClass: "btn btn-sm default-color-dark add_new_rule_btn", attrs: { type: "button" }, on: { click: e.addNewUrl } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "plus"] } }), e._v("  Add new")], 1)])])])])])])]), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v("  Cancel ")], 1), a("button", { staticClass: "btn btn-md btn-dark-green", attrs: { type: "submit" }, on: { click: e.submitCallback } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v("  Done ")], 1)])])])]) }, G = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title", attrs: { id: "exampleModalLabel" } }, [e._v("Manage autofill URLs")]), a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("thead", [a("tr", [a("th", { staticStyle: { width: "auto" } }, [e._v("URL")]), a("th", { staticStyle: { width: "105px" } }, [e._v("Use RegEx")]), a("th", { staticStyle: { width: "145px" } }, [e._v("Actions")])])]) }], I = { name: "SettingsGeneral_ManageUrlsModal", props: ["callback", "settings", "root"], data: function () { return { urls: [], type: "blacklist" } }, watch: { "settings.fill_on_load_urls": { immediate: !0, handler: function () { this.reloadUrls() } }, "settings.fill_on_load_urls_type": function () { this.reloadUrls() } }, mounted() { $("#SettingsGeneral_ManageUrlsModal").on("show.bs.modal", function () { this.reloadUrls() }.bind(this)) }, computed: { fill_on_load_urls_type_dropdown_options: function () { return { blacklist: "Autofill all URLs except the ones defined below (blacklist)", whitelist: "Autofill only URLs that are defined below (whitelist)" } } }, methods: { reloadUrls: function () { this.urls = this.root.normalizeVueObject(this.settings.fill_on_load_urls), this.urls instanceof Array || (this.urls = []), this.type = this.settings.fill_on_load_urls_type }, submitCallback: function () { this.settings.fill_on_load_urls = this.urls, this.settings.fill_on_load_urls_type = this.type, "function" == typeof this.callback && this.callback(), $(this.$el).modal("hide") }, addNewUrl: function () { this.urls.push({ url: "", regex: !1 }) }, removeUrl: function (e) { this.urls.splice(e, 1) } } }, z = I, R = (a("c081"), Object(b["a"])(z, N, G, !1, null, null, null)), V = R.exports, Y = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "position-relative setting_wrapper settings-dropdown-component" }, [a("div", { key: e.component_key, ref: "select_element", staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), a("input", { staticClass: "select-dropdown dropdown-toggle", attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: e.options[e.select_value] } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, e._l(e.options, (function (t, s) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.select_value = s } } }, [e._v(e._s(t))]) })), 0)]), a("label", [e._v(e._s(e.label) + " "), e.label_help ? a("span", { attrs: { title: e.label_help, "data-html": "true" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", e.label_icon || "question-circle"] } })], 1) : e._e()])]) }, W = [], K = { name: "setting-dropdown", props: ["value", "options", "label", "label_icon", "label_help"], data() { return { selected_value: null, component_key: "setting-dropdown-" + (Math.random() + 1).toString(36).substring(7) } }, watch: { value: { immediate: !0, handler: function () { this.value != this.selected_value && (this.selected_value = this.value, this.reInitMaterialSelect()) } } }, mounted() { this.reInitMaterialSelect() }, computed: { select_value: { set: function (e) { this.selected_value = e, this.$emit("input", this.selected_value) }, get: function () { return this.selected_value } } }, methods: { reInitMaterialSelect: function () { } } }, H = K, J = (a("f955"), Object(b["a"])(H, Y, W, !1, null, null, null)), Q = J.exports, Z = { name: "settings-general", components: { SettingDropdown: Q, SettingsGeneral_ManageUrlsModal: V, ProRequired: F }, props: { root: {}, settings: {} }, methods: { manageAutoFillUrls: function () { $("#SettingsGeneral_ManageUrlsModal").modal("show") } } }, X = Z, ee = Object(b["a"])(X, L, B, !1, null, null, null), te = ee.exports, ae = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "tab-pane in active", attrs: { id: "tab_keyboard", role: "tabpanel" } }, [a("h5", [e._v("Main shortcuts:")]), a("div", { staticClass: "position-relative" }, [a("label", { staticClass: "setting_label", staticStyle: { "margin-top": "15px" } }, [e._v("Insert data in a single field:")]), e.keyboard_shortcut_hovered && e.pressedKeys.length ? a("kbd", { staticClass: "display-block keys_pressed", attrs: { "data-keys": "keyboard_shortcut" }, on: { dblclick: function (t) { return t.stopPropagation(), t.preventDefault(), e.captureDoubleClickEvent(t, "keyboard_shortcut") }, fakedatadblclick: function (t) { return t.stopPropagation(), t.preventDefault(), e.captureDoubleClickEvent(t, "keyboard_shortcut") } } }, [e._v(e._s(e.currentPressedKeyCombination))]) : a("kbd", { staticClass: "display-block", attrs: { "data-keys": "keyboard_shortcut" }, on: { dblclick: function (t) { return t.stopPropagation(), t.preventDefault(), e.captureDoubleClickEvent(t, "keyboard_shortcut") }, fakedatadblclick: function (t) { return t.stopPropagation(), t.preventDefault(), e.captureDoubleClickEvent(t, "keyboard_shortcut") } } }, [e._v(e._s(e.registeredKeyCombination))])]), a("div", { staticClass: "position-relative" }, [a("label", { staticClass: "setting_label", staticStyle: { "margin-top": "30px" } }, [e._v("Fill entire form:")]), e.keyboard_shortcut_entire_form_hovered && e.pressedKeys.length ? a("kbd", { staticClass: "display-block keys_pressed", attrs: { "data-keys": "keyboard_shortcut_entire_form" }, on: { dblclick: function (t) { return t.stopPropagation(), t.preventDefault(), e.captureDoubleClickEvent(t, "keyboard_shortcut_entire_form") }, fakedatadblclick: function (t) { return t.stopPropagation(), t.preventDefault(), e.captureDoubleClickEvent(t, "keyboard_shortcut_entire_form") } } }, [e._v(e._s(e.currentPressedKeyCombination))]) : a("kbd", { staticClass: "display-block", attrs: { "data-keys": "keyboard_shortcut_entire_form" }, on: { dblclick: function (t) { return t.stopPropagation(), t.preventDefault(), e.captureDoubleClickEvent(t, "keyboard_shortcut_entire_form") }, fakedatadblclick: function (t) { return t.stopPropagation(), t.preventDefault(), e.captureDoubleClickEvent(t, "keyboard_shortcut_entire_form") } } }, [e._v(e._s(e.registeredKeyCombinationForEntireForm))])]), a("div", { staticClass: "position-relative" }, [a("label", { staticClass: "setting_label", staticStyle: { "margin-top": "30px" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } }), e._v("  To change a shortcut, double click one of the above fields while holding the desired key combination. ")], 1)]), e.has_additional_shortcuts ? a("div", { staticClass: "mt-4" }, [a("hr"), a("h5", [e._v("Additional shortcuts:")]), e._l(e.has_additional_shortcuts, (function (t) { return a("div", { staticClass: "position-relative" }, [a("label", { staticClass: "setting_label", staticStyle: { "margin-top": "15px" } }, [e._v(e._s(t.description))]), a("kbd", { staticClass: "display-block" }, [e._v(e._s(t.shortcut || "n/a"))])]) })), a("div", { staticClass: "position-relative" }, [a("label", { staticClass: "setting_label", staticStyle: { "margin-top": "30px" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } }), e._v("   "), "firefox" == e.root.getBrowser() ? a("span", [e._v("In order to change these additional shortcuts, please see the instructions on the following page: "), a("a", { staticClass: "text-white underline-hover", attrs: { href: "https://support.mozilla.org/en-US/kb/manage-extension-shortcuts-firefox", target: "_blank" } }, [e._v("Manage extension shortcuts in Firefox "), a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } })], 1)]) : "edge" == e.root.getBrowser() ? a("span", [e._v("In order to change these additional shortcuts, open a new tab and navigate to the following URL: "), a("code", [e._v("edge://extensions/shortcuts")])]) : "opera" == e.root.getBrowser() ? a("span", [e._v("In order to change these additional shortcuts, open a new tab, navigate to the following URL and scroll to the bottom of the page: "), a("code", [e._v("chrome://settings/keyboardShortcuts")])]) : a("span", [e._v("In order to change these additional shortcuts, open a new tab and navigate to the following URL: "), a("code", [e._v("chrome://extensions/shortcuts")])])], 1)])], 2) : e._e()]) }, se = [], ie = { name: "settings-keyboard", props: { root: {}, settings: {} }, data() { return { keyboard_shortcut_hovered: !1, keyboard_shortcut_entire_form_hovered: !1, pressedKeys: [], has_additional_shortcuts: !1 } }, mounted() { this.checkAdditionalBrowserShortcuts(), this.$nextTick((function () { $("body").off("keydown.hatespace"), $("body").off("keyup.hatespace"), $(window).off("blur.hatespace"), $("body").on("keydown.hatespace", this.captureKeyboardPressEvent), $("body").on("keyup.hatespace", this.captureKeyboardReleaseEvent), $(window).on("blur.hatespace", function () { this.pressedKeys = [] }.bind(this)), $("kbd").on("mouseenter", function (e) { "keyboard_shortcut" == $(e.currentTarget).attr("data-keys") ? this.keyboard_shortcut_hovered = !0 : "keyboard_shortcut_entire_form" == $(e.currentTarget).attr("data-keys") && (this.keyboard_shortcut_entire_form_hovered = !0) }.bind(this)), $("kbd").on("mouseleave", function (e) { "keyboard_shortcut" == $(e.currentTarget).attr("data-keys") ? this.keyboard_shortcut_hovered = !1 : "keyboard_shortcut_entire_form" == $(e.currentTarget).attr("data-keys") && (this.keyboard_shortcut_entire_form_hovered = !1) }.bind(this)); var e = null; $(document).on("touchend", (function (t) { var a = (new Date).getTime(); if (null !== e && a - e < 600) { e = null, t.preventDefault(); var s = document.createEvent("HTMLEvents"); s.initEvent("fakedatadblclick", !0, !1), t.target.dispatchEvent(s) } else e = a })) })) }, computed: { registeredKeyCombination: function () { if (!this.settings.keyboard_shortcut || !this.settings.keyboard_shortcut.keyboard) return ""; var e = Object.assign([], this.settings.keyboard_shortcut.keyboard); return e.length > 0 && e.push("Double Click"), e.join(" + ") }, registeredKeyCombinationForEntireForm: function () { if (!this.settings.keyboard_shortcut_entire_form || !this.settings.keyboard_shortcut_entire_form.keyboard) return ""; var e = Object.assign([], this.settings.keyboard_shortcut_entire_form.keyboard); return e.length > 0 && e.push("Double Click"), e.join(" + ") }, currentPressedKeyCombination: function () { var e = Object.assign([], this.pressedKeys); if (e.sort(), e = e.join(" + "), this.keyboard_shortcut_hovered) { var t = this.settings.keyboard_shortcut.keyboard.join(" + "); if (t == e) return t + " + Double Click (current)" } if (this.keyboard_shortcut_entire_form_hovered) { t = this.settings.keyboard_shortcut_entire_form.keyboard.join(" + "); if (t == e) return t + " + Double Click (current)" } return e } }, methods: { captureDoubleClickEvent: function (e, t) { if (e.preventDefault(), e) { if (void 0 !== e.metaKey) { var a = this.pressedKeys.indexOf(this.root.getMetaKeyName()); a >= 0 && !e.metaKey ? this.pressedKeys.splice(a, 1) : a < 0 && e.metaKey && this.pressedKeys.push(this.root.getMetaKeyName()) } if (void 0 !== e.altKey) { a = this.pressedKeys.indexOf("Alt"); a >= 0 && !e.altKey ? this.pressedKeys.splice(a, 1) : a < 0 && e.altKey && this.pressedKeys.push("Alt") } if (void 0 !== e.shiftKey) { a = this.pressedKeys.indexOf("Shift"); a >= 0 && !e.shiftKey ? this.pressedKeys.splice(a, 1) : a < 0 && e.shiftKey && this.pressedKeys.push("Shift") } if (void 0 !== e.ctrlKey) { a = this.pressedKeys.indexOf("Control"); a >= 0 && !e.ctrlKey ? this.pressedKeys.splice(a, 1) : a < 0 && e.ctrlKey && this.pressedKeys.push("Control") } } this.pressedKeys.length && (this.settings[t].keyboard = Object.assign([], this.pressedKeys).sort()) }, captureKeyboardPressEvent: function (e) { if (e.key && this.root) { var t = this.root.parseKeyboardButton(e.key); t && -1 == this.pressedKeys.indexOf(t) && this.pressedKeys.push(t) } }, captureKeyboardReleaseEvent: function (e) { if (e.key && this.root) { var t = this.root.parseKeyboardButton(e.key); "Cmd" == t ? this.pressedKeys = [] : t && this.pressedKeys.indexOf(t) > -1 && this.pressedKeys.splice(this.pressedKeys.indexOf(t), 1) } }, checkAdditionalBrowserShortcuts: function () { if (!chrome.commands) return !1; chrome.commands.getAll(function (e) { this.has_additional_shortcuts = e.filter((function (e) { return "_" != e.name[0] })) }.bind(this)) } } }, oe = ie, ne = Object(b["a"])(oe, ae, se, !1, null, null, null), re = ne.exports, le = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "tab-pane in active", attrs: { id: "tab_backup", role: "tabpanel" } }, [a("br"), a("button", { staticClass: "btn elegant-color-dark btn-lg btn-block", attrs: { type: "button" }, on: { click: e.backupData } }, [e._v("Backup Data")]), a("br"), a("button", { staticClass: "btn elegant-color-dark btn-lg btn-block", attrs: { type: "button" }, on: { click: e.restoreData } }, [e._v("Restore Data")]), a("div", { staticClass: "modal fade page-settings-modal backup_data_modal", attrs: { tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [e._m(0), a("div", { staticClass: "modal-body" }, [a("h6", [a("font-awesome-icon", { attrs: { icon: ["fas", "info-circle"] } }), e._v("  Backup data and restore it later, or in another browser. The backup file is compatible with all browsers.")], 1), a("div", { staticClass: "advanced_settings" }, [a("div", { staticClass: "advanced_settings_holder" }, [a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.backup_options, expression: "backup_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_backup_default_generators", value: "backup_default_generators" }, domProps: { checked: Array.isArray(e.backup_options) ? e._i(e.backup_options, "backup_default_generators") > -1 : e.backup_options }, on: { change: function (t) { var a = e.backup_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "backup_default_generators", n = e._i(a, o); s.checked ? n < 0 && (e.backup_options = a.concat([o])) : n > -1 && (e.backup_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.backup_options = i } } }), e._m(1)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.backup_options, expression: "backup_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_backup_custom_generators", value: "backup_custom_generators" }, domProps: { checked: Array.isArray(e.backup_options) ? e._i(e.backup_options, "backup_custom_generators") > -1 : e.backup_options }, on: { change: function (t) { var a = e.backup_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "backup_custom_generators", n = e._i(a, o); s.checked ? n < 0 && (e.backup_options = a.concat([o])) : n > -1 && (e.backup_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.backup_options = i } } }), e._m(2)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.backup_options, expression: "backup_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_backup_named_fields", value: "backup_named_fields" }, domProps: { checked: Array.isArray(e.backup_options) ? e._i(e.backup_options, "backup_named_fields") > -1 : e.backup_options }, on: { change: function (t) { var a = e.backup_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "backup_named_fields", n = e._i(a, o); s.checked ? n < 0 && (e.backup_options = a.concat([o])) : n > -1 && (e.backup_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.backup_options = i } } }), e._m(3)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.backup_options, expression: "backup_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_backup_unnamed_fields", value: "backup_unnamed_fields" }, domProps: { checked: Array.isArray(e.backup_options) ? e._i(e.backup_options, "backup_unnamed_fields") > -1 : e.backup_options }, on: { change: function (t) { var a = e.backup_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "backup_unnamed_fields", n = e._i(a, o); s.checked ? n < 0 && (e.backup_options = a.concat([o])) : n > -1 && (e.backup_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.backup_options = i } } }), e._m(4)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.backup_options, expression: "backup_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_backup_option_fields", value: "backup_option_fields" }, domProps: { checked: Array.isArray(e.backup_options) ? e._i(e.backup_options, "backup_option_fields") > -1 : e.backup_options }, on: { change: function (t) { var a = e.backup_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "backup_option_fields", n = e._i(a, o); s.checked ? n < 0 && (e.backup_options = a.concat([o])) : n > -1 && (e.backup_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.backup_options = i } } }), e._m(5)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.backup_options, expression: "backup_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_backup_settings", value: "backup_settings" }, domProps: { checked: Array.isArray(e.backup_options) ? e._i(e.backup_options, "backup_settings") > -1 : e.backup_options }, on: { change: function (t) { var a = e.backup_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "backup_settings", n = e._i(a, o); s.checked ? n < 0 && (e.backup_options = a.concat([o])) : n > -1 && (e.backup_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.backup_options = i } } }), e._m(6)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.backup_options, expression: "backup_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_backup_libraries", value: "backup_libraries" }, domProps: { checked: Array.isArray(e.backup_options) ? e._i(e.backup_options, "backup_libraries") > -1 : e.backup_options }, on: { change: function (t) { var a = e.backup_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "backup_libraries", n = e._i(a, o); s.checked ? n < 0 && (e.backup_options = a.concat([o])) : n > -1 && (e.backup_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.backup_options = i } } }), e._m(7)])])])]), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-dark-green dobkp", attrs: { type: "button", "data-loading-text": "Loading..." }, on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.doBackupData.apply(null, arguments) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "download"], size: "sm" } }), e._v(" Backup")], 1), a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Close")], 1)])])])]), a("div", { staticClass: "modal fade page-settings-modal restore_data_modal", attrs: { tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [e._m(8), a("div", { staticClass: "modal-body" }, [e._m(9), a("div", [a("div", { staticClass: "file-field" }, [a("input", { attrs: { type: "file", accept: ".hate,.h8", id: "restore_file_input" } }), a("div", { staticClass: "btn btn-sm grey darken-3 float-left choose_file_btn", on: { click: function (t) { return e.openFileDialog("#restore_file_input") } } }, [a("span", [e._v("Choose file")])]), e._m(10)])]), a("div", { staticClass: "advanced_settings" }, [a("div", { staticClass: "advanced_settings_holder" }, [a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_overwrite_default_generators", value: "restore_overwrite_default_generators" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_overwrite_default_generators") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_overwrite_default_generators", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(11)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_add_missing_custom_generators", value: "restore_add_missing_custom_generators" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_add_missing_custom_generators") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_add_missing_custom_generators", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(12)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_overwrite_custom_generators", value: "restore_overwrite_custom_generators" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_overwrite_custom_generators") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_overwrite_custom_generators", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(13)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_remove_custom_generators", value: "restore_remove_custom_generators" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_remove_custom_generators") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_remove_custom_generators", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(14)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_add_named_fields", value: "restore_add_named_fields" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_add_named_fields") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_add_named_fields", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(15)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_overwrite_named_fields", value: "restore_overwrite_named_fields" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_overwrite_named_fields") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_overwrite_named_fields", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(16)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_remove_named_fields", value: "restore_remove_named_fields" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_remove_named_fields") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_remove_named_fields", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(17)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_add_unnamed_fields", value: "restore_add_unnamed_fields" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_add_unnamed_fields") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_add_unnamed_fields", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(18)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_overwrite_unnamed_fields", value: "restore_overwrite_unnamed_fields" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_overwrite_unnamed_fields") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_overwrite_unnamed_fields", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(19)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_remove_unnamed_fields", value: "restore_remove_unnamed_fields" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_remove_unnamed_fields") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_remove_unnamed_fields", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(20)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_add_option_fields", value: "restore_add_option_fields" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_add_option_fields") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_add_option_fields", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(21)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_overwrite_option_fields", value: "restore_overwrite_option_fields" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_overwrite_option_fields") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_overwrite_option_fields", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(22)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_remove_option_fields", value: "restore_remove_option_fields" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_remove_option_fields") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_remove_option_fields", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(23)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_settings", value: "restore_settings" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_settings") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_settings", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(24)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_missing_libraries", value: "restore_missing_libraries" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_missing_libraries") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_missing_libraries", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(25)]), a("div", [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.restore_options, expression: "restore_options" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox_restore_overwrite_libraries", value: "restore_overwrite_libraries" }, domProps: { checked: Array.isArray(e.restore_options) ? e._i(e.restore_options, "restore_overwrite_libraries") > -1 : e.restore_options }, on: { change: function (t) { var a = e.restore_options, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = "restore_overwrite_libraries", n = e._i(a, o); s.checked ? n < 0 && (e.restore_options = a.concat([o])) : n > -1 && (e.restore_options = a.slice(0, n).concat(a.slice(n + 1))) } else e.restore_options = i } } }), e._m(26)])])])]), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-dark-green dorestore disabled", attrs: { type: "button", "data-loading-text": "Loading..." }, on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.doRestoreData.apply(null, arguments) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "upload"], size: "sm" } }), e._v(" Restore")], 1), a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Close")], 1)])])])])]) }, ce = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title" }, [e._v("Backup Options")]), a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { staticClass: "text-white", attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_backup_default_generators" } }, [a("span", [e._v("Backup Default Generators")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_backup_custom_generators" } }, [a("span", [e._v("Backup Custom Generators")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_backup_named_fields" } }, [a("span", [e._v("Backup Named Fields")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_backup_unnamed_fields" } }, [a("span", [e._v("Backup Unnamed Fields")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_backup_option_fields" } }, [a("span", [e._v("Backup Option Fields")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_backup_settings" } }, [a("span", [e._v("Backup Settings")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_backup_libraries" } }, [a("span", [e._v("Backup Loaded Libraries")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title" }, [e._v("Restore Options")]), a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { staticClass: "text-white", attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "slider closed", staticStyle: { height: "50px", "margin-bottom": "10px" } }, [a("div", { staticClass: "alert", attrs: { id: "restore_alert_message" } })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "file-path-wrapper" }, [a("input", { staticClass: "file-path validate elegant-color-dark text-white no-border", attrs: { readonly: "", type: "text", placeholder: "Choose the backup file" } })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_overwrite_default_generators" } }, [a("span", [e._v("Overwrite Default Generators")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_add_missing_custom_generators" } }, [a("span", [e._v("Add missing Custom Generators")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_overwrite_custom_generators" } }, [a("span", [e._v("Overwrite Custom Generators with same label")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_remove_custom_generators" } }, [a("span", [e._v("Remove existing Custom Generators that are not found in backup file")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_add_named_fields" } }, [a("span", [e._v("Add missing Named Fields")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_overwrite_named_fields" } }, [a("span", [e._v("Overwrite Named Fields with same name")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_remove_named_fields" } }, [a("span", [e._v("Remove existing Named Fields that are not found in backup file")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_add_unnamed_fields" } }, [a("span", [e._v("Add missing Unnamed Fields")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_overwrite_unnamed_fields" } }, [a("span", [e._v("Overwrite Unnamed Fields with same selector")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_remove_unnamed_fields" } }, [a("span", [e._v("Remove existing Unnamed Fields that are not found in backup file")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_add_option_fields" } }, [a("span", [e._v("Add missing Option Fields")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_overwrite_option_fields" } }, [a("span", [e._v("Overwrite Option Fields with same selector")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_remove_option_fields" } }, [a("span", [e._v("Remove existing Option Fields that are not found in backup file")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_settings" } }, [a("span", [e._v("Restore and overwrite existing settings")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_missing_libraries" } }, [a("span", [e._v("Restore missing libraries")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox_restore_overwrite_libraries" } }, [a("span", [e._v("Restore and overwrite existing libraries")])]) }], de = { name: "settings-backup", props: { root: {}, settings: {} }, data() { return { backup_options: ["backup_default_generators", "backup_custom_generators", "backup_named_fields", "backup_unnamed_fields", "backup_option_fields", "backup_settings", "backup_libraries"], restore_options: ["restore_add_missing_custom_generators", "restore_add_named_fields", "restore_add_unnamed_fields", "restore_add_option_fields", "restore_settings", "restore_missing_libraries"] } }, watch: { backup_options: function () { 0 == this.backup_options.length ? $("button.dobkp").addClass("disabled") : $("button.dobkp").removeClass("disabled") } }, mounted() { $("body > .backup_data_modal").remove(), $("body").append($(".backup_data_modal")), $("body > .restore_data_modal").remove(), $("body").append($(".restore_data_modal")), $("#restore_file_input").on("change", function () { $("#restore_file_input").get(0).files.length ? $("button.dorestore").removeClass("disabled") : $("button.dorestore").addClass("disabled") }.bind(this)), $("#restore_data_modal").on("hidden.bs.modal", function () { this.hideRestoreAlert(), $("#restore_file_input").val("").trigger("change") }.bind(this)) }, methods: { openFileDialog: function (e) { $(e).click() }, backupData: function () { $(".backup_data_modal").modal("show") }, restoreData: function () { $(".restore_data_modal").modal("show") }, getCurrentDate: function () { var e = new Date, t = e.getMonth() + 1, a = e.getDate(), s = e.getFullYear(); return t < 10 && (t = "0" + t), a < 10 && (a = "0" + a), s + "-" + t + "-" + a }, doRestoreData: function () { if (!$("button.dorestore").hasClass("disabled") && !$("button.dorestore").is(":disabled")) { $("button.dorestore").button("loading"), this.hideRestoreAlert(); var e, t = $("#restore_file_input").get(0).files; if (0 == t.length) return this.showRestoreAlert("No hate file selected!"), void $("button.dorestore").button("reset"); if (e = t[0], "hate" != e.name.substr(-4).toLowerCase() && "h8" != e.name.substr(-2).toLowerCase()) return this.showRestoreAlert("Not a hate file!"), void $("button.dorestore").button("reset"); this.isValidHeader(e, function (t) { if (!t) return this.showRestoreAlert("File does not contain hate in it!"), void $("button.dorestore").button("reset"); this.readTheRestOfFile(e, function (e) { var t, a = e.target.result, s = new Uint8Array(a), i = s.slice(-2), o = 141 == i[0] && 144 == i[1] ? new TextDecoder("utf-8").decode(s.slice(0, -3)) : new TextDecoder("utf-8").decode(s); try { t = JSON.parse(o) } catch (r) { return this.showRestoreAlert("File contains corrupt hate!"), void $("button.dorestore").button("reset") } if ("undefined" == typeof t.fake_data) return this.showRestoreAlert("The source of this hate is unknown!"), void $("button.dorestore").button("reset"); var n = t.fake_data; this.root.getStorageEngine().get({ custom_callbacks: {}, default_generator_checkboxes: {}, default_generators_settings: {}, custom_generators: [], extra_fields: {}, extra_fields_callbacks: {} }, function (e) { if (e) { if (this.restore_options.indexOf("restore_overwrite_default_generators") > -1 && "undefined" != typeof n.extra_fields && (e.custom_callbacks = Object.assign({}, n.custom_callbacks), e.default_generator_checkboxes = Object.assign({}, n.default_generator_checkboxes), e.default_generators_settings = Object.assign({}, n.default_generators_settings)), "undefined" != typeof n.custom_generators) { var t = {}, a = [], s = []; for (var i in n.custom_generators) t[n.custom_generators[i].label] = n.custom_generators[i], a.push(n.custom_generators[i].label); var o = []; for (var i in e.custom_generators) s.push(e.custom_generators[i].label), this.restore_options.indexOf("restore_overwrite_custom_generators") > -1 && a.indexOf(e.custom_generators[i].label) > -1 ? e.custom_generators[i].callback = t[e.custom_generators[i].label].callback : this.restore_options.indexOf("restore_remove_custom_generators") > -1 && -1 == a.indexOf(e.custom_generators[i].label) && o.push(e.custom_generators[i].label); for (var i in o) for (var r in e.custom_generators) o[i] == e.custom_generators[r].label && e.custom_generators.splice(r, 1); for (var i in n.custom_generators) this.restore_options.indexOf("restore_add_missing_custom_generators") > -1 && -1 == s.indexOf(n.custom_generators[i].label) && e.custom_generators.push(Object.assign({}, n.custom_generators[i])) } if ("undefined" != typeof n.extra_fields) { var l = {}, c = [], d = [], u = {}, _ = [], m = [], h = {}, p = [], f = []; for (var i in n.extra_fields) "string" == typeof n.extra_fields[i] ? (l[i] = { generator: n.extra_fields[i], kind: "named" }, c.push(i)) : "named" == n.extra_fields[i].kind ? (l[i] = Object.assign({}, n.extra_fields[i]), c.push(i)) : "unnamed" == n.extra_fields[i].kind ? (u[i] = Object.assign({}, n.extra_fields[i]), _.push(i)) : "option" == n.extra_fields[i].kind && (h[i] = Object.assign({}, n.extra_fields[i]), p.push(i)); for (var i in e.extra_fields) "string" == typeof e.extra_fields[i] || "named" == e.extra_fields[i].kind ? d.push(i) : "unnamed" == e.extra_fields[i].kind ? m.push(i) : "option" == e.extra_fields[i].kind && f.push(i), (this.restore_options.indexOf("restore_overwrite_named_fields") > -1 && c.indexOf(i) > -1 || this.restore_options.indexOf("restore_overwrite_unnamed_fields") > -1 && _.indexOf(i) > -1 || this.restore_options.indexOf("restore_overwrite_option_fields") > -1 && p.indexOf(i) > -1) && ("string" == typeof e.extra_fields[i] || "named" == e.extra_fields[i].kind ? e.extra_fields[i] = Object.assign({}, l[i]) : "unnamed" == e.extra_fields[i].kind ? e.extra_fields[i] = Object.assign({}, u[i]) : "option" == e.extra_fields[i].kind && (e.extra_fields[i] = Object.assign({}, h[i])), "custom" == e.extra_fields[i].generator && "undefined" != typeof n.extra_fields_callbacks && "undefined" != typeof n.extra_fields_callbacks[i] && (e.extra_fields_callbacks[i] = n.extra_fields_callbacks[i])), (this.restore_options.indexOf("restore_remove_named_fields") > -1 && -1 == c.indexOf(i) && ("string" == typeof e.extra_fields[i] || "named" == e.extra_fields[i].kind) || this.restore_options.indexOf("restore_remove_unnamed_fields") > -1 && -1 == _.indexOf(i) && "object" == typeof e.extra_fields[i] && "unnamed" == e.extra_fields[i].kind || this.restore_options.indexOf("restore_remove_option_fields") > -1 && -1 == p.indexOf(i) && "object" == typeof e.extra_fields[i] && "option" == e.extra_fields[i].kind) && ("custom" == e.extra_fields[i].generator && Us.delete(e.extra_fields_callbacks, i), Us.delete(e.extra_fields, i)); for (var i in n.extra_fields) (this.restore_options.indexOf("restore_add_named_fields") > -1 && -1 == d.indexOf(i) && ("string" == typeof n.extra_fields[i] || "named" == n.extra_fields[i].kind) || this.restore_options.indexOf("restore_add_unnamed_fields") > -1 && -1 == m.indexOf(i) && "object" == typeof n.extra_fields[i] && "unnamed" == n.extra_fields[i].kind || this.restore_options.indexOf("restore_add_option_fields") > -1 && -1 == f.indexOf(i) && "object" == typeof n.extra_fields[i] && "option" == n.extra_fields[i].kind) && (e.extra_fields[i] = Object.assign({}, n.extra_fields[i]), "custom" == e.extra_fields[i].generator && "undefined" != typeof n.extra_fields_callbacks && "undefined" != typeof n.extra_fields_callbacks[i] && (e.extra_fields_callbacks[i] = n.extra_fields_callbacks[i])) } var v = { custom_callbacks: e.custom_callbacks, default_generator_checkboxes: e.default_generator_checkboxes, default_generators_settings: e.default_generators_settings, custom_generators: e.custom_generators, extra_fields: e.extra_fields, extra_fields_callbacks: e.extra_fields_callbacks }; if (this.restore_options.indexOf("restore_settings") > -1 && n.settings && Object.assign(v, n.settings), (this.restore_options.indexOf("restore_missing_libraries") > -1 || this.restore_options.indexOf("restore_overwrite_libraries") > -1) && n.loaded_libraries) { v.loaded_libraries || (v.loaded_libraries = []); for (i = 0; i < n.loaded_libraries.length; i++) { var g = n.loaded_libraries[i], b = null, w = atob(g.contents); if (this.settings.loaded_libraries) for (r = 0; r < this.settings.loaded_libraries.length; r++)this.settings.loaded_libraries[r].name == g.name && this.settings.loaded_libraries[r].type == g.type && (b = this.settings.loaded_libraries[r]); b ? this.restore_options.indexOf("restore_overwrite_libraries") > -1 ? v.loaded_libraries.push({ name: g.name, type: g.type, contents: w, size: w.length }) : v.loaded_libraries.push(b) : this.restore_options.indexOf("restore_missing_libraries") > -1 && v.loaded_libraries.push({ name: g.name, type: g.type, contents: w, size: w.length }) } if (this.settings.loaded_libraries) for (r = 0; r < this.settings.loaded_libraries.length; r++)v.loaded_libraries.find(e => e.name == this.settings.loaded_libraries[r].name) || v.loaded_libraries.push(this.settings.loaded_libraries[r]) } this.root.getStorageEngine().set(this.root.normalizeVueObject(v), function () { chrome.runtime.sendMessage({ type: "refresh_data" }), this.$parent.syncStorage(), $("button.dorestore").button("reset"), this.showRestoreSuccess("Data successfully imported!") }.bind(this)) } else toastr.error("Load Error: " + (chrome.runtime.lastError || "FD - Unknown error occurred"), !1, { closeButton: !0, timeOut: 5e3 }), $("button.dorestore").button("reset") }.bind(this)) }.bind(this)) }.bind(this)) } }, doBackupData: function () { if (!$("button.dobkp").hasClass("disabled") && !$("button.dobkp").is(":disabled")) { $("button.dobkp").button("loading"); var e = { custom_callbacks: {}, default_generator_checkboxes: {}, default_generators_settings: {}, custom_generators: [], extra_fields: {}, extra_fields_callbacks: {} }; this.root.getStorageEngine().get(e, function (t) { if (t) { if (this.backup_options.indexOf("backup_default_generators") > -1 && (e.custom_callbacks = Object.assign({}, t.custom_callbacks), e.default_generator_checkboxes = Object.assign({}, t.default_generator_checkboxes), e.default_generators_settings = Object.assign({}, t.default_generators_settings)), this.backup_options.indexOf("backup_custom_generators") > -1 && (e.custom_generators = Object.assign([], t.custom_generators)), this.backup_options.indexOf("backup_named_fields") > -1 || this.backup_options.indexOf("backup_unnamed_fields") > -1 || this.backup_options.indexOf("backup_option_fields") > -1) for (var a in t.extra_fields) "string" == typeof t.extra_fields[a] && this.backup_options.indexOf("backup_named_fields") > -1 ? (e.extra_fields[a] = t.extra_fields[a], "custom" == e.extra_fields[a] && (e.extra_fields_callbacks[a] = t.extra_fields_callbacks[a])) : "object" == typeof t.extra_fields[a] && "named" == t.extra_fields[a].kind && this.backup_options.indexOf("backup_named_fields") > -1 || "object" == typeof t.extra_fields[a] && "unnamed" == t.extra_fields[a].kind && this.backup_options.indexOf("backup_unnamed_fields") > -1 ? (e.extra_fields[a] = Object.assign({}, t.extra_fields[a]), "custom" == e.extra_fields[a].generator && (e.extra_fields_callbacks[a] = t.extra_fields_callbacks[a])) : "object" == typeof t.extra_fields[a] && "option" == t.extra_fields[a].kind && this.backup_options.indexOf("backup_option_fields") > -1 && (e.extra_fields[a] = Object.assign({}, t.extra_fields[a])); 0 == Object.keys(e.custom_callbacks).length && (delete e.custom_callbacks, delete e.default_generator_checkboxes), 0 == e.custom_generators.length && delete e.custom_generators, 0 == Object.keys(e.extra_fields).length && delete e.extra_fields, 0 == Object.keys(e.extra_fields_callbacks).length && delete e.extra_fields_callbacks, 0 == Object.keys(e.default_generators_settings).length && delete e.default_generators_settings, e.settings = {}, e.loaded_libraries = [], this.settings && this.backup_options.indexOf("backup_settings") > -1 && (e.settings = this.root.normalizeVueObject(this.settings), delete e.settings.loaded_libraries), this.settings && this.backup_options.indexOf("backup_libraries") > -1 && (e.loaded_libraries = this.root.normalizeVueObject(this.settings.loaded_libraries).map(e => ({ name: e.name, type: e.type, contents: btoa(e.contents) }))), e = { fake_data: e }, this.$parent.downloadFile("HATE:" + JSON.stringify(e), "Fake_Data_" + this.getCurrentDate() + ".hate") } else toastr.error("Load Error: " + (chrome.runtime.lastError || "FD - Unknown error occurred"), !1, { closeButton: !0, timeOut: 5e3 }); $("button.dobkp").button("reset") }.bind(this)) } }, showRestoreAlert: function (e) { $("#restore_alert_message").text(e), $("#restore_alert_message").addClass("alert-danger").removeClass("alert-success").parent().removeClass("closed") }, showRestoreSuccess: function (e) { $("#restore_alert_message").text(e), $("#restore_alert_message").addClass("alert-success").removeClass("alert-danger").parent().removeClass("closed") }, hideRestoreAlert: function () { $("#restore_alert_message").text(), $("#restore_alert_message").removeClass("alert-danger alert-success").parent().addClass("closed") }, isValidHeader: function (e, t) { var a = new FileReader, s = e.slice(0, 5); a.onloadend = function (e) { "HATE:" == e.target.result ? t(!0) : t(!1) }, a.readAsBinaryString(s) }, readTheRestOfFile: function (e, t) { var a = new FileReader, s = e.slice(5); a.onloadend = function (e) { t(e) }, a.readAsArrayBuffer(s) } } }, ue = de, _e = Object(b["a"])(ue, le, ce, !1, null, null, null), me = _e.exports, he = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "tab-pane in active", attrs: { id: "tab_stats", role: "tabpanel" } }, [a("div", { staticClass: "position-relative" }, [a("table", { staticClass: "table table-borderless" }, [a("tbody", [a("tr", [a("td", { staticStyle: { "white-space": "nowrap", width: "1px" } }, [e._v("Fields or forms filled:")]), a("td", [e._v(e._s(e.stats.fill_sessions || 0))])]), a("tr", [a("td", { staticStyle: { "white-space": "nowrap", width: "1px" } }, [e._v("Custom Generators created:")]), a("td", [e._v(e._s(e.custom_generators.length || 0))])]), a("tr", [a("td", { staticStyle: { "white-space": "nowrap", width: "1px" } }, [e._v("Fields learned:")]), a("td", [e._v(e._s(e.extra_fields ? Object.values(e.extra_fields).length : 0))])]), null !== e.storage_used ? a("tr", [a("td", { staticStyle: { "white-space": "nowrap", width: "1px" } }, [e._v("Storage used:")]), a("td", [e._v(e._s(e.root.prettyBytes(e.storage_used)) + " "), e.storage_max ? a("span", [e._v("/ " + e._s(e.root.prettyBytes(e.storage_max)))]) : e._e()])]) : e._e(), e.install_date ? a("tr", [a("td", [e._v("Stats since:")]), a("td", [e._v(e._s(e.root.parseDate(e.install_date)))])]) : e._e()])])])]) }, pe = [], fe = { name: "settings-stats", props: { root: {}, settings: {}, custom_generators: {}, stats: {}, extra_fields: {}, install_date: {} }, data() { return { storage_used: "function" == typeof chrome.storage.local.getBytesInUse ? 0 : null, storage_max: chrome.storage.local.QUOTA_BYTES } }, mounted() { this.countStorageUsed() }, methods: { countStorageUsed: function () { "function" == typeof chrome.storage.local.getBytesInUse && chrome.storage.local.getBytesInUse(function (e) { this.storage_used = e }.bind(this)) } } }, ve = fe, ge = (a("db24"), Object(b["a"])(ve, he, pe, !1, null, null, null)), be = ge.exports, we = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "tab-pane in active", attrs: { id: "tab_developer", role: "tabpanel" } }, [a("div", { staticClass: "classic-tabs" }, [a("div", { staticClass: "tabs-wrapper" }, [a("ul", { staticClass: "nav", attrs: { role: "tablist" } }, [a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/settings/developer/events", "active-class": "active" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exchange-alt"], size: "2x" } }), a("br"), e._v(" DOM Events ")], 1)], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/settings/developer/matching", "active-class": "active" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "random"], size: "2x" } }), a("br"), e._v(" Field Matching ")], 1)], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", class: { "text-danger": !e.root.isLicenseActive() }, attrs: { to: "/settings/developer/libraries", "active-class": "active" } }, [e.root.isLicenseActive() ? a("font-awesome-icon", { attrs: { icon: ["fas", "file-code"], size: "2x" } }) : a("font-awesome-icon", { attrs: { icon: ["fas", "lock"], size: "2x" } }), a("br"), e._v(" Loaded Libraries ")], 1)], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", class: { "text-danger": !e.root.isLicenseActive() }, attrs: { to: "/settings/developer/integrations", "active-class": "active" } }, [e.root.isLicenseActive() ? a("font-awesome-icon", { attrs: { icon: ["fas", "puzzle-piece"], size: "2x" } }) : a("font-awesome-icon", { attrs: { icon: ["fas", "lock"], size: "2x" } }), a("br"), e._v(" Custom Integrations ")], 1)], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", class: { "text-danger": !e.root.isLicenseActive() }, attrs: { to: "/settings/developer/datasets", "active-class": "active" } }, [e.root.isLicenseActive() ? a("font-awesome-icon", { attrs: { icon: ["fas", "table"], size: "2x" } }) : a("font-awesome-icon", { attrs: { icon: ["fas", "lock"], size: "2x" } }), a("br"), e._v(" Datasets ")], 1)], 1)])]), a("div", { staticClass: "tab-content card elegant-color" }, [a("div", { staticClass: "tab-pane", class: { active: "events" == e.active_sub_tab }, attrs: { id: "dev_events" } }, [a("div", { staticClass: "white-space-initial" }, [a("div", { staticClass: "small mb-4" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-circle"] } }), e._v("  Unless you know what you're doing, these settings should be sufficient for almost all of the websites out there. These events are triggered immediately after Fake Data updates the value or the state of an input element. ")], 1), e._m(0), e._m(1), e._m(2)])]), a("div", { staticClass: "tab-pane", class: { active: "matching" == e.active_sub_tab }, attrs: { id: "dev_matching" } }, [a("div", { staticClass: "white-space-initial" }, [a("div", { staticClass: "small mb-4" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-circle"] } }), e._v("  Whenever you fill an input field, Fake Data does a lot of arcane processing in background in order to link the input to the Fields and Generators database. From this page you can fine-tune that process. ")], 1), a("div", { staticClass: "position-relative setting_wrapper mt-4 settings-named_fallback_unnamed", class: { highlight: e.$route.query && "named_fallback_unnamed" == e.$route.query.highlight }, on: { click: function (t) { return e.removeHighlight() } } }, [a("label", [e._v("Fallback Named Fields to Unnamed Fields: "), a("span", { attrs: { title: "If there is no match for a Named Field, should Fake Data try to match the input against Unnamed Fields list?", "data-html": "true" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } })], 1)]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Use only Named Fields "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.named_fallback_unnamed, expression: "settings.named_fallback_unnamed" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.named_fallback_unnamed) ? e._i(e.settings.named_fallback_unnamed, null) > -1 : e.settings.named_fallback_unnamed }, on: { change: function (t) { var a = e.settings.named_fallback_unnamed, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "named_fallback_unnamed", a.concat([o])) : n > -1 && e.$set(e.settings, "named_fallback_unnamed", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "named_fallback_unnamed", i) } } }), a("span", { staticClass: "lever" }), e._v(" Fallback to Unnamed Fields ")])])]), a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Fallback Generator: "), a("span", { attrs: { title: "If there is no match for the current field, should Fake Data use a Genrator instead of leaving the field empty?", "data-html": "true" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } })], 1)]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Leave field empty "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.fallback_generator_toggle, expression: "settings.fallback_generator_toggle" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.fallback_generator_toggle) ? e._i(e.settings.fallback_generator_toggle, null) > -1 : e.settings.fallback_generator_toggle }, on: { change: function (t) { var a = e.settings.fallback_generator_toggle, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "fallback_generator_toggle", a.concat([o])) : n > -1 && e.$set(e.settings, "fallback_generator_toggle", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "fallback_generator_toggle", i) } } }), a("span", { staticClass: "lever" }), a("div", { staticClass: "dropdown inline-block fallback_generator_dropdown" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm dropdown-toggle", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e._v(" " + e._s("custom" != e.settings.fallback_generator ? e.settings.fallback_generator : "Custom Code") + " ")]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_generators_menu" }, [a("h6", { staticClass: "dropdown-header" }, [e._v("Default Generators")]), e._l(e.root.fields, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.settings.fallback_generator = t } } }, [e._v(e._s(t))]) })), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Custom Generators")]), e._l(e.custom_generators, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.settings.fallback_generator = t.label } } }, [e._v(e._s(t.label))]) }))], 2)])])])]), a("div", { staticClass: "position-relative setting_wrapper mt-3" }, [a("label", [e._v("How to match HTML inputs against Generators and Named Fields: "), a("span", { attrs: { title: "With fuzzy match enabled, if there is no Named or Unnamed Field that matches exactly the requested HTML input,<br />Fake Data will try to find the most appropriate Generator based on multiple variables.", "data-html": "true" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } })], 1)]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Exact match "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.fuzzy_enabled, expression: "settings.fuzzy_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.fuzzy_enabled) ? e._i(e.settings.fuzzy_enabled, null) > -1 : e.settings.fuzzy_enabled }, on: { change: function (t) { var a = e.settings.fuzzy_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "fuzzy_enabled", a.concat([o])) : n > -1 && e.$set(e.settings, "fuzzy_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "fuzzy_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Fuzzy match ")])])]), e.settings.fuzzy_enabled ? a("setting-dropdown", { staticStyle: { "margin-top": "30px !important", top: "0px" }, attrs: { options: { fuzzy_first: "Fuzzy match first, then Fallback Generator", fallback_first: "Fallback Generator first, then Fuzzy match" }, label: "Fuzzy vs Fallback Generator priority:", label_help: "Which one should be triggered first? The second action will only be triggered if the first one does not return anything." }, model: { value: e.settings.fallback_priority, callback: function (t) { e.$set(e.settings, "fallback_priority", t) }, expression: "settings.fallback_priority" } }) : e._e(), a("div", { staticClass: "position-relative setting_wrapper mt-3" }, [a("label", [e._v("When filling entire form, reuse the same password for each input: "), a("span", { attrs: { title: "If you want to fill all password fields with the same password, enable this.", "data-html": "true" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } })], 1)]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Use different passwords "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.form_use_same_password, expression: "settings.form_use_same_password" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.form_use_same_password) ? e._i(e.settings.form_use_same_password, null) > -1 : e.settings.form_use_same_password }, on: { change: function (t) { var a = e.settings.form_use_same_password, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "form_use_same_password", a.concat([o])) : n > -1 && e.$set(e.settings, "form_use_same_password", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "form_use_same_password", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use same password ")])])]), a("div", { staticClass: "position-relative setting_wrapper mt-3" }, [e._m(3), a("div", { staticClass: "switch" }, [a("label", [e._v(" No, fill them normally "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.form_ignore_autocomplete_off, expression: "settings.form_ignore_autocomplete_off" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.form_ignore_autocomplete_off) ? e._i(e.settings.form_ignore_autocomplete_off, null) > -1 : e.settings.form_ignore_autocomplete_off }, on: { change: function (t) { var a = e.settings.form_ignore_autocomplete_off, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "form_ignore_autocomplete_off", a.concat([o])) : n > -1 && e.$set(e.settings, "form_ignore_autocomplete_off", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "form_ignore_autocomplete_off", i) } } }), a("span", { staticClass: "lever" }), e._v(" Yes, ignore fields or forms with "), a("code", [e._v('autocomplete="off"')]), e._v(" attribute ")])])])], 1)]), a("div", { staticClass: "tab-pane", class: { active: "libraries" == e.active_sub_tab }, attrs: { id: "dev_libraries" } }, [e.root.isLicenseActive() ? a("div", { staticClass: "white-space-initial" }, [e.root.getManifestVersion() < 3 ? a("p", { staticClass: "small text-warning" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  Libraries will be loaded in global scope. If something breaks, remove the file and reload the extension. ")], 1) : e._e(), e.root.getManifestVersion() < 3 ? a("p", { staticClass: "small text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  Pay attention to what third party files you load since the code inside them will be granted with access to WebExtensions API along with Fake Data's permissions to your browser. Have fun! ")], 1) : e._e(), 3 == e.root.getManifestVersion() && "sandbox" != e.active_sub_sub_tab ? a("p", { staticClass: "small text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  " + e._s(e.active_sub_sub_tab) + " libraries are not available in this version of Fake Data! ")], 1) : e._e(), e.root.getManifestVersion() < 3 ? a("ul", { staticClass: "nav md-pills nav-justified pills-dark" }, [a("li", { staticClass: "nav-item pb-0" }, [a("router-link", { staticClass: "nav-link p-2", attrs: { to: "/settings/developer/libraries/background", "active-class": "active" } }, [e._v("Background Libraries")])], 1), a("li", { staticClass: "nav-item pb-0" }, [a("router-link", { staticClass: "nav-link p-2", attrs: { to: "/settings/developer/libraries/foreground", "active-class": "active" } }, [e._v("Foreground Libraries")])], 1)]) : e._e(), a("hr", { staticClass: "mt-0" }), "background" == e.active_sub_sub_tab ? a("p", { staticClass: "small" }, [e._v("Add the scripts you want to be loaded by Fake Data in background page. These should be the scripts that you will use in generating new data for input fields.")]) : e._e(), "foreground" == e.active_sub_sub_tab ? a("p", { staticClass: "small" }, [e._v("Add the scripts you want to be loaded in each website you open. These should be the scripts that will manipulate DOM elements and events.")]) : e._e(), "sandbox" == e.active_sub_sub_tab ? a("p", { staticClass: "small" }, [e._v("Add the scripts you want to be loaded by Fake Data in the sandboxed page. These scripts can be used to help you in generating new data for input fields.")]) : e._e(), a("h5", { staticClass: "mt-5" }, [e._v("Core libraries")]), a("ul", { staticClass: "list-group libraries" }, ["background" == e.active_sub_sub_tab || "sandbox" == e.active_sub_sub_tab ? a("li", { staticClass: "ml-0 mb-1 p-2 list-group-item elegant-color-dark" }, [a("span", [e._v("Faker")]), a("a", { staticClass: "pull-right elegant-color btn btn-sm", attrs: { href: "https://fakerjs.dev/", target: "_blank" } }, [e._v("Documentation")])]) : e._e(), "background" == e.active_sub_sub_tab || "sandbox" == e.active_sub_sub_tab ? a("li", { staticClass: "ml-0 mb-1 p-2 list-group-item elegant-color-dark" }, [a("span", [e._v("moment-with-locales.js")]), a("a", { staticClass: "pull-right elegant-color btn btn-sm", attrs: { href: "https://momentjs.com/docs/", target: "_blank" } }, [e._v("Documentation")])]) : e._e(), "foreground" == e.active_sub_sub_tab ? a("li", { staticClass: "ml-0 mb-1 p-2 list-group-item elegant-color-dark" }, [a("span", [e._v("jQuery")]), a("a", { staticClass: "pull-right elegant-color btn btn-sm", attrs: { href: "https://api.jquery.com/", target: "_blank" } }, [e._v("Documentation")])]) : e._e()]), a("hr"), a("h5", [e._v("Your loaded libraries")]), e.user_loaded_libraries.length ? a("div", [a("ul", { staticClass: "list-group libraries" }, e._l(e.user_loaded_libraries, (function (t, s) { return a("li", { staticClass: "ml-0 mb-1 p-2 list-group-item elegant-color-dark" }, [a("span", [e._v(e._s(t.name) + " (" + e._s(e.root.prettyBytes(t.size)) + ")")]), 3 == e.root.getManifestVersion() && "sandbox" != t.type ? a("a", { staticClass: "ml-3 text-warning position-relative small", staticStyle: { top: "9px" }, on: { click: function (a) { return a.stopPropagation(), a.preventDefault(), e.convertMV2LibraryToSandbox(t) } } }, [e._v("This library has been disabled. Click here to enable it again.")]) : e._e(), a("a", { staticClass: "pull-right btn btn-unique btn-sm", on: { click: function (a) { return e.removeLoadedLibrary(t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"], size: "sm" } }), e._v("  Delete")], 1), a("a", { staticClass: "pull-right btn elegant-color btn-sm", on: { click: function (a) { return e.downloadLoadedLibrary(t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "download"], size: "sm" } }), e._v("  Download")], 1)]) })), 0)]) : a("div", [a("p", { staticClass: "mt-3 text-center" }, [e._v("No libraries loaded.")])]), a("hr"), "foreground" != e.active_sub_sub_tab && "sandbox" != e.active_sub_sub_tab || !e.foreground_libraries_updated ? e._e() : a("div", { staticClass: "text-danger small mb-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "redo"] } }), e._v("  After updating " + e._s(e.active_sub_sub_tab) + " libraries, tabs that are already opened must be reloaded in order to apply the changes into them. ")], 1), a("div", { staticClass: "d-flex" }, [a("div", { staticClass: "file-field", staticStyle: { "flex-grow": "1" } }, [a("input", { attrs: { type: "file", accept: ".js", id: "user_library_file_input" } }), a("div", { staticClass: "btn btn-sm grey darken-3 float-left choose_file_btn", on: { click: function (t) { return e.openFileDialog("#user_library_file_input") } } }, [a("span", [e._v("Choose file")])]), e._m(4)]), a("div", {}, [a("button", { staticClass: "btn btn-md btn-dark-green user_library_button disabled", on: { click: e.uploadUserLibrary } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "upload"] } })], 1)])])]) : a("div", [a("h5", { staticClass: "text-center" }, [a("router-link", { staticClass: "pro_required text-white", attrs: { to: "/account/license" } }, [a("span", { staticClass: "text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } }), e._v("  Only for Pro users")], 1)])], 1), a("div", { staticClass: "mt-5 white-space-initial" }, [e._m(5), a("p", [e._v("The problem comes when you want even more. There are countless of libraries out there than can open endless possibilities of generating data for your inputs. Luckily, you're using the most awesome and developer friendly extension in the world! Or at least from those that you probably have installed right now.")]), a("p", [e._v("Behind this section lies the power of adding your own libraries that can be used in writing awesome Custom Generators. But like all convenient features, it works only with "), a("strike", [e._v("money")]), e._v(". Sorry! I meant with a license. ")], 1), a("p", { staticClass: "text-center" }, [a("a", { staticClass: "btn btn-primary btn-flat grey darken-3", attrs: { href: "https://docs.fakedata.pro/how-to-use-fake-data/pro/loaded-libraries/loaded-libraries.html", target: "_blank" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } }), e._v("  Find out more")], 1)])])])]), a("div", { staticClass: "tab-pane", class: { active: "integrations" == e.active_sub_tab }, attrs: { id: "dev_integrations" } }, [e.root.isLicenseActive() ? a("div", { staticClass: "white-space-initial" }, [a("div", { staticClass: "small mb-4" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-circle"] } }), e._v("  These integrations may not be perfect yet, but they will be updated and fixed as much as needed, so feel free to send your feedback. ")], 1), a("div", { staticClass: "card text-white bg-dark mb-3 generator_card" }, [a("div", { staticClass: "card-header elegant-color-dark" }, [a("span", { staticClass: "card-header-title" }, [e._v("Angular Material")]), a("div", { staticClass: "switch secondary-switch pull-right small custom_code_switch" }, [a("button", { staticClass: "btn elegant-color btn-sm pull-right integrations_more_info_btn", attrs: { title: "More Info" }, on: { click: function (t) { return e.root.slideToggle("#custom_integrations_more_info_angular_material") } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question"] } })], 1), a("label", { staticClass: "mb-0 mt-1" }, [e._v(" Disabled "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.custom_integrations.angular_material, expression: "settings.custom_integrations.angular_material" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.custom_integrations.angular_material) ? e._i(e.settings.custom_integrations.angular_material, null) > -1 : e.settings.custom_integrations.angular_material }, on: { change: function (t) { var a = e.settings.custom_integrations.angular_material, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings.custom_integrations, "angular_material", a.concat([o])) : n > -1 && e.$set(e.settings.custom_integrations, "angular_material", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings.custom_integrations, "angular_material", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enabled ")])])]), e._m(6)]), a("div", { staticClass: "card text-white bg-dark mb-3 generator_card" }, [a("div", { staticClass: "card-header elegant-color-dark" }, [a("span", { staticClass: "card-header-title" }, [e._v("Google Forms")]), a("div", { staticClass: "switch secondary-switch pull-right small custom_code_switch" }, [a("button", { staticClass: "btn elegant-color btn-sm pull-right integrations_more_info_btn", attrs: { title: "More Info" }, on: { click: function (t) { return e.root.slideToggle("#custom_integrations_more_info_google_forms") } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question"] } })], 1), a("label", { staticClass: "mb-0 mt-1" }, [e._v(" Disabled "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.custom_integrations.google_forms, expression: "settings.custom_integrations.google_forms" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.custom_integrations.google_forms) ? e._i(e.settings.custom_integrations.google_forms, null) > -1 : e.settings.custom_integrations.google_forms }, on: { change: function (t) { var a = e.settings.custom_integrations.google_forms, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings.custom_integrations, "google_forms", a.concat([o])) : n > -1 && e.$set(e.settings.custom_integrations, "google_forms", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings.custom_integrations, "google_forms", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enabled ")])])]), e._m(7)]), a("div", { staticClass: "card text-white bg-dark mb-3 generator_card" }, [a("div", { staticClass: "card-header elegant-color-dark" }, [a("span", { staticClass: "card-header-title" }, [e._v("Google Sheets")]), a("div", { staticClass: "switch secondary-switch pull-right small custom_code_switch" }, [a("button", { staticClass: "btn elegant-color btn-sm pull-right integrations_more_info_btn", attrs: { title: "More Info" }, on: { click: function (t) { return e.root.slideToggle("#custom_integrations_more_info_google_sheets") } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question"] } })], 1), a("label", { staticClass: "mb-0 mt-1" }, [e._v(" Disabled "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.custom_integrations.google_sheets, expression: "settings.custom_integrations.google_sheets" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.custom_integrations.google_sheets) ? e._i(e.settings.custom_integrations.google_sheets, null) > -1 : e.settings.custom_integrations.google_sheets }, on: { change: function (t) { var a = e.settings.custom_integrations.google_sheets, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings.custom_integrations, "google_sheets", a.concat([o])) : n > -1 && e.$set(e.settings.custom_integrations, "google_sheets", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings.custom_integrations, "google_sheets", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enabled ")])])]), a("div", { staticClass: "card-body elegant-color white-text rounded-bottom custom_integration_instructions", staticStyle: { height: "0" }, attrs: { id: "custom_integrations_more_info_google_sheets", "data-collapsed": "true" } }, [a("div", { staticClass: "p-3" }, [a("p", { staticClass: "text-warning" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  In order to use Fake Data extension with Google Sheets you must first enable the helper addon from the following link:"), a("br"), a("a", { staticClass: "text-white underline-hover", attrs: { href: "https://workspace.google.com/marketplace/app/fake_data/125232469160", target: "_blank" } }, [e._v("https://workspace.google.com/marketplace/app/fake_data/125232469160")])], 1), a("p", [e._v("The helper addon by itself can work without Fake Data extension and is able to insert random data in spreadsheets. It is bundled with default generators like names, emails, cities, etc. but without the ability to customise them in any way.")]), a("p", [e._v("Enabling the Google Sheets integration, will allow you to use your own Custom Generators defined in Fake Data extension directly in spreadsheets! And will give you the cool feature of auto-detecting what type of data to be inserted in each column, like it does with input fields.")])])])]), a("div", { staticClass: "card text-white bg-dark mb-3 generator_card" }, [a("div", { staticClass: "card-header elegant-color-dark" }, [a("span", { staticClass: "card-header-title" }, [e._v("Fake Data Public API")]), a("div", { staticClass: "switch secondary-switch pull-right small custom_code_switch" }, [a("button", { staticClass: "btn elegant-color btn-sm pull-right integrations_more_info_btn", attrs: { title: "More Info" }, on: { click: function (t) { return e.root.slideToggle("#custom_integrations_more_info_public_api_support") } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question"] } })], 1), a("label", { staticClass: "mb-0 mt-1" }, [e._v(" Disabled "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.custom_integrations.public_api_support, expression: "settings.custom_integrations.public_api_support" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.custom_integrations.public_api_support) ? e._i(e.settings.custom_integrations.public_api_support, null) > -1 : e.settings.custom_integrations.public_api_support }, on: { change: function (t) { var a = e.settings.custom_integrations.public_api_support, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings.custom_integrations, "public_api_support", a.concat([o])) : n > -1 && e.$set(e.settings.custom_integrations, "public_api_support", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings.custom_integrations, "public_api_support", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enabled ")])])]), e._m(8)]), a("div", { staticClass: "card text-white bg-dark mb-3 generator_card" }, [a("div", { staticClass: "card-header elegant-color-dark" }, [a("span", { staticClass: "card-header-title" }, [e._v("React Select")]), a("div", { staticClass: "switch secondary-switch pull-right small custom_code_switch" }, [a("button", { staticClass: "btn elegant-color btn-sm pull-right integrations_more_info_btn", attrs: { title: "More Info" }, on: { click: function (t) { return e.root.slideToggle("#custom_integrations_more_info_react_select") } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question"] } })], 1), a("label", { staticClass: "mb-0 mt-1" }, [e._v(" Disabled "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.custom_integrations.react_select, expression: "settings.custom_integrations.react_select" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.custom_integrations.react_select) ? e._i(e.settings.custom_integrations.react_select, null) > -1 : e.settings.custom_integrations.react_select }, on: { change: function (t) { var a = e.settings.custom_integrations.react_select, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings.custom_integrations, "react_select", a.concat([o])) : n > -1 && e.$set(e.settings.custom_integrations, "react_select", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings.custom_integrations, "react_select", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enabled ")])])]), e._m(9)]), a("div", { staticClass: "card text-white bg-dark mb-3 generator_card select2_integration" }, [a("div", { staticClass: "card-header elegant-color-dark" }, [a("span", { staticClass: "card-header-title" }, [e._v("Select2")]), a("div", { staticClass: "switch secondary-switch pull-right small custom_code_switch" }, [a("button", { staticClass: "btn elegant-color btn-sm pull-right integrations_more_info_btn", attrs: { title: "More Info" }, on: { click: function (t) { return e.root.slideToggle("#custom_integrations_more_info_select2") } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question"] } })], 1), a("label", { staticClass: "mb-0 mt-1" }, [e._v(" Disabled "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.custom_integrations.select2, expression: "settings.custom_integrations.select2" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.custom_integrations.select2) ? e._i(e.settings.custom_integrations.select2, null) > -1 : e.settings.custom_integrations.select2 }, on: { change: function (t) { var a = e.settings.custom_integrations.select2, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings.custom_integrations, "select2", a.concat([o])) : n > -1 && e.$set(e.settings.custom_integrations, "select2", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings.custom_integrations, "select2", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enabled ")])])]), e._m(10)]), a("div", { staticClass: "card text-white bg-dark mb-3 generator_card" }, [a("div", { staticClass: "card-header elegant-color-dark" }, [a("span", { staticClass: "card-header-title" }, [e._v("Vuetify")]), a("div", { staticClass: "switch secondary-switch pull-right small custom_code_switch" }, [a("button", { staticClass: "btn elegant-color btn-sm pull-right integrations_more_info_btn", attrs: { title: "More Info" }, on: { click: function (t) { return e.root.slideToggle("#custom_integrations_more_info_vuetify") } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question"] } })], 1), a("label", { staticClass: "mb-0 mt-1" }, [e._v(" Disabled "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.custom_integrations.vuetify, expression: "settings.custom_integrations.vuetify" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.custom_integrations.vuetify) ? e._i(e.settings.custom_integrations.vuetify, null) > -1 : e.settings.custom_integrations.vuetify }, on: { change: function (t) { var a = e.settings.custom_integrations.vuetify, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings.custom_integrations, "vuetify", a.concat([o])) : n > -1 && e.$set(e.settings.custom_integrations, "vuetify", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings.custom_integrations, "vuetify", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enabled ")])])]), e._m(11)])]) : a("div", [a("h5", { staticClass: "text-center" }, [a("router-link", { staticClass: "pro_required text-white", attrs: { to: "/account/license" } }, [a("span", { staticClass: "text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } }), e._v("  Only for Pro users")], 1)])], 1), a("div", { staticClass: "mt-5 white-space-initial" }, [a("p", [e._v('By today\'s design standards, basic form elements are boring. It is very common to see a website that uses some kind of custom dropdown, fancy checkboxes and gimmicks like this. Hell, even this Options page tries to be cool by using some sort of "Material Design". ')]), a("p", [e._v(" The downside of using those type of custom elements is that form fillers are not able to manipulate them as easily as they would with standard components. That's why you will probably not see any form filler supporting material components. ")]), e._m(12), a("p", [e._v("In case you don't want to be disappointed, the following libraries and services are supported at this moment. The list will be updated as more will be added:")]), a("ul", [a("li", { staticClass: "ml-0" }, [a("a", { staticClass: "inline-block p-0 text-white text-capitalize", attrs: { href: "https://material.angular.io/", target: "_blank" } }, [e._v("Angular Material  "), a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } })], 1)]), a("li", { staticClass: "ml-0" }, [a("a", { staticClass: "inline-block p-0 text-white text-capitalize", attrs: { href: "https://www.google.com/forms/about/", target: "_blank" } }, [e._v("Google Forms  "), a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } })], 1)]), a("li", { staticClass: "ml-0" }, [a("a", { staticClass: "inline-block p-0 text-white text-capitalize", attrs: { href: "https://www.google.com/sheets/about/", target: "_blank" } }, [e._v("Google Sheets  "), a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } })], 1)]), e._m(13), a("li", { staticClass: "ml-0" }, [a("a", { staticClass: "inline-block p-0 text-white text-capitalize", attrs: { href: "https://react-select.com/home", target: "_blank" } }, [e._v("React Select  "), a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } })], 1)]), a("li", { staticClass: "ml-0" }, [a("a", { staticClass: "inline-block p-0 text-white text-capitalize", attrs: { href: "https://select2.org/", target: "_blank" } }, [e._v("Select2  "), a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } })], 1)]), a("li", { staticClass: "ml-0" }, [a("a", { staticClass: "inline-block p-0 text-white text-capitalize", attrs: { href: "https://vuetifyjs.com/en/", target: "_blank" } }, [e._v("Vuetify  "), a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } })], 1)])])])])]), a("div", { staticClass: "tab-pane", class: { active: "datasets" == e.active_sub_tab }, attrs: { id: "dev_datasets" } }, [a("settings-developer-datasets", { attrs: { root: e.root, settings: e.settings, initial_values: e.initial_values } })], 1)])]), a("settings-loaded-library-convert-to-sandbox-modal", { ref: "library_convert_to_sandbox_modal" })], 1) }, ke = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", { staticClass: "mb-4" }, [e._v("Events triggered on text input fields:")]), a("div", { staticClass: "chips chips-placeholder mb-0 input-ev" })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "position-relative setting_wrapper mt-3" }, [a("label", { staticClass: "mb-4" }, [e._v("Events triggered on checkboxes and radio buttons:")]), a("div", { staticClass: "chips chips-placeholder mb-0 checkbox-ev" })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "position-relative setting_wrapper mt-3" }, [a("label", { staticClass: "mb-4" }, [e._v("Events triggered on <select> elements:")]), a("div", { staticClass: "chips chips-placeholder mb-0 select-ev" })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("label", [e._v("Should fields be ignored when they have "), a("code", [e._v('autocomplete="off"')]), e._v(" attribute?")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "file-path-wrapper" }, [a("input", { staticClass: "file-path validate elegant-color text-white no-border", attrs: { readonly: "", type: "text", placeholder: "Add your .js file" } })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("Fake Data comes bundled with two great libraries that are used to generate the data throughout the extension: "), a("code", [e._v("faker.js")]), e._v(" and "), a("code", [e._v("Moment.js")]), e._v(". With Custom Code feature you can take the functionality of Fake Data to the next level and use those two libraries at their true potential! But... ")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "card-body elegant-color white-text rounded-bottom custom_integration_instructions", staticStyle: { height: "0" }, attrs: { id: "custom_integrations_more_info_angular_material", "data-collapsed": "true" } }, [a("div", { staticClass: "p-3" }, [a("p", [e._v("Integration for Angular Material forms. ("), a("a", { staticClass: "text-white underline", attrs: { href: "https://material.angular.io/", target: "_blank" } }, [e._v("https://material.angular.io/")]), e._v(") ")]), a("p", [e._v("Currently supported form elements are "), a("code", [e._v("<mat-checkbox>")]), e._v(", "), a("code", [e._v("<mat-radio-button>")]), e._v(", "), a("code", [e._v("<mat-select>")]), e._v(", and "), a("code", [e._v("<mat-slide-toggle>")])]), a("p", [e._v("For "), a("code", [e._v("<mat-select>")]), e._v(" elements, only dropdowns that allow selecting a single option are supported. The ones that allow multiple options will be supported soon.")]), a("p", [e._v("Elements like normal inputs, datepickers don't need any special integration since they were already supported even before.")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "card-body elegant-color white-text rounded-bottom custom_integration_instructions", staticStyle: { height: "0" }, attrs: { id: "custom_integrations_more_info_google_forms", "data-collapsed": "true" } }, [a("div", { staticClass: "p-3" }, [a("p", [e._v("Integration for Google Forms. ("), a("a", { staticClass: "text-white underline", attrs: { href: "https://www.google.com/forms/about/", target: "_blank" } }, [e._v("https://www.google.com/forms/about/")]), e._v(") ")]), a("p", [e._v("Adds functionality for custom checkboxes, radio buttons and dropdown menus found on Google Forms.")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "card-body elegant-color white-text rounded-bottom custom_integration_instructions", staticStyle: { height: "0" }, attrs: { id: "custom_integrations_more_info_public_api_support", "data-collapsed": "true" } }, [a("div", { staticClass: "p-3" }, [a("p", [e._v("Inject "), a("code", [e._v("fakeData")]), e._v(" object in pages so you can use it directly from browser console.")]), a("p", [e._v("It's also helpful for UI testing frameworks like Selenium, Cypress, or whatever is mainstream now.")]), a("p", [e._v("Supported methods:")]), a("ul", [a("li", { staticClass: "ml-5" }, [a("code", [e._v("fakeData.fillElement(element)")])]), a("li", { staticClass: "ml-5" }, [a("code", [e._v("fakeData.getUniqueSelector(element)")])]), a("li", { staticClass: "ml-5" }, [a("code", [e._v("fakeData.getFakeValue(selector)")])]), a("li", { staticClass: "ml-5" }, [a("code", [e._v("fakeData.getGeneratorValue(generator[, data])")])]), a("li", { staticClass: "ml-5" }, [a("code", [e._v("fakeData.getLastGeneratedValue(generator)")])]), a("li", { staticClass: "ml-5" }, [a("code", [e._v("fakeData.getGeneratorMatchForElement(element)")])])])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "card-body elegant-color white-text rounded-bottom custom_integration_instructions", staticStyle: { height: "0" }, attrs: { id: "custom_integrations_more_info_react_select", "data-collapsed": "true" } }, [a("div", { staticClass: "p-3" }, [a("p", [e._v("Integration for React Select dropdowns. ("), a("a", { staticClass: "text-white underline", attrs: { href: "https://react-select.com/home", target: "_blank" } }, [e._v("https://react-select.com/home")]), e._v(") ")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "card-body elegant-color white-text rounded-bottom custom_integration_instructions", staticStyle: { height: "0" }, attrs: { id: "custom_integrations_more_info_select2", "data-collapsed": "true" } }, [a("div", { staticClass: "p-3" }, [a("p", [e._v("Integration for Select2 library ("), a("a", { staticClass: "text-white underline", attrs: { href: "https://select2.org/", target: "_blank" } }, [e._v("https://select2.org/")]), e._v(") ")]), a("p", [e._v("At this moment only dropdowns that allow a single option are supported. Dropdowns that allow multiple options or tags will be coming soon, once Fake Data will add support for "), a("code", [e._v("<select>")]), e._v(" elements with "), a("code", [e._v("multiple")]), e._v(" attribute set. ")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "card-body elegant-color white-text rounded-bottom custom_integration_instructions", staticStyle: { height: "0" }, attrs: { id: "custom_integrations_more_info_vuetify", "data-collapsed": "true" } }, [a("div", { staticClass: "p-3" }, [a("p", [e._v("Integration for Vuetify elements. ("), a("a", { staticClass: "text-white underline", attrs: { href: "https://vuetifyjs.com/en/", target: "_blank" } }, [e._v("https://vuetifyjs.com/en/")]), e._v(") ")]), a("p", [e._v(" Supported elements are: "), a("code", [e._v("<v-autocomplete>")]), e._v(", "), a("code", [e._v("<v-checkbox>")]), e._v(", "), a("code", [e._v("<v-combobox>")]), e._v(", "), a("code", [e._v("<v-overflow-btn>")]), e._v(", "), a("code", [e._v("<v-radio>")]), e._v(", "), a("code", [e._v("<v-select>")]), e._v(", and "), a("code", [e._v("<v-switch>")])]), a("p", [e._v("Elements that use normal input fields don't need any special integration since they were already supported even before.")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("But Fake Data is not "), a("em", [e._v("any form filler")]), e._v(". Fake Data is "), a("strong", [e._v("The Form Filler")]), e._v("! And because of this, integrations with popular libraries and services will be available behind this page. So get yourself a license and enable them. ")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("li", { staticClass: "ml-0" }, [a("span", { staticClass: "inline-block small p-0 text-white text-capitalize" }, [e._v("Fake Data Public API")])]) }], ye = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade convert_to_sandbox_modal", attrs: { id: "convert_to_sandbox_modal", tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [e.library ? a("div", { staticClass: "modal-content elegant-color-dark" }, [a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title w-100" }, [e._v("Convert " + e._s(e.library.type) + " library to sandbox library")]), e._m(0)]), a("div", { staticClass: "modal-body" }, [e._v(" File "), a("span", { staticClass: "text-white" }, [e._v(e._s(e.library.name))]), e._v(" was loaded as " + e._s(e.library.type) + " library in a previous version of Fake Data. In the current version, under the new MV3, libraries can only be run in a sandboxed page."), a("br"), a("br"), e._v(" In order to keep using this library, you will need to convert it to a sandbox library first. Doing this will not change any code inside it, but will allow you to acknowledge the following:"), a("br"), a("br"), e._m(1), a("br"), e._v(" If you want to read more about migration of Fake Data from MV2 to MV3 as well as the updates you will have to make to libraries, please visit the following link: "), a("br"), a("a", { attrs: { href: "https://docs.fakedata.pro/writing-code/mv2-to-mv3-migration.html", target: "_blank" } }, [e._v("https://docs.fakedata.pro/writing-code/mv2-to-mv3-migration.html")])]), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-dark-green", attrs: { type: "submit" }, on: { click: e.callback } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v(" Convert")], 1), a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Close")], 1)])]) : e._e()])]) }, xe = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { attrs: { "aria-hidden": "true" } }, [e._v("×")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", [a("li", [e._v("The new sandbox libraries will run in a sandboxed page that does not have access to DOM elements or Web Extension API.")]), a("li", [e._v("Background libraries that were used as helpers for Custom Generators will eventually still be working without any modification.")]), a("li", [e._v("Foreground libraries will most probably require an intervention to the code if were manipulating DOM elements or page events.")]), a("li", [a("code", [e._v("fakeData")]), e._v(" and "), a("code", [e._v("faker")]), e._v(" API will continue to work as before.")])]) }], Ce = { name: "SettingsLoadedLibraryConvertToSandboxModal", data() { return { library: null, callback: null } }, methods: { showModal: function (e, t) { this.library = e, this.callback = t, this.library && $(this.$el).modal("show") }, dismissModal: function () { $(this.$el).modal("hide") } } }, $e = Ce, Se = Object(b["a"])($e, ye, xe, !1, null, "HA_MODULE_96c7402717ab4561bdd7a109ebac0a43", null), Ae = Se.exports, Fe = function () { var e = this, t = e.$createElement, a = e._self._c || t; return e.root.isLicenseActive() ? a("div", { staticClass: "white-space-initial" }, [a("div", { staticClass: "small mb-4" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-circle"] } }), e._v("  Datasets are predefined lists with data that you can use in your Generators. ")], 1), a("div", { staticClass: "dataset-controls mt-0 mb-5" }, [a("button", { staticClass: "btn btn-sm default-color-dark add_new_dataset_btn waves-effect waves-light", attrs: { type: "button", id: "add_new_dataset_btn" }, on: { click: function (t) { return e.openNewDatasetModal() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "plus"] } }), e._v("  Add a new Dataset ")], 1), e.active_preview_dataset ? a("div", { staticClass: "pull-right" }, ["gsheets" == e.active_preview_dataset.type ? a("div", { staticClass: "inline-block" }, [a("span", [e._v("Last sync: " + e._s(e.active_preview_dataset.gsheets.last_sync ? e.root.parseDate(e.active_preview_dataset.gsheets.last_sync, !0, !0) : "Never") + "  ")]), e.cloud_sheet_syncing ? a("button", { staticClass: "btn btn-sm elegant-color-dark waves-effect waves-light", attrs: { type: "button", disabled: "" } }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  Syncing...")], 1) : a("button", { staticClass: "btn btn-sm elegant-color-dark waves-effect waves-light", attrs: { type: "button" }, on: { click: function (t) { return e.refreshCloudDataset() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "sync"] } }), e._v("  Sync now")], 1)]) : e._e(), a("button", { staticClass: "btn btn-sm btn-unique waves-effect waves-light", attrs: { type: "button" }, on: { click: function (t) { return e.deleteSelectedDataset() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"] } }), e._v("  Delete selected Dataset ")], 1)]) : e._e(), a("settings-datasets-new-dataset-modal", { attrs: { root: e.root, settings: e.settings, initial_values: e.initial_values } })], 1), e.settings.datasets && Object.values(e.settings.datasets).length > 0 ? a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-0 mb-5" }, [a("div", { staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), a("input", { staticClass: "select-dropdown dropdown-toggle", attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: e.active_preview_dataset_name } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, e._l(e.settings.datasets, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.active_preview_dataset = t } } }, [e._v(e._s(t.dataset_name))]) })), 0)]), a("label", [e._v("Preview Dataset:")])]), e.active_preview_dataset && "gsheets" == e.active_preview_dataset.type ? a("div", [a("div", { staticClass: "md-form unique-textarea mb-5" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.active_preview_dataset.gsheets.refresh_hours, expression: "active_preview_dataset.gsheets.refresh_hours" }], staticClass: "form-control text-white position-relative", attrs: { required: "", type: "number", min: "0", id: "refresh_hours_interval_preview_dataset" }, domProps: { value: e.active_preview_dataset.gsheets.refresh_hours }, on: { input: function (t) { t.target.composing || e.$set(e.active_preview_dataset.gsheets, "refresh_hours", t.target.value) } } }), a("label", { staticClass: "text-white active", staticStyle: { color: "#ffffff !important" }, attrs: { for: "refresh_hours_interval_preview_dataset" } }, [e._v("Sync interval in hours (0 = disabled)")])])]) : e._e(), e.active_preview_dataset ? a("div", { staticClass: "table-responsive table-fd-datasets", staticStyle: { "max-height": "500px" } }, [a("table", { staticClass: "table table-striped table-hover table-bordered table-sm" }, [a("thead", { staticClass: "elegant-color-light" }, [a("tr", e._l(e.active_preview_dataset.columns, (function (t) { return a("th", { attrs: { scope: "col" } }, [e._v(" " + e._s(t) + " ")]) })), 0)]), a("tbody", e._l(e.active_preview_dataset.data, (function (t) { return a("tr", e._l(e.active_preview_dataset.columns, (function (s) { return a("td", [e._v(e._s(t[s]))]) })), 0) })), 0)])]) : e._e()]) : a("div", [a("div", { staticClass: "text-center" }, [e._v("No datasets loaded.")])])]) : a("div", [a("h5", { staticClass: "text-center" }, [a("router-link", { staticClass: "pro_required text-white", attrs: { to: "/account/license" } }, [a("span", { staticClass: "text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } }), e._v("  Only for Pro users")], 1)])], 1), a("div", { staticClass: "mt-5 white-space-initial" }, [a("p", [e._v(" Bring your own data into Fake Data extension more easy, without any line of code. Import CSV files and use them in your Generators. ")]), a("p", { staticClass: "text-center" }, [a("a", { staticClass: "btn btn-primary btn-flat grey darken-3", attrs: { href: "https://docs.fakedata.pro/how-to-use-fake-data/pro/datasets/using-datasets.html", target: "_blank" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } }), e._v("  Find out more")], 1)])])]) }, De = [], Ee = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade new_dataset_modal", attrs: { id: "new_dataset_modal", tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [a("form", { on: { submit: function (t) { return t.stopPropagation(), t.preventDefault(), e.addNewDataset.apply(null, arguments) } } }, [e._m(0), a("div", { staticClass: "modal-body" }, [e.alert_message ? a("div", { staticClass: "alert alert-danger mb-5 mt-3" }, [a("span", { staticClass: "alert-message" }, [e._v(e._s(e.alert_message))]), a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "alert", "aria-label": "Close" }, on: { click: function (t) { e.alert_message = null } } }, [a("span", { staticClass: "text-black", attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) : e._e(), a("ul", { staticClass: "nav md-pills nav-justified pills-dark mb-5" }, [a("li", { staticClass: "nav-item pb-0" }, [a("a", { staticClass: "nav-link p-2", class: { active: "csv" == e.active_tab }, attrs: { id: "tab_csv_file" }, on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.changeTab("csv") } } }, [e._v("CSV File")])]), a("li", { staticClass: "nav-item pb-0" }, [a("a", { staticClass: "nav-link p-2", class: { active: "gsheets" == e.active_tab }, attrs: { id: "tab_gsheets" }, on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.changeTab("gsheets") } } }, [e._v("Google Sheets")])])]), "csv" == e.active_tab || "gsheets" == e.active_tab && e.gsheets_account_connected && "success" == e.google_data.exchange_status ? a("div", { staticClass: "md-form unique-textarea mb-5" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.dataset_name, expression: "dataset_name" }], staticClass: "form-control text-white position-relative", attrs: { required: "", type: "text", id: "new_dataset_name" }, domProps: { value: e.dataset_name }, on: { input: function (t) { t.target.composing || (e.dataset_name = t.target.value) } } }), a("label", { attrs: { for: "new_dataset_name" } }, [e._v("Dataset name")])]) : e._e(), "csv" == e.active_tab ? a("div", [a("div", { staticClass: "d-flex" }, [a("div", { staticClass: "file-field p-3", staticStyle: { "flex-grow": "1" } }, [a("input", { ref: "new_dataset_file_input", attrs: { required: "", type: "file", accept: ".csv", id: "new_dataset_file_input" } }), a("div", { staticClass: "btn btn-sm grey darken-3 float-left choose_file_btn", on: { click: function (t) { return e.openFileDialog("#new_dataset_file_input") } } }, [a("span", [e._v("Choose file")])]), e._m(1)])])]) : "gsheets" == e.active_tab ? a("div", [!e.gsheets_account_connected || e.gsheets_account_connected && "error" == e.google_data.exchange_status ? a("div", { staticClass: "text-center mb-3" }, [a("div", { staticClass: "text-left mb-4 special-color-dark" }, [a("div", [a("a", { staticClass: "text-white p-3 d-block", attrs: { "data-toggle": "collapse", href: "#collapseExample", "aria-expanded": "false", "aria-controls": "collapseExample" }, on: { click: function (t) { e.google_data.tldr = !e.google_data.tldr } } }, [e._v(" TL;DR; about your privacy while using Fake Data Datasets with Google Sheets  "), a("font-awesome-icon", { attrs: { icon: ["fas", e.google_data.tldr ? "caret-up" : "caret-down"] } })], 1)]), a("div", { staticClass: "collapse pb-2 pr-2", attrs: { id: "collapseExample" } }, [e._m(2), a("div", { staticClass: "text-center" }, [a("a", { staticClass: "text-white underline-hover", attrs: { href: "https://fakedata.pro/privacy-policy#datasets_google_sheets", target: "_blank" } }, [e._v("Please read the Privacy Policy for more clarifications  "), a("sup", [a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"], size: "xs" } })], 1)])])])]), a("div", { staticClass: "carousel slide" }, [a("div", { staticClass: "carousel-inner" }, [a("div", { staticClass: "carousel-item active" }, [a("div", { staticClass: "md-form unique-textarea mt-5" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.google_data.custom_request_sheet.url, expression: "google_data.custom_request_sheet.url" }], staticClass: "form-control text-white position-relative", attrs: { required: "", type: "text", id: "custom_sheet_url" }, domProps: { value: e.google_data.custom_request_sheet.url }, on: { input: function (t) { t.target.composing || e.$set(e.google_data.custom_request_sheet, "url", t.target.value) } } }), a("label", { attrs: { for: "custom_sheet_url" } }, [e._v("Google Sheets URL")])])]), a("div", { staticClass: "carousel-item" }, [e.google_data.custom_request_sheet.id ? a("google-signin-button", { staticClass: "mt-3", attrs: { url: e.google_oauth_url } }) : e._e()], 1)])])]) : e.gsheets_account_connected && "pending" == e.google_data.exchange_status ? a("div", [a("h4", { staticClass: "text-center" }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1)]) : e.gsheets_account_connected && "success" == e.google_data.exchange_status ? a("div", [a("div", { staticClass: "position-relative setting_wrapper mb-4 mt-0" }, [a("label", [e._v("Selected Spreadsheet:")]), a("div", [e._v(e._s(e.google_data.selected_file.spreadsheet.name || "n/a"))])]), e.google_data.selected_file.spreadsheet ? a("div", { staticClass: "position-relative setting_wrapper mb-5 mt-5" }, [a("div", [a("div", { staticClass: "setting_wrapper mt-0 d-inline-block", staticStyle: { width: "calc(100% - 200px)" } }, [a("div", { staticClass: "select-wrapper" }, [e.google_data.selected_file.spreadsheet.sheets ? a("div", [a("select", { directives: [{ name: "model", rawName: "v-model", value: e.google_data.selected_file.sheet, expression: "google_data.selected_file.sheet" }], key: e.google_data.selected_file.spreadsheet.id + "-with-sheets", ref: "sheet_select", staticClass: "mdb-select md-form mt-0", attrs: { required: "", searchable: "Search here.." }, on: { change: function (t) { var a = Array.prototype.filter.call(t.target.options, (function (e) { return e.selected })).map((function (e) { var t = "_value" in e ? e._value : e.value; return t })); e.$set(e.google_data.selected_file, "sheet", t.target.multiple ? a : a[0]) } } }, [a("option", { attrs: { value: "", disabled: "", selected: "" } }, [e._v("No Sheet selected")]), e._l(e.google_data.selected_file.spreadsheet.sheets, (function (t) { return a("option", { domProps: { value: t } }, [e._v(e._s(t.properties.title) + " ")]) }))], 2)]) : a("div", { key: e.google_data.selected_file.spreadsheet.id + "-without-sheets", staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("input", { staticClass: "select-dropdown dropdown-toggle", attrs: { type: "text", "data-toggle": "dropdown", readonly: "true", disabled: "disabled" }, domProps: { value: "undefined" == typeof e.google_data.selected_file.spreadsheet.sheets || null === e.google_data.selected_file.spreadsheet.sheets ? "Loading Sheets..." : "Error loading Sheets" } })])]), a("label", [e._v("Select a Sheet:")])]), a("button", { staticClass: "btn grey darken-3 btn-xs d-inline-block pull-right position-relative", staticStyle: { top: "5px", "text-transform": "none" }, attrs: { type: "button", disabled: "undefined" == typeof e.google_data.selected_file.spreadsheet.sheets || null === e.google_data.selected_file.spreadsheet.sheets }, on: { click: e.reloadSheetsList } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "sync"], size: "xs" } }), e._v("  Refresh Sheets ")], 1)])]) : e._e(), a("div", { staticClass: "md-form unique-textarea mb-5" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.google_data.selected_file.refresh_hours, expression: "google_data.selected_file.refresh_hours" }], staticClass: "form-control text-white position-relative", attrs: { required: "", type: "number", min: "0", id: "refresh_hours_interval" }, domProps: { value: e.google_data.selected_file.refresh_hours }, on: { input: function (t) { t.target.composing || e.$set(e.google_data.selected_file, "refresh_hours", t.target.value) } } }), a("label", { staticClass: "text-white active", attrs: { for: "refresh_hours_interval" } }, [e._v("Sync interval in hours (0 = disabled)")])])]) : e._e()]) : e._e()]), "csv" == e.active_tab || "gsheets" == e.active_tab && "success" == e.google_data.exchange_status ? a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-sm btn-dark-green", attrs: { type: "submit", disabled: e.save_disabled } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"] } }), e._v("   Save ")], 1)]) : "gsheets" == e.active_tab && ["none", "error"].includes(e.google_data.exchange_status) ? a("div", { staticClass: "modal-footer", style: e.google_data.setup_step > 1 ? "justify-content: space-between;" : "" }, [e.google_data.setup_step > 1 ? a("button", { staticClass: "btn btn-md btn-unique pull-left", attrs: { type: "button" }, on: { click: function (t) { e.google_data.setup_step = 1 } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-left"], size: "sm" } }), e._v(" Back")], 1) : e._e(), a("button", { staticClass: "btn btn-md btn-dark-green pull-right", attrs: { type: "button", disabled: !e.google_data.custom_request_sheet.url }, on: { click: e.parseGSheetsURL } }, [e._v("Next "), a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-right"], size: "sm" } })], 1)]) : e._e()])])])]) }, je = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title w-100" }, [e._v("Add a new Dataset")]), a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "file-path-wrapper" }, [a("input", { staticClass: "file-path validate elegant-color-dark text-white no-border", attrs: { readonly: "", type: "text", placeholder: "Add your .csv file" } })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", [a("li", [e._v("In order to add a new Dataset from your Google Sheets, Fake Data will require the following permissions: "), a("ul", [a("li", [a("strong", [e._v("See all your Google Sheets spreadsheets")]), e._v(" - required for displaying a list of sheets and reading the contents of the selected Google Sheets file")])])]), a("li", [e._v("All of the above information is handled locally on your browser, and nothing is sent to any remote server.")])]) }], Oe = a("6ac9"), Pe = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("a", { staticClass: "google-button-container", attrs: { id: "connect_google_account", href: e.url } }, [a("div", { staticClass: "google-button-1", attrs: { tabindex: "0", role: "button", "aria-labelledby": "button-label" } }, [a("div", { staticClass: "google-button-2 " }, [a("div", { staticClass: "google-button-3" }, [a("svg", { staticClass: "google-button-logo", attrs: { version: "1.1", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 48 48" } }, [a("g", [a("path", { attrs: { fill: "#EA4335", d: "M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z" } }), a("path", { attrs: { fill: "#4285F4", d: "M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z" } }), a("path", { attrs: { fill: "#FBBC05", d: "M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z" } }), a("path", { attrs: { fill: "#34A853", d: "M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z" } }), a("path", { attrs: { fill: "none", d: "M0 0h48v48H0z" } })])])]), a("span", { staticClass: "google-button-text" }, [e._v("Sign in with Google")])])])]) }, Me = [], Te = { name: "google-signin-button", props: { url: {} } }, Ue = Te, qe = Object(b["a"])(Ue, Pe, Me, !1, null, null, null), Le = qe.exports, Be = { name: "SettingsDatasetsNewDatasetModal", components: { GoogleSigninButton: Le }, props: { root: {}, settings: {}, initial_values: {} }, data() { return { dataset_name: "", alert_message: null, save_disabled: !1, google_data: { exchange_status: "none", access_token: null, refresh_token: null, selected_file: { spreadsheet: null, sheet: null, refresh_hours: 24 }, has_drive_permission: null, files: null, tldr: !1, custom_request_sheet: { url: "", id: null }, setup_step: 1, carousel: null, credentials: { client_id: "1020357898894-402rvfkc80hvf33n087q48at3iatigk7.apps.googleusercontent.com", client_secret: "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" } } } }, computed: { active_tab: function () { if (!this.$route || !this.$route.query || !this.$route.query.type) return "csv"; switch (this.$route.query.type) { case "gsheets": return this.$route.query.type; default: return "csv" } }, google_oauth_url: function () { return "https://accounts.google.com/o/oauth2/v2/auth?" + new URLSearchParams({ scope: "https://www.googleapis.com/auth/spreadsheets.readonly", access_type: "offline", response_type: "code token", redirect_uri: "https://www.fakedata.pro/oauth/extension", client_id: this.google_data.credentials.client_id, prompt: "consent", state: this.google_data.custom_request_sheet.url }) }, gsheets_account_connected: function () { if (!this.$route || !this.$route.query || !this.$route.query.oauthurl) return !1; let e = this.$route.query.oauthurl.match(/code=(.*?)&/); return !!e && e[1] } }, watch: { "google_data.selected_file.spreadsheet.id": function () { }, google_data: { deep: !0, immediate: !0, handler: function () { this.resetBsEvents() } }, active_tab: { immediate: !0, handler: function () { "gsheets" == this.active_tab && this.resetBsEvents() } }, "google_data.setup_step": function (e, t) { e > t ? this.google_data.carousel.next() : e < t && this.google_data.carousel.prev() } }, mounted: function () { $("#new_dataset_modal").on("show.bs.modal", e => { this.resetForm() }), $("#new_dataset_modal").on("hide.bs.modal", e => { this.$router.replace({ query: {} }), this.google_data = this.root.normalizeVueObject(this.$options.data().google_data) }), this.$nextTick((function () { this.$route.query && "addnew" == this.$route.query.action && ($("#new_dataset_modal").modal("show"), "gsheets" == this.active_tab && this.gsheets_account_connected && this.exchangeGoogleCodeForToken()) })) }, methods: { resetBsEvents: function () { this.$nextTick((function () { $.fn.materialSelect && (this.$refs.spreadsheet_select && !this.$refs.spreadsheet_select.classList.contains("initialized") && $(this.$refs.spreadsheet_select).materialSelect(), this.$refs.sheet_select && !this.$refs.sheet_select.classList.contains("initialized") && $(this.$refs.sheet_select).materialSelect()), "gsheets" == this.active_tab && $("#new_dataset_modal .carousel") && !$("#new_dataset_modal .carousel").data("bs.carousel") && ($("#new_dataset_modal .carousel").carousel({ ride: !1, keyboard: !1, touch: !1, interval: !1 }), this.google_data.carousel = $("#new_dataset_modal .carousel").data("bs.carousel")), $("#new_dataset_modal label").each((function () { $(this).attr("for") && "" != $("#" + $(this).attr("for")).val() && $(this).addClass("active") })) })) }, changeTab: function (e) { this.$router.replace({ query: Object.assign({}, this.$route.query, { type: e }) }) }, openFileDialog: function (e) { $(e).click() }, addNewDataset: async function () { this.alert_message = null, this.save_disabled = !0, "csv" == this.active_tab ? await this.addNewCSVDataset() : "gsheets" == this.active_tab && await this.addNewGSheetsDataset(), this.save_disabled = !1 }, addNewGSheetsDataset: async function () { if (!this.gsheets_account_connected) return void (this.alert_message = "No Google account connected."); if (!this.google_data.selected_file.spreadsheet) return void (this.alert_message = "No Spreadsheet file selected."); if (!this.google_data.selected_file.sheet) return void (this.alert_message = "No Sheet file selected."); let e = null; try { e = await (await fetch("https://sheets.googleapis.com/v4/spreadsheets/" + this.google_data.selected_file.spreadsheet.id + "/values/" + encodeURIComponent(this.google_data.selected_file.sheet.properties.title) + "?" + new URLSearchParams({ valueRenderOption: "UNFORMATTED_VALUE", majorDimension: "ROWS", fields: "values" }), { headers: { Authorization: "Bearer " + this.google_data.access_token } })).json() } catch (i) { return void (this.alert_message = i) } if (e.error) return void (this.alert_message = "Failed to retrieve Sheet content: " + JSON.stringify(e)); if (!e.values) return void (this.alert_message = "No Sheet values received."); let t = e.values; if (!t.length) return void (this.alert_message = "Sheet is empty."); if (t = t.filter(e => Object.values(e).filter(Boolean).length > 0), !t.length) return void (this.alert_message = "Sheet contains only empty rows."); let a = t.splice(0, 1)[0], s = []; t.forEach(e => { let t = {}; for (let s = 0; s < a.length; s++)t[a[s]] = e[s] || ""; s.push(t) }), s = s.filter(e => Object.values(e).filter(Boolean).length > 0), s.length ? await this.saveNewDataset({ dataset_name: this.dataset_name, data: s, columns: a, type: "gsheets", id: this.root.getUuid(), gsheets: { refresh_token: this.google_data.refresh_token, spreadsheet: { id: this.google_data.selected_file.spreadsheet.id, name: this.google_data.selected_file.spreadsheet.name }, sheet: { sheetId: this.google_data.selected_file.sheet.properties.sheetId, title: this.google_data.selected_file.sheet.properties.title }, refresh_hours: this.google_data.selected_file.refresh_hours, last_sync: (new Date).getTime() } }) : this.alert_message = "Sheet contains only empty rows after parsing headers." }, addNewCSVDataset: async function () { if (0 == this.$refs.new_dataset_file_input.files.length) return; let e = this.$refs.new_dataset_file_input.files[0].name; if (".csv" != e.substring(e.length - 4, e.length).toLowerCase()) return void (this.alert_message = "File must be a .csv"); let t = await new Promise(e => { let t = new FileReader; t.addEventListener("load", async t => { let a = t.target.result; e(a) }), t.addEventListener("error", e => { this.alert_message = "Failed to read selected file.", console.error(e) }), t.readAsText(this.$refs.new_dataset_file_input.files[0], "UTF-8") }), a = Oe["parse"](t, { output: "objects" }); if (!a) return this.alert_message = "Failed to parse CSV file.", void console.error(a); if (!a.length) return void (this.alert_message = "CSV is empty."); if (a = a.filter(e => Object.values(e).filter(Boolean).length > 0), !a.length) return void (this.alert_message = "CSV contains only empty rows."); let s = Object.keys(a[0]); await this.saveNewDataset({ dataset_name: this.dataset_name, data: a, columns: s, type: "csv", id: this.root.getUuid() }) }, saveNewDataset: async function (e) { "object" == typeof this.settings.datasets && null != this.settings.datasets || (this.settings.datasets = {}), "object" == typeof this.initial_values.datasets && null != this.initial_values.datasets || (this.initial_values.datasets = {}); for (let a in this.settings.datasets) if (this.settings.datasets[a].dataset_name == e.dataset_name) return void (this.alert_message = "Another Dataset with the same name already exists."); this.$set(this.settings.datasets, e.id, e), this.$set(this.initial_values.datasets, e.id, e); try { await new Promise((t, a) => { this.root.getStorageEngine().get({ datasets: {} }, s => { chrome.runtime.lastError ? a(chrome.runtime.lastError) : (s.datasets && "object" == typeof s.datasets || (s.datasets = {}), s.datasets[e.id] = e, this.root.getStorageEngine().set(this.root.normalizeVueObject({ datasets: s.datasets }), () => { chrome.runtime.lastError ? a(chrome.runtime.lastError) : t() })) }) }), this.resetForm(), this.$parent.active_preview_dataset = e, $("#new_dataset_modal").modal("hide"), chrome.runtime.sendMessage({ type: "refresh_data" }) } catch (t) { this.alert_message = t || "An unknown error occurred" } }, resetForm: function () { this.$refs.new_dataset_file_input && (this.$refs.new_dataset_file_input.value = "", $(this.$refs.new_dataset_file_input).trigger("change")), this.dataset_name = "", this.alert_message = null }, exchangeGoogleCodeForToken: async function () { let e = this.gsheets_account_connected; if (e) { this.google_data.exchange_status = "pending"; try { let t = await (await fetch("https://oauth2.googleapis.com/token", { method: "POST", headers: { "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8" }, body: new URLSearchParams({ code: e, client_id: this.google_data.credentials.client_id, client_secret: this.google_data.credentials.client_secret, redirect_uri: "https://www.fakedata.pro/oauth/extension", grant_type: "authorization_code" }) })).json(); if (t.error) throw "Failed to exchange OAuth tokens: " + JSON.stringify(t); if (!t.access_token) throw "No access_token received: " + JSON.stringify(t); if (!t.refresh_token) throw "No refresh_token received: " + JSON.stringify(t); this.google_data.access_token = t.access_token, this.google_data.refresh_token = t.refresh_token; let a = this.$route.query.oauthurl.match(/state=(.*?)&/); if (a && (a = decodeURIComponent(a[1])), a) { if (this.google_data.custom_request_sheet.url = a, this.google_data.custom_request_sheet.id = this.extractGSheetIDFromURL(a), this.google_data.selected_file.spreadsheet = { id: this.google_data.custom_request_sheet.id, name: null }, !await this.reloadSheetsList()) throw "" } else await this.reloadSpreadsheetsList(); this.google_data.exchange_status = "success" } catch (t) { this.google_data.exchange_status = "error", t && (this.alert_message = t), this.$nextTick((function () { this.google_data.custom_request_sheet.id = null, this.google_data.selected_file.spreadsheet = null })) } } }, reloadSpreadsheetsList: async function () { try { this.google_data.files = null, this.google_data.has_drive_permission = null; let e = await (await fetch("https://www.googleapis.com/drive/v3/files?" + new URLSearchParams({ q: "mimeType='application/vnd.google-apps.spreadsheet'", orderBy: "name asc", fields: "files(id, name)" }), { headers: { Authorization: "Bearer " + this.google_data.access_token } })).json(); if (e.error && "PERMISSION_DENIED" == e.error.status) this.google_data.has_drive_permission = !1, this.google_data.exchange_status = "success"; else { if (e.error) throw "Failed to exchange OAuth tokens: " + JSON.stringify(e); if (!e.files) throw "No files received: " + JSON.stringify(e) } this.google_data.files = e.files, this.google_data.has_drive_permission = !0 } catch (e) { this.alert_message = e } }, reloadSheetsList: async function () { this.$set(this.google_data.selected_file.spreadsheet, "sheets", null); try { let e = await (await fetch("https://sheets.googleapis.com/v4/spreadsheets/" + this.google_data.selected_file.spreadsheet.id + "?" + new URLSearchParams({ fields: "sheets.properties.title,sheets.properties.sheetId,properties.title" }), { headers: { Authorization: "Bearer " + this.google_data.access_token } })).json(); if (e.error) throw "Failed to retrieve Sheets: " + JSON.stringify(e); if (!e.sheets) throw "Got no Sheets: " + JSON.stringify(e); return this.$set(this.google_data.selected_file.spreadsheet, "name", e.properties.title), this.$set(this.google_data.selected_file.spreadsheet, "sheets", e.sheets), !0 } catch (e) { return this.$set(this.google_data.selected_file.spreadsheet, "sheets", !1), this.alert_message = e, !1 } }, extractGSheetIDFromURL: function (e) { let t; try { t = new URL(e) } catch (s) { throw "Invalid URL" } if (!t.href.startsWith("https://docs.google.com/")) throw "The URL is not a valid Google Sheets URL"; let a = t.pathname.match(/\/d\/(.*?)(\/|$)/); if (!a || !a[1]) throw "Failed to extract Spreadsheet ID from URL"; return a[1] }, parseGSheetsURL: function () { this.alert_message = null; try { this.google_data.custom_request_sheet.id = this.extractGSheetIDFromURL(this.google_data.custom_request_sheet.url), this.google_data.setup_step = 2 } catch (e) { this.alert_message = e } } } }, Ne = Be, Ge = (a("be72"), Object(b["a"])(Ne, Ee, je, !1, null, null, null)), Ie = Ge.exports, ze = { name: "SettingsDeveloperDatasets", components: { SettingsDatasetsNewDatasetModal: Ie }, props: { root: {}, settings: {}, initial_values: {} }, data() { return { active_preview_dataset_id: null, cloud_sheet_syncing: !1 } }, computed: { active_preview_dataset_name: function () { return this.active_preview_dataset ? this.active_preview_dataset.dataset_name : "Select a dataset to preview" }, active_preview_dataset: { set: function (e) { this.active_preview_dataset_id = e.id }, get: function () { return this.settings.datasets[this.active_preview_dataset_id] } } }, mounted() { this.resetBsEvents() }, methods: { resetBsEvents: function () { this.$nextTick(() => { }) }, openNewDatasetModal: function () { $("#new_dataset_modal").modal("show") }, deleteSelectedDataset: function () { this.active_preview_dataset ? confirm('Are you sure you want to delete Dataset "' + this.active_preview_dataset.dataset_name + '"?') && (this.$delete(this.settings.datasets, this.active_preview_dataset.id), this.active_preview_dataset = null) : alert("No Dataset selected") }, refreshCloudDataset: async function () { this.cloud_sheet_syncing = !0; let e = null; try { "gsheets" == this.active_preview_dataset.type && (e = await this.refreshGSheetsDataset()) } catch (t) { toastr.error("Exception: " + t, !1, { closeButton: !0, timeOut: 2e3 }) } return this.cloud_sheet_syncing = !1, e }, refreshGSheetsDataset: async function () { if ("gsheets" != this.active_preview_dataset.type || !this.active_preview_dataset.gsheets) return void toastr.error("Cannot refresh this Google Sheets file", !1, { closeButton: !0, timeOut: 2e3 }); if (!this.active_preview_dataset.gsheets.spreadsheet || !this.active_preview_dataset.gsheets.spreadsheet.id) return void toastr.error("No Spreadsheet file detected.", !1, { closeButton: !0, timeOut: 2e3 }); if (!this.active_preview_dataset.gsheets.sheet || !this.active_preview_dataset.gsheets.sheet.title) return void toastr.error("No Sheet file selected.", !1, { closeButton: !0, timeOut: 2e3 }); if (!this.active_preview_dataset.gsheets.refresh_token) return void toastr.error("No Google account connected.", !1, { closeButton: !0, timeOut: 2e3 }); let e = await (await fetch("https://oauth2.googleapis.com/token", { method: "POST", headers: { "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8" }, body: new URLSearchParams({ client_id: "1020357898894-402rvfkc80hvf33n087q48at3iatigk7.apps.googleusercontent.com", client_secret: "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", refresh_token: this.active_preview_dataset.gsheets.refresh_token, grant_type: "refresh_token" }) })).json(); if (e.error) return console.error(e), toastr.error("Failed to exchange OAuth tokens", !1, { closeButton: !0, timeOut: 2e3 }), !1; if (!e.access_token) return console.error(e), toastr.error("No access_token received", !1, { closeButton: !0, timeOut: 2e3 }), !1; let t = null; try { t = await (await fetch("https://sheets.googleapis.com/v4/spreadsheets/" + this.active_preview_dataset.gsheets.spreadsheet.id + "/values/" + encodeURIComponent(this.active_preview_dataset.gsheets.sheet.title) + "?" + new URLSearchParams({ valueRenderOption: "UNFORMATTED_VALUE", majorDimension: "ROWS", fields: "values" }), { headers: { Authorization: "Bearer " + e.access_token } })).json() } catch (o) { return void toastr.error(o, !1, { closeButton: !0, timeOut: 2e3 }) } if (t.error) return console.error(t), void toastr.error("Failed to retrieve Sheet content.", !1, { closeButton: !0, timeOut: 2e3 }); if (!t.values) return console.log(t), void toastr.error("No Sheet values received", !1, { closeButton: !0, timeOut: 2e3 }); let a = t.values; a = a.filter(e => Object.values(e).filter(Boolean).length > 0); let s = a.splice(0, 1)[0], i = []; a.forEach(e => { let t = {}; for (let a = 0; a < s.length; a++)t[s[a]] = e[a] || ""; i.push(t) }), i = i.filter(e => Object.values(e).filter(Boolean).length > 0), this.active_preview_dataset.data = i, this.active_preview_dataset.columns = s, this.active_preview_dataset.gsheets.last_sync = (new Date).getTime(), this.settings.datasets[this.active_preview_dataset.id].data = this.root.normalizeVueObject(this.active_preview_dataset.data), this.settings.datasets[this.active_preview_dataset.id].columns = this.root.normalizeVueObject(this.active_preview_dataset.columns), this.settings.datasets[this.active_preview_dataset.id].gsheets.last_sync = this.active_preview_dataset.gsheets.last_sync, this.initial_values.datasets[this.active_preview_dataset.id].data = this.root.normalizeVueObject(this.active_preview_dataset.data), this.initial_values.datasets[this.active_preview_dataset.id].columns = this.root.normalizeVueObject(this.active_preview_dataset.columns), this.initial_values.datasets[this.active_preview_dataset.id].gsheets.last_sync = this.active_preview_dataset.gsheets.last_sync; try { await new Promise((e, t) => { this.root.getStorageEngine().get({ datasets: {} }, a => { chrome.runtime.lastError ? t(chrome.runtime.lastError) : (a.datasets && "object" == typeof a.datasets || t("Got empty datasets from storage"), a.datasets[this.active_preview_dataset.id] || t("Current dataset was not found in storage"), a.datasets[this.active_preview_dataset.id].data = this.active_preview_dataset.data, a.datasets[this.active_preview_dataset.id].columns = this.active_preview_dataset.columns, a.datasets[this.active_preview_dataset.id].gsheets.last_sync = this.active_preview_dataset.gsheets.last_sync, this.root.getStorageEngine().set(this.root.normalizeVueObject({ datasets: a.datasets }), () => { chrome.runtime.lastError ? t(chrome.runtime.lastError) : e() })) }) }), chrome.runtime.sendMessage({ type: "refresh_data" }) } catch (o) { console.error(o), toastr.error("Failed to save new data", !1, { closeButton: !0, timeOut: 2e3 }) } } } }, Re = ze, Ve = (a("4c9e"), Object(b["a"])(Re, Fe, De, !1, null, null, null)), Ye = Ve.exports, We = { name: "settings-developer", components: { SettingDropdown: Q, SettingsDeveloperDatasets: Ye, SettingsLoadedLibraryConvertToSandboxModal: Ae }, props: { active_sub_sub_tab: {}, active_sub_tab: {}, active_tab: {}, custom_generators: {}, root: {}, settings: {}, initial_values: {} }, data() { return { foreground_libraries_updated: !1 } }, computed: { user_loaded_libraries: function () { if (!this.settings.loaded_libraries.length) return []; var e = []; let t = this.root.getManifestVersion(); for (var a = 0; a < this.settings.loaded_libraries.length; a++)(3 == t && "sandbox" == this.active_sub_sub_tab || "foreground" == this.settings.loaded_libraries[a].type && "foreground" == this.active_sub_sub_tab || "background" == this.settings.loaded_libraries[a].type && "background" == this.active_sub_sub_tab) && e.push(this.settings.loaded_libraries[a]); return e } }, mounted() { $(document).on("change", "#user_library_file_input", function () { $("#user_library_file_input").get(0).files.length ? $(".user_library_button").removeClass("disabled") : $(".user_library_button").addClass("disabled") }.bind(this)), this.$parent.resetBsEvents() }, methods: { removeHighlight: function () { if (this.$route.query.highlight) { let e = this.root.normalizeVueObject(this.$route.query); delete e.highlight, this.$router.replace({ query: e }) } }, openFileDialog: function (e) { $(e).click() }, downloadLoadedLibrary: function (e) { this.$parent.downloadFile(e.contents, e.name) }, removeLoadedLibrary: function (e) { if (confirm("Are you sure you want to remove this library?")) { for (var t = 0; t < this.settings.loaded_libraries.length; t++)this.settings.loaded_libraries[t] == e && (this.settings.loaded_libraries.splice(t, 1), "foreground" != e.type && "sandbox" != e.type || (this.foreground_libraries_updated = !0)); this.$nextTick((function () { this.root.getStorageEngine().set(this.root.normalizeVueObject({ loaded_libraries: this.settings.loaded_libraries }), (function () { chrome.runtime.sendMessage({ type: "reload_script" }) })) })) } }, uploadUserLibrary: function () { var e = $("#user_library_file_input").get(0).files[0]; if (e && ".js" == e.name.substr(-3)) { var t = null; if (this.settings.loaded_libraries) for (var a = 0; a < this.settings.loaded_libraries.length; a++)if (this.active_sub_sub_tab == this.settings.loaded_libraries[a].type && this.settings.loaded_libraries[a].name == e.name) { t = a; break } if (null === t || confirm('Another script with name "' + e.name + '" already exists. Do you want to overwrite it?')) { null !== t && this.settings.loaded_libraries.splice(t, 1); var s = new FileReader; s.readAsText(e, "UTF-8"), s.onload = function (t) { this.settings.loaded_libraries.push({ name: e.name, size: e.size, contents: t.target.result, type: this.active_sub_sub_tab }), $("#user_library_file_input").val("").trigger("change"), "foreground" != this.active_sub_sub_tab && "sandbox" != this.active_sub_sub_tab || (this.foreground_libraries_updated = !0), this.$nextTick((function () { try { this.root.getStorageEngine().set(this.root.normalizeVueObject({ loaded_libraries: this.settings.loaded_libraries }), function () { chrome.runtime.lastError ? (toastr.error(chrome.runtime.lastError.message, !1, { closeButton: !0, timeOut: 3e3 }), this.settings.loaded_libraries.splice(this.settings.loaded_libraries.length - 1, 1)) : chrome.runtime.sendMessage({ type: "reload_script" }) }.bind(this)) } catch (e) { console.log(e), toastr.error("An error has occurred", !1, { closeButton: !0, timeOut: 3e3 }), this.settings.loaded_libraries.splice(this.settings.loaded_libraries.length - 1, 1) } })) }.bind(this), s.onerror = function (e) { oastr.error("Error reading file", !1, { closeButton: !0, timeOut: 3e3 }) } } } else toastr.error("Only .js files allowed", !1, { closeButton: !0, timeOut: 3e3 }) }, convertMV2LibraryToSandbox: function (e) { this.$refs.library_convert_to_sandbox_modal.showModal(e, function () { e.type = "sandbox", this.$nextTick((function () { try { this.$refs.library_convert_to_sandbox_modal.dismissModal(), this.root.getStorageEngine().set(this.root.normalizeVueObject({ loaded_libraries: this.settings.loaded_libraries }), function () { chrome.runtime.lastError ? (toastr.error(chrome.runtime.lastError.message, !1, { closeButton: !0, timeOut: 3e3 }), this.settings.loaded_libraries.splice(this.settings.loaded_libraries.length - 1, 1)) : (chrome.runtime.sendMessage({ type: "reload_script" }), this.foreground_libraries_updated = !0) }.bind(this)) } catch (e) { console.log(e), toastr.error("An error has occurred", !1, { closeButton: !0, timeOut: 3e3 }), this.settings.loaded_libraries.splice(this.settings.loaded_libraries.length - 1, 1) } })) }.bind(this)) } } }, Ke = We, He = (a("d829"), Object(b["a"])(Ke, we, ke, !1, null, null, null)), Je = He.exports, Qe = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "tab-pane in active", attrs: { id: "tab_cloud", role: "tabpanel" } }, [e.unlocked ? a("div", [a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Enable Cloud features")]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Use Fake Data offline "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.cloud_online, expression: "settings.cloud_online" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.cloud_online) ? e._i(e.settings.cloud_online, null) > -1 : e.settings.cloud_online }, on: { click: function (t) { return e.ask_enable_cloud(t) }, change: function (t) { var a = e.settings.cloud_online, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "cloud_online", a.concat([o])) : n > -1 && e.$set(e.settings, "cloud_online", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "cloud_online", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enable Cloud features ")])])]), e.settings.cloud_online ? a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Email & SMS Notifications "), a("span", { attrs: { "data-html": "true", title: "Receive browser notifications for new emails or sms messages that you receive. Enabling this will ask you for 'notifications' permission for Fake Data." } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } })], 1)]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Disable notifications "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.cloud_notifications, expression: "settings.cloud_notifications" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.cloud_notifications) ? e._i(e.settings.cloud_notifications, null) > -1 : e.settings.cloud_notifications }, on: { click: e.cloud_notifications_click, change: function (t) { var a = e.settings.cloud_notifications, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "cloud_notifications", a.concat([o])) : n > -1 && e.$set(e.settings, "cloud_notifications", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "cloud_notifications", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enable notifications ")])])]), a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Badge notifications "), a("span", { attrs: { "data-html": "true", title: "Show a badge indicator with the number of newly received emails and sms messages." } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"] } })], 1)]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Disable notification badges "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.cloud_notifications_badge, expression: "settings.cloud_notifications_badge" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.cloud_notifications_badge) ? e._i(e.settings.cloud_notifications_badge, null) > -1 : e.settings.cloud_notifications_badge }, on: { change: function (t) { var a = e.settings.cloud_notifications_badge, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "cloud_notifications_badge", a.concat([o])) : n > -1 && e.$set(e.settings, "cloud_notifications_badge", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "cloud_notifications_badge", i) } } }), a("span", { staticClass: "lever" }), e._v(" Enable notification badges ")])])]), a("div", { staticClass: "row" }, [a("div", { staticClass: "col-md-6" }, [a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Cloud Email prefix")]), a("div", { staticClass: "md-form unique-textarea mt-0" }, [a("div", { staticClass: "input-group mb-2" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.cloud_email_prefix, expression: "settings.cloud_email_prefix" }], staticClass: "py-0 pl-0 pr-2 form-control text-white", staticStyle: { "text-align": "right" }, attrs: { type: "text", id: "cloud_email_prefix_input" }, domProps: { value: e.settings.cloud_email_prefix }, on: { input: function (t) { t.target.composing || e.$set(e.settings, "cloud_email_prefix", t.target.value) } } }), a("div", { staticClass: "input-group-append dropdown" }, [a("div", { staticClass: "input-group-text elegant-color text-white pl-0", staticStyle: { "margin-bottom": "8px" } }, [e._v("<random-value>@ "), a("span", { staticClass: "cursor-pointer", attrs: { "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e._v(e._s("any_private" != e.settings.cloud_email_domain ? e.settings.cloud_email_domain : "<random private domain>") + " "), a("font-awesome-icon", { attrs: { icon: ["fas", "caret-down"] } })], 1), a("div", { staticClass: "dropdown-menu dropdown-menu-right email_domain_dropdown", staticStyle: { "min-width": "200px" } }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.settings.cloud_email_domain = "mail.fakedata.pro" } } }, [e._v("mail.fakedata.pro")]), a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.settings.cloud_email_domain = "fakedata.email" } } }, [e._v("fakedata.email")]), e.available_cloud_email_domains ? a("hr") : e._e(), e.available_cloud_email_domains && e.available_cloud_email_domains.length > 1 ? a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.settings.cloud_email_domain = "any_private" } } }, [e._v("Use random everytime")]) : e._e(), e._l(e.available_cloud_email_domains, (function (t) { return e.available_cloud_email_domains ? a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.settings.cloud_email_domain = t } } }, [e._v(e._s(t))]) : e._e() }))], 2)])])])])])]), e.initial_values.cloud_online ? a("div", { staticClass: "col-md-6" }, [a("div", { staticStyle: { position: "absolute", bottom: "7px", right: "10px", "text-align": "right", width: "100%" } }, [e.preview_loading ? a("span", [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1) : !e.preview_loading && e.email_preview ? a("span", { class: { "red-text": e.email_preview.error }, staticStyle: { "white-space": "nowrap", display: "inline-block", "max-width": "calc(100% - 136px)", position: "relative", top: "8px", overflow: "hidden", "text-overflow": "ellipsis" } }, [e._v(e._s(e.email_preview.text))]) : e._e(), a("a", { staticClass: "btn grey elegant-color-dark btn-flat btn-sm", on: { click: e.generateEmailPreview } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "eye"], size: "sm" } }), e._v("  Preview")], 1)])]) : e._e()]), a("div", { staticClass: "position-relative setting_wrapper" }, [a("label", [e._v("Available Cloud Phone numbers:")]), a("div", { staticClass: "md-form unique-textarea mt-0" }, [e.available_phone_numbers && e.available_phone_numbers.length > 0 ? a("input", { staticClass: "py-0 pl-0 form-control text-white", attrs: { type: "text", readonly: "" }, domProps: { value: e.available_phone_numbers.join(", ") } }) : a("input", { staticClass: "py-0 pl-0 form-control", staticStyle: { color: "#9e9e9e" }, attrs: { type: "text", readonly: "", disabled: "", value: "None" } })])]), a("div", { staticClass: "position-relative setting_wrapper" }, [a("div", { staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), a("input", { staticClass: "select-dropdown dropdown-toggle", attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: e.available_cloud_countries[e.settings.cloud_preferred_place_country] } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, e._l(e.available_cloud_countries, (function (t, s) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.settings.cloud_preferred_place_country = s } } }, [e._v(e._s(t))]) })), 0)]), a("label", [e._v("Preferred country for Cloud Places:")])])]) : e._e()])]) : a("div", { staticClass: "pt-3" }, [a("h5", { staticClass: "text-center" }, [a("router-link", { staticClass: "pro_required text-white", attrs: { to: "/account/license" } }, [a("span", { staticClass: "text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } }), e._v("  Only for Ultra subscribers")], 1)])], 1), e._m(0)]), a("enable-fd-cloud-modal", { attrs: { callback: function () { return e.settings.cloud_online = !0 } } })], 1) }, Ze = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "mt-5 white-space-initial" }, [a("p", { staticClass: "text-warning" }, [e._v("To eliminate any concerns, Fake Data is by default 100% offline and no remote connection is made to any server! Fake Data Cloud are a set of features, subscription based, that will require an internet connection and must be manually enabled by you before using them.")]), a("p", { staticClass: "mt-5" }, [e._v("Fake Data is already awesome and provides a lot of features needed for testing web forms with no frustration. Having a Pro license will turn you into a master of form testing, unlocking the best features that Fake Data has to offer and giving you the ability to configure and extend Fake Data in any way you want!")]), a("p", [e._v("There are however some aspects of form testing that have not been covered and probably aren't covered by any other form-filling extension out there:")]), a("ul", [a("li", [a("code", [e._v("Real-world addresses and postal codes")]), e._v(" - Many forms require addresses to be real and valid. Fake Data will provide you with city names, addresses and zip codes that are real and also linked to each other. (*U.S., Belgium, Netherlands, France, Brazil, Romania, and Czech Republic addresses for now, but more to come as requested by users)")]), a("li", { staticClass: "mt-4" }, [a("code", [e._v("Email spam box")]), e._v(" - A high percentage of the forms are triggering an email once they are submitted. Most of the time those emails are going into your personal inbox. When testing a form multiple times, your personal inbox will fill quickly with unneeded emails. Fake Data will catch them for you by providing you with personal and unlimited random addresses. The messages will be received directly in Fake Data and your personal inbox will stay clean. ")]), a("li", { staticClass: "mt-4" }, [a("code", [e._v("SMS spam box")]), e._v(" - You will also receive a dedicated phone number that you can use on the internet safely. Similar to emails, this number will catch all SMS messages and will be available for you inside Fake Data. This number is 100% yours and not shared with any other user. ")])])]) }], Xe = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade enable-fd-cloud-modal", attrs: { id: "enable-fd-cloud-modal", tabindex: "-1", role: "dialog", "aria-hidden": "true" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [e._m(0), a("div", { staticClass: "modal-body" }, [e._m(1), a("br"), a("p", [e._v("Starting with version 3, Fake Data brings new awesome features that unfortunately cannot be implemented without an external server. Because privacy is so important, you get to choose if you want to give Fake Data permissions to connect to the internet or not.")]), a("br"), a("p", [e._v("By enabling the Cloud features, Fake Data will send and receive information that is only essential to those particular features. Anything else, like the Generators you created, Custom Code that you wrote and the usage statistics that you see on the Settings page, will still remain offline and will never be sent anywhere.")]), a("br"), a("p", [a("font-awesome-icon", { staticClass: "text-danger", attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  You should also know that the authentication with Fake Data Cloud is made using your Pro license key. It's worth mentioning that sharing your license key with anyone else will also give them access to your cloud data, like emails or sms that your received, as well as access to managing your subscription.")], 1)]), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v("  Close")], 1), a("button", { staticClass: "btn btn-md btn-dark-green", attrs: { type: "submit" }, on: { click: e.submitCallback } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v("  Enable Fake Data Cloud")], 1)])])])]) }, et = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title", attrs: { id: "exampleModalLabel" } }, [e._v("Enable Fake Data Cloud")]), a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("Fake Data was and will always be transparent about how your data is used."), a("br"), e._v("Since privacy is on the top of the list, Fake Data runs 100% offline by default. This means that nothing leaves your computer, and also gives you the advantage of using the extension without internet connection.")]) }], tt = { name: "enable-fd-cloud-modal", props: ["callback"], methods: { submitCallback: function () { "function" == typeof this.callback && this.callback(), $(this.$el).modal("hide") } } }, at = tt, st = Object(b["a"])(at, Xe, et, !1, null, null, null), it = st.exports, ot = { name: "settings-cloud", components: { EnableFdCloudModal: it }, props: { root: {}, settings: {}, initial_values: {}, unlocked: !1 }, data() { return { email_preview: null, preview_loading: !1, has_notif_permissions: !1, available_cloud_countries: { all: "All / Random", BEL: "Belgium", BRA: "Brazil", CZE: "Czech Republic", FRA: "France", NLD: "Netherlands", ROM: "Romania", USA: "United States" } } }, created: function () { this.$eventHub.$on("cloud_meta_updated", this.onCloudMetaUpdated) }, beforeDestroy: function () { this.$eventHub.$off("cloud_meta_updated", this.onCloudMetaUpdated) }, mounted() { $("body > .enable-fd-cloud-modal").remove(), $("body").append($(".enable-fd-cloud-modal")), chrome.permissions.contains({ permissions: ["notifications"] }, function (e) { this.has_notif_permissions = e }.bind(this)), this.onCloudMetaUpdated() }, computed: { available_phone_numbers: function () { return this.root && this.root.ultra_subscription_meta && this.root.ultra_subscription_meta.phone_numbers && this.root.ultra_subscription_meta.phone_numbers.map(e => e.phone) || null }, cloud_email_prefix_valid: function () { let e = this.settings.cloud_email_prefix; if (!e) return "Cloud Email prefix cannot be empty"; if (e.includes("{{") && e.includes("}}")) try { e = faker.faker.helpers.fake(e) } catch (t) { console.error(t) } return e.match(/^[a-z0-9]/i) ? e.match(/[^a-z0-9][^a-z0-9]/i) ? "Cloud Email generator cannot have two consecutive special characters\nInvalid: " + e : !!e.match(/^[a-z0-9\._\-]+$/i) || "Only letters, numbers, . (dot), _ (underscore) and - (dash) characters are allowed\nInvalid: " + e : "Cloud Email prefix must start with a letter or a number\nInvalid: " + e }, available_cloud_email_domains: function () { return this.root && this.root.ultra_subscription_meta && this.root.ultra_subscription_meta.custom_email_domains && Array.isArray(this.root.ultra_subscription_meta.custom_email_domains) && this.root.ultra_subscription_meta.custom_email_domains.length ? this.root.ultra_subscription_meta.custom_email_domains : null } }, methods: { onCloudMetaUpdated: function () { }, generateEmailPreview: function () { !0 === this.cloud_email_prefix_valid ? (this.preview_loading = !0, chrome.runtime.sendMessage({ type: "get_faker_original_callback_enforce", generator: "Fake Data Cloud/Email", cloud_mail_prefix: this.settings.cloud_email_prefix, cloud_email_domain: this.settings.cloud_email_domain }, function (e) { this.preview_loading = !1, e ? ("error" == e.type && this.showPreviewError(e.result || "Error"), this.showPreviewText(e.text)) : this.showPreviewError("Failed to run preview") }.bind(this))) : alert(this.cloud_email_prefix_valid) }, showPreviewText: function (e) { this.email_preview = { error: !1, text: e } }, showPreviewError: function (e) { this.email_preview = { error: !0, text: e } }, ask_enable_cloud: function (e) { if (this.settings.cloud_online) return !0; e.preventDefault(), $(".enable-fd-cloud-modal").modal("show") }, cloud_notifications_click: function () { this.settings.cloud_notifications || this.has_notif_permissions || chrome.permissions.request({ permissions: ["notifications"] }, function (e) { this.settings.cloud_notifications = !!e }.bind(this)) } } }, nt = ot, rt = (a("8c91"), Object(b["a"])(nt, Qe, Ze, !1, null, null, null)), lt = rt.exports, ct = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "tab-pane in active", attrs: { id: "tab_popup", role: "tabpanel" } }, [a("div", { class: { nopro: !e.$parent.can_popup } }, [e.$parent.can_popup ? e._e() : a("div", { staticClass: "alert alert-dark mb-5 mt-3", attrs: { role: "alert" } }, [e._v(" It appears that your browser does not support extension popups. That's sad. :( ")]), a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Enable or disable popup")]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Disable popup "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.popup_enable, expression: "popup_enable" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.popup_enable) ? e._i(e.popup_enable, null) > -1 : e.popup_enable }, on: { change: function (t) { var a = e.popup_enable, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && (e.popup_enable = a.concat([o])) : n > -1 && (e.popup_enable = a.slice(0, n).concat(a.slice(n + 1))) } else e.popup_enable = i } } }), a("span", { staticClass: "lever" }), e._v(" Enable popup ")])])])]), a("div", [a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("When a single input field is selected in the page, and you click on a generator in the popup, what should happen?")]), a("div", { staticClass: "switch" }, [a("label", [e._v(" Just generate the value inside popup "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.settings.popup_auto_fill_on_generate, expression: "settings.popup_auto_fill_on_generate" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.settings.popup_auto_fill_on_generate) ? e._i(e.settings.popup_auto_fill_on_generate, null) > -1 : e.settings.popup_auto_fill_on_generate }, on: { change: function (t) { var a = e.settings.popup_auto_fill_on_generate, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.settings, "popup_auto_fill_on_generate", a.concat([o])) : n > -1 && e.$set(e.settings, "popup_auto_fill_on_generate", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.settings, "popup_auto_fill_on_generate", i) } } }), a("span", { staticClass: "lever" }), e._v(" Generate the value inside popup and automatically insert it in the selected field ")])])])]), a("div", { staticClass: "position-relative setting_wrapper" }, [a("div", { staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark dropdown-bottom" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), a("input", { staticClass: "select-dropdown dropdown-toggle", attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: e.popup_init_goto_options[e.settings.popup_init_goto] } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, e._l(e.popup_init_goto_options, (function (t, s) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.settings.popup_init_goto = s } } }, [e._v(e._s(t))]) })), 0)]), a("label", [e._v("On which screen should the popup open by default?")])])])]) }, dt = [], ut = { name: "settings-popup", components: { ProRequired: F }, props: { root: {}, settings: {} }, data() { return { popup_enable: !1, original_icon_action: null, popup_init_goto_options: { generators: "Generators", spambox: "SpamBox", last: "Last screen used", most_relevant: "SpamBox if there is any notification, Generators otherwise" } } }, computed: {}, watch: { popup_enable: function () { this.popup_enable ? this.settings.icon_action = "popup" : this.settings.icon_action = this.original_icon_action && "popup" != this.original_icon_action ? this.original_icon_action : "options" } }, mounted() { this.original_icon_action = this.settings.icon_action, this.popup_enable = "popup" == this.settings.icon_action } }, _t = ut, mt = Object(b["a"])(_t, ct, dt, !1, null, null, null), ht = mt.exports, pt = { components: { SettingsCloud: lt, SettingsDeveloper: Je, SettingsStats: be, SettingsBackup: me, SettingsKeyboard: re, SettingsGeneral: te, SettingsPopup: ht }, data: function () { return { settings: null, initial_values: null, any_changes: !1, active_tab: this.$route.params.kind || null, active_sub_tab: this.$route.params.subkind || null, active_sub_sub_tab: this.$route.params.subsubkind || null, stats: {}, install_date: null, custom_generators: [], extra_fields: {}, cloud_notifications_count: null, cloud_page_unlocked: !1 } }, props: ["root"], computed: { fd_current_version: function () { return chrome.runtime.getManifest().version + " MV" + chrome.runtime.getManifest().manifest_version }, can_popup: function () { return !!(chrome && _chrome.browserAction && _chrome.browserAction.setPopup) } }, watch: { $route: function () { this.active_tab = this.$route.params.kind || null, this.active_sub_tab = this.$route.params.subkind || null, this.active_sub_sub_tab = this.$route.params.subsubkind || null }, active_tab: { immediate: !0, handler: function () { if (this.active_tab) { if ("developer" == this.active_tab) { if (!this.active_sub_tab) return void this.changeSubTab("events") } else this.active_sub_tab = null; if ("developer" == this.active_tab && "libraries" == this.active_sub_tab) { if (!this.active_sub_sub_tab) return void (3 == this.root.getManifestVersion() ? this.changeSubSubTab("sandbox") : this.changeSubSubTab("background")) } else this.active_sub_sub_tab = null; this.root.resetBsEvents(), this.resetBsEvents() } else this.changeTab("general") } }, active_sub_tab: { immediate: !0, handler: function () { if ("developer" == this.active_tab) { if (!this.active_sub_tab) return void this.changeSubTab("events") } else this.active_sub_tab = null; if ("developer" == this.active_tab && "libraries" == this.active_sub_tab) { if (!this.active_sub_sub_tab) return void (3 == this.root.getManifestVersion() ? this.changeSubSubTab("sandbox") : this.changeSubSubTab("background")) } else this.active_sub_sub_tab = null; this.root.resetBsEvents(), this.resetBsEvents() } }, active_sub_sub_tab: { immediate: !0, handler: function () { if ("developer" == this.active_tab && "libraries" == this.active_sub_tab) { if (!this.active_sub_sub_tab) return void (3 == this.root.getManifestVersion() ? this.changeSubSubTab("sandbox") : this.changeSubSubTab("background")) } else this.active_sub_sub_tab = null; this.root.resetBsEvents(), this.resetBsEvents() } }, settings: { deep: !0, handler: function () { this.any_changes = this.checkForChanges() } }, "root.licenseActive": function () { this.cloud_page_unlocked = this.root.isUltraSubscriber() }, "root.ultra_subscription_meta": { deep: !0, handler: function () { this.cloud_page_unlocked = this.root.isUltraSubscriber() } } }, mounted: function () { this.root.currentView = this, this.syncStorage(); var e = this; $(".page-settings").on("shown.bs.dropdown", ".dropdown", (function (t) { if ("matching" == e.active_sub_tab || "general" == e.active_tab) { var a = $(this).find(".dropdown-menu"), s = $(this).closest(".tab-content"); ("general" != e.active_tab || $(this).hasClass("dropdown-bottom")) && e.$nextTick((function () { a.css({ position: "absolute", top: -1 * (a.offset().top - s.offset().top) + (s.height() - a.height()) }) })) } })), this.root.resetBsEvents() }, methods: { resetBsEvents: function () { this.$nextTick((function () { $.fn.materialChip && ($(".chips-placeholder.input-ev").data() && ($(".chips-placeholder.input-ev").data().initialized = !1, $(".chips-placeholder.input-ev").materialChip({ placeholder: "Add new event", secondaryPlaceholder: "Event name", data: this.settings.dev_events.input.map((function (e) { return { tag: e } })) }), $(".chips-placeholder.input-ev").on("chip.add chip.delete", function () { this.settings.dev_events.input = $(".input-ev").materialChip("data").map((function (e) { return e.tag })) }.bind(this))), $(".chips-placeholder.checkbox-ev").data() && ($(".chips-placeholder.checkbox-ev").data().initialized = !1, $(".chips-placeholder.checkbox-ev").materialChip({ placeholder: "Add new event", secondaryPlaceholder: "Event name", data: this.settings.dev_events.checkbox.map((function (e) { return { tag: e } })) }), $(".chips-placeholder.checkbox-ev").on("chip.add chip.delete", function () { this.settings.dev_events.checkbox = $(".checkbox-ev").materialChip("data").map((function (e) { return e.tag })) }.bind(this))), $(".chips-placeholder.select-ev").data() && ($(".chips-placeholder.select-ev").data().initialized = !1, $(".chips-placeholder.select-ev").materialChip({ placeholder: "Add new event", secondaryPlaceholder: "Event name", data: this.settings.dev_events.select.map((function (e) { return { tag: e } })) }), $(".chips-placeholder.select-ev").on("chip.add chip.delete", function () { this.settings.dev_events.select = $(".select-ev").materialChip("data").map((function (e) { return e.tag })) }.bind(this)))) })) }, changeTab: function (e) { this.active_tab = e, this.$router.push({ path: "/settings/" + e }) }, changeSubTab: function (e) { this.active_sub_tab = e, this.$router.push({ path: "/settings/" + this.active_tab + "/" + e }) }, changeSubSubTab: function (e) { this.active_sub_sub_tab = e, this.$router.push({ path: "/settings/" + this.active_tab + "/" + this.active_sub_tab + "/" + e }) }, syncStorage: function () { this.root.getStorageEngine().get({ language: "en_US", insert_method: "replace", checkbox_behavior: "random", select_behavior: "all", multi_select_behavior: "random", codemirror_enabled: !0, ignore_empty_fields: !1, fuzzy_enabled: !0, named_fallback_unnamed: !1, fallback_generator_toggle: !0, fallback_generator: "sentence", fallback_priority: "fuzzy_first", form_use_same_password: !0, form_ignore_autocomplete_off: !1, icon_action: "options", keyboard_shortcut: this.root.generateDefaultKeyboardShortcuts(), keyboard_shortcut_entire_form: this.root.generateDefaultKeyboardShortcutsForEntireForm(), dev_events: { input: ["input", "change"], checkbox: ["change"], select: ["change"] }, loaded_libraries: [], custom_integrations: { select2: !1, angular_material: !1, google_sheets: !1, public_api_support: !1, google_forms: !1, react_select: !1, vuetify: !1 }, custom_generators: [], install_date: null, stats: {}, extra_fields: {}, cloud_online: !1, cloud_notifications: !1, cloud_notifications_badge: !0, cloud_notifications_count: { emails: 0, sms: 0 }, cloud_email_prefix: "fd.", cloud_email_domain: "fakedata.email", cloud_preferred_place_country: "USA", fill_on_load: !1, fill_on_load_urls_type: "blacklist", fill_on_load_urls: [], fill_on_load_observe_dom: !1, group_default_generators: !1, popup_auto_fill_on_generate: !0, popup_init_goto: "generators", datasets: {} }, async function (e) { if (e) { var t = {}; for (var a in e) "loaded_libraries" == a ? t.loaded_libraries = e.loaded_libraries.map((function (e) { return e.type || (e.type = "background"), e })) : "cloud_notifications" == a ? await new Promise(a => { chrome.runtime.sendMessage({ type: "has_chrome_permission", permission: "notifications" }, (function (s) { t.cloud_notifications = s && e.cloud_notifications, a() })) }) : "keyboard_shortcut" == a || "keyboard_shortcut_entire_form" == a ? t[a] = { keyboard: Object.assign([], e[a].keyboard).sort(), mouse: e[a].mouse } : "dev_events" == a ? ("undefined" == typeof e.dev_events.input && (e.dev_events.input = ["input", "change"]), "undefined" == typeof e.dev_events.checkbox && (e.dev_events.checkbox = ["change"]), "undefined" == typeof e.dev_events.select && (e.dev_events.select = ["change"]), t.dev_events = e.dev_events) : "stats" == a ? this.stats = e.stats || {} : "install_date" == a ? this.install_date = e.install_date || null : "extra_fields" == a ? this.extra_fields = e.extra_fields || {} : "custom_generators" == a ? this.custom_generators = e.custom_generators : "cloud_notifications_count" == a ? this.cloud_notifications_count = e.cloud_notifications_count : t[a] = e[a]; this.initial_values = this.root.normalizeVueObject(t), this.settings = t, this.cloud_page_unlocked = this.root.isUltraSubscriber() } else toastr.error("Load Error: " + (chrome.runtime.lastError || "FD - Unknown error occurred"), !1, { closeButton: !0, timeOut: 5e3 }); this.$nextTick((function () { this.any_changes = !1, $.fn.materialSelect && $(".page-settings select.mdb-select.initialized").materialSelect("destroy"), this.root.resetBsEvents(), this.resetBsEvents() })) }.bind(this)) }, cancelChanges: function () { confirm("Are you sure you want to discard all changes?") && (this.settings = this.root.normalizeVueObject(this.initial_values), this.$nextTick((function () { this.any_changes = !1, this.resetBsEvents() }))) }, saveChanges: function () { if (this.settings.keyboard_shortcut.keyboard.length == this.settings.keyboard_shortcut_entire_form.keyboard.length) { var e = !0; for (var t in this.settings.keyboard_shortcut.keyboard) if (this.settings.keyboard_shortcut.keyboard[t] != this.settings.keyboard_shortcut_entire_form.keyboard[t]) { e = !1; break } if (e) return alert("Cannot assign same keyboard shortcut to multiple actions."), !1 } let a = this.settings.cloud_email_prefix; if ("undefined" != typeof a) { if (!a) return alert("Cloud Email prefix cannot be empty"), !1; if (a.includes("{{") && a.includes("}}")) try { a = faker.faker.helpers.fake(a) } catch (i) { console.error(i) } if (!a.match(/^[a-z0-9]/i)) return alert("Cloud Email prefix must start with a letter or a number"), !1; if (a.match(/[^a-z0-9][^a-z0-9]/i)) return alert("Cloud Email generator cannot have two consecutive special characters"), !1; if (!a.match(/^[a-z0-9\._\-]+$/i)) return alert("Only letters, numbers, . (dot), _ (underscore) and - (dash) characters are allowed"), !1 } if (this.root.getStorageEngine().set(this.root.normalizeVueObject(this.settings), (function () { chrome.runtime.sendMessage({ type: "refresh_data" }) })), this.initial_values.cloud_notifications_badge && !this.settings.cloud_notifications_badge) chrome && _chrome.browserAction && _chrome.browserAction.setBadgeText && _chrome.browserAction.setBadgeText({ text: "" }); else if (!this.initial_values.cloud_notifications_badge && this.settings.cloud_notifications_badge && this.cloud_notifications_count) { var s = (this.cloud_notifications_count.emails || 0) + (this.cloud_notifications_count.sms || 0); s > 0 && (chrome && _chrome.browserAction && _chrome.browserAction.setBadgeText && _chrome.browserAction.setBadgeText({ text: "" + s }), chrome && _chrome.browserAction && _chrome.browserAction.setBadgeBackgroundColor && _chrome.browserAction.setBadgeBackgroundColor({ color: [204, 0, 0, 255] })) } this.root.cloud_notifications_badge = this.settings.cloud_notifications_badge, this.initial_values = this.root.normalizeVueObject(this.settings), this.$nextTick((function () { this.any_changes = !1, toastr.success("Settings saved!", !1, { closeButton: !0, timeOut: 1e3 }), this.root.enableCloudButton(this.settings.cloud_online) })) }, checkForChanges: function () { for (var e in this.settings) if (!(["loaded_libraries"].indexOf(e) >= 0)) if ("datasets" == e) { if (JSON.stringify(this.root.normalizeVueObject(this.initial_values.datasets)) != JSON.stringify(this.root.normalizeVueObject(this.settings.datasets))) return !0 } else if ("keyboard_shortcut" == e) { let e = this.root.normalizeVueObject(this.initial_values.keyboard_shortcut.keyboard).sort(), t = this.root.normalizeVueObject(this.settings.keyboard_shortcut.keyboard).sort(); if (t.length != e.length) return !0; for (let a = 0; a < e.length; a++)if (e[a] != t[a]) return !0 } else if ("keyboard_shortcut_entire_form" == e) { let e = this.root.normalizeVueObject(this.initial_values.keyboard_shortcut_entire_form.keyboard).sort(), t = this.root.normalizeVueObject(this.settings.keyboard_shortcut_entire_form.keyboard).sort(); if (t.length != e.length) return !0; for (let a = 0; a < e.length; a++)if (e[a] != t[a]) return !0 } else if ("dev_events" == e) { if (this.settings.dev_events.input.length != this.initial_values.dev_events.input.length) return !0; for (let e = 0; e < this.settings.dev_events.input.length; e++)if (this.initial_values.dev_events.input.indexOf(this.settings.dev_events.input[e]) < 0) return !0; if (this.settings.dev_events.checkbox.length != this.initial_values.dev_events.checkbox.length) return !0; for (let e = 0; e < this.settings.dev_events.checkbox.length; e++)if (this.initial_values.dev_events.checkbox.indexOf(this.settings.dev_events.checkbox[e]) < 0) return !0; if (this.settings.dev_events.select.length != this.initial_values.dev_events.select.length) return !0; for (let e = 0; e < this.settings.dev_events.select.length; e++)if (this.initial_values.dev_events.select.indexOf(this.settings.dev_events.select[e]) < 0) return !0 } else if ("custom_integrations" == e) { for (let e in this.settings.custom_integrations) if (this.settings.custom_integrations[e] != this.initial_values.custom_integrations[e]) return !0 } else if ("fill_on_load_urls" == e) { if (JSON.stringify(this.settings.fill_on_load_urls) != JSON.stringify(this.initial_values.fill_on_load_urls)) return !0 } else if (this.settings[e] != this.initial_values[e]) return !0; return !1 }, downloadFile: function (e, t) { var a = document.createElement("a"); a.setAttribute("href", "data:application/octet-stream," + encodeURIComponent(e)), a.setAttribute("download", t), a.style.display = "none", document.body.appendChild(a), a.click(), document.body.removeChild(a) } } }, ft = pt, vt = (a("61f1"), Object(b["a"])(ft, U, q, !1, null, null, null)), gt = vt.exports, bt = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "page-fields" }, [e.loading_fields ? a("div", [a("h4", { staticClass: "text-center" }, [e._v("Loading data...")])]) : a("div", [e.active_edit_field || e.active_edit_field_pending ? e._e() : a("div", [a("ul", { staticClass: "nav md-tabs nav-justified elegant-color-dark" }, [a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/fields/named", "active-class": "active" } }, [e._v("Named Fields")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/fields/unnamed", "active-class": "active" } }, [e._v("Unnamed Fields")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/fields/option", "active-class": "active" } }, [e.root.isLicenseActive() ? e._e() : a("span", [e.root.isLicenseActive() ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } }), e._v("  Pro Only")], 1), e._v("  ")]), e._v("Option Fields ")])], 1)]), a("div", { staticClass: "tab-content grey darken-3 card" }, [a("div", { staticClass: "tab-pane in", class: { active: "named" == e.active_tab }, attrs: { id: "tab_named", role: "tabpanel" } }, [e.extra_fields_len > 0 && (!e.search_field_named && Object.keys(e.active_extra_fields_named).length > 0 || e.search_field_named) ? a("div", [a("form", { staticClass: "form-inline md-form form-sm unique-textarea search_form", on: { submit: function (e) { e.stopPropagation(), e.preventDefault() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "search"], size: "sm" } }), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.search_field_named, expression: "search_field_named" }], staticClass: "form-control form-control-sm ml-3 w-75 text-white", attrs: { type: "text", placeholder: "Search", "aria-label": "Search" }, domProps: { value: e.search_field_named }, on: { input: function (t) { t.target.composing || (e.search_field_named = t.target.value) } } })], 1), e._l(e.active_extra_fields_named, (function (t, s) { return a("div", { staticClass: "card text-white bg-dark mb-3 field_card" }, [a("div", { staticClass: "card-header elegant-color" }, [a("div", [a("span", { staticClass: "card-header-title" }, [e._v(e._s(s))])]), a("div", { staticClass: "pull-right" }, [a("div", { staticClass: "dropdown" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm pull-right", on: { click: function (a) { return e.openOptionsModal(s, t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "ellipsis-v"] } })], 1), a("div", { staticClass: "inline-block m-0 dropdown-container-checkbox p-0 m-0", staticStyle: { top: "0px", position: "relative" } }, [a("button", { staticClass: "btn elegant-color-dark btn-sm dropdown-toggle mr-0 mb-0 ", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e.root.isLicenseActive() || "Fake Data/Dataset" != e.extra_fields[s].generator ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e._v(" " + e._s("custom" == e.extra_fields[s].generator ? "Custom Code" : "Fake Data/Dataset" == e.extra_fields[s].generator ? "Dataset" : e.extra_fields[s].generator) + " ")]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_generators_menu" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.extra_fields[s].generator = "custom" } } }, [e._v("Custom Code")]), a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.extra_fields[s].generator = "Fake Data/Dataset" } } }, [e._v("Dataset "), e.root.isLicenseActive() ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark ml-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1)]), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Default Generators")]), e._l(e.root.fields, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.extra_fields[s].generator = t } } }, [e._v(e._s(t))]) })), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Custom Generators")]), e._l(e.custom_generators, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.extra_fields[s].generator = t.label } } }, [e._v(e._s(t.label))]) }))], 2)]), "Fake Data/Dataset" == e.extra_fields[s].generator ? a("div", { staticClass: "inline-block", staticStyle: { top: "3px", position: "relative" } }, [a("button", { staticClass: "m-0 btn elegant-color-dark btn-sm dropdown-toggle mr-0 mb-0", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e.root.isLicenseActive() ? !e.extra_fields[s].dataset || e.datasets && e.datasets[e.extra_fields[s].dataset.dataset] && e.datasets[e.extra_fields[s].dataset.dataset].columns.includes(e.extra_fields[s].dataset.column) ? e._e() : a("span", { staticClass: "badge warning-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } })], 1) : a("span", { staticClass: "badge pro_required danger-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e.extra_fields[s].dataset ? a("span", [e._v(e._s(e.datasets && e.datasets[e.extra_fields[s].dataset.dataset] && e.datasets[e.extra_fields[s].dataset.dataset].columns.includes(e.extra_fields[s].dataset.column) ? e.datasets[e.extra_fields[s].dataset.dataset].dataset_name + " / " + e.extra_fields[s].dataset.column : "Selected Dataset is not available anymore"))]) : a("span", [e._v("No Dataset selected")])]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_datasets_menu" }, [a("router-link", { staticClass: "dropdown-item", attrs: { to: "/settings/developer/datasets" } }, [e._v("Manage Datasets")]), e._l(e.datasets, (function (t, i, o) { return a("div", [a("hr"), a("h6", { staticClass: "dropdown-header" }, [e._v("Dataset: " + e._s(t.dataset_name))]), e._l(t.columns, (function (i) { return a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (a) { return a.preventDefault(), e.$set(e.extra_fields[s], "dataset", { dataset: t.id, column: i }) } } }, [e._v(e._s(i))]) }))], 2) }))], 2)]) : e._e()])])]), a("div", { staticClass: "card-body elegant-color white-text rounded-bottom slider", class: { closed: "custom" != e.extra_fields[s].generator } }, ["custom" == e.extra_fields[s].generator ? a("div", [e.root.isLicenseActive() && e.codemirror_enabled ? a("div", { staticClass: "position-relative" }, ["custom" == e.extra_fields[s].generator ? a("codemirror", { ref: "codemirrorWrapper_" + s, refInFor: !0, model: { value: e.extra_fields_callbacks[s], callback: function (t) { e.$set(e.extra_fields_callbacks, s, t) }, expression: "extra_fields_callbacks[name]" } }) : e._e()], 1) : a("div", [a("div", { staticClass: "md-form unique-textarea active-unique-textarea" }, [a("font-awesome-icon", { class: ["prefix", "grey-text", "fs-25px"], attrs: { icon: ["fas", "code"] } }), a("textarea", { directives: [{ name: "model", rawName: "v-model", value: e.extra_fields_callbacks[s], expression: "extra_fields_callbacks[name]" }], staticClass: "md-textarea text-white form-control code-textarea", attrs: { type: "text", id: "custom_code_" + s, rows: "3" }, domProps: { value: e.extra_fields_callbacks[s] }, on: { input: function (t) { t.target.composing || e.$set(e.extra_fields_callbacks, s, t.target.value) } } }), a("label", { attrs: { for: "custom_code_" + s } }, [e._v("JavaScript code here")])], 1)])]) : e._e()]), a("div", { staticClass: "card-footer" }, [a("div", { staticClass: "card-footer-inner" }, [e._m(0, !0), a("div", { staticClass: "card-footer-buttons" }, [a("a", { staticClass: "btn btn-unique btn-flat btn-sm", on: { click: function (t) { return e.removeField(s) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"], size: "sm" } }), e._v("  Delete")], 1), e.root.isLicenseActive() && e.codemirror_enabled && "custom" == e.extra_fields[s].generator ? a("a", { staticClass: "btn grey darken-3 btn-flat btn-sm", on: { click: function (t) { return e.root.codeMirrorFullScreen(e.$refs["codemirrorWrapper_" + s], s) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "expand-arrows-alt"] } }), e._v("  Fullscreen")], 1) : e._e(), a("a", { staticClass: "btn grey darken-3 btn-flat btn-sm", on: { click: function (a) { return e.generatePreview(s, t, a) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "eye"], size: "sm" } }), e._v("  Preview")], 1)])])])]) })), e.has_more_items ? a("button", { staticClass: "btn elegant-color-dark btn-lg btn-block", attrs: { type: "button" }, on: { click: e.loadMoreEntries } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-down"] } }), e._v("  Load More")], 1) : e._e()], 2) : a("div", [a("h5", { staticClass: "text-center" }, [e._v("No Named Fields learned yet.")]), e._m(1)])]), a("div", { staticClass: "tab-pane in", class: { active: "unnamed" == e.active_tab }, attrs: { id: "tab_unnamed", role: "tabpanel" } }, [e.extra_fields_len > 0 && (!e.search_field_unnamed && Object.keys(e.active_extra_fields_unnamed).length > 0 || e.search_field_unnamed) ? a("div", [a("form", { staticClass: "form-inline md-form form-sm unique-textarea search_form", on: { submit: function (e) { e.stopPropagation(), e.preventDefault() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "search"], size: "sm" } }), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.search_field_unnamed, expression: "search_field_unnamed" }], staticClass: "form-control form-control-sm ml-3 w-75 text-white", attrs: { type: "text", placeholder: "Search", "aria-label": "Search" }, domProps: { value: e.search_field_unnamed }, on: { input: function (t) { t.target.composing || (e.search_field_unnamed = t.target.value) } } })], 1), e._l(e.active_extra_fields_unnamed, (function (t, s) { return a("div", { staticClass: "card text-white bg-dark mb-3 field_card" }, [a("div", { staticClass: "card-header elegant-color" }, [a("div", { staticClass: "card-header-title" }, [t.regex_enabled ? a("small", { staticClass: "block blue-text", attrs: { title: t.url } }, [e._v(e._s(t.regex_expr))]) : a("small", { staticClass: "block" }, [e._v(e._s(t.url))]), a("small", [e._v("@" + e._s(t.selector))]), a("div", { staticClass: "regex_btns" }, [a("button", { staticClass: "btn btn-sm grey darken-3 btn-flat enable_regex_btn", attrs: { type: "button", title: "Replace URL with RegEx" }, on: { click: function (a) { return e.editLinkAsRegex(t) } } }, [t.regex_enabled ? a("span", [e._v("Manage Regex")]) : a("span", [e._v("Use Regex")])]), t.regex_enabled ? a("button", { staticClass: "btn btn-sm btn-unique btn-flat disable_regex_btn", attrs: { type: "button", title: "Remove RegEx setting" }, on: { click: function (a) { return e.removeRegexSetting(t) } } }, [e._v("Remove Regex")]) : e._e()])]), a("div", { staticClass: "pull-right" }, [a("div", { staticClass: "dropdown inline-block" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm pull-right", on: { click: function (a) { return e.openOptionsModal(s, t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "ellipsis-v"] } })], 1), a("div", { staticClass: "inline-block m-0 dropdown-container-checkbox p-0 m-0", staticStyle: { top: "0px", position: "relative" } }, [a("button", { staticClass: "btn elegant-color-dark btn-sm dropdown-toggle mr-0 mb-0", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e.root.isLicenseActive() || "Fake Data/Dataset" != e.extra_fields[s].generator ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e._v(" " + e._s("custom" == e.extra_fields[s].generator ? "Custom Code" : "Fake Data/Dataset" == e.extra_fields[s].generator ? "Dataset" : e.extra_fields[s].generator) + " ")]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_generators_menu" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.extra_fields[s].generator = "custom" } } }, [e._v("Custom Code")]), a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.extra_fields[s].generator = "Fake Data/Dataset" } } }, [e._v("Dataset "), e.root.isLicenseActive() ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark ml-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1)]), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Default Generators")]), e._l(e.root.fields, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.extra_fields[s].generator = t } } }, [e._v(e._s(t))]) })), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Custom Generators")]), e._l(e.custom_generators, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.extra_fields[s].generator = t.label } } }, [e._v(e._s(t.label))]) }))], 2)]), "Fake Data/Dataset" == e.extra_fields[s].generator ? a("div", { staticClass: "inline-block", staticStyle: { top: "3px", position: "relative" } }, [a("button", { staticClass: "m-0 btn elegant-color-dark btn-sm dropdown-toggle", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e.root.isLicenseActive() ? !e.extra_fields[s].dataset || e.datasets && e.datasets[e.extra_fields[s].dataset.dataset] && e.datasets[e.extra_fields[s].dataset.dataset].columns.includes(e.extra_fields[s].dataset.column) ? e._e() : a("span", { staticClass: "badge warning-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } })], 1) : a("span", { staticClass: "badge pro_required danger-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e.extra_fields[s].dataset ? a("span", [e._v(e._s(e.datasets && e.datasets[e.extra_fields[s].dataset.dataset] && e.datasets[e.extra_fields[s].dataset.dataset].columns.includes(e.extra_fields[s].dataset.column) ? e.datasets[e.extra_fields[s].dataset.dataset].dataset_name + " / " + e.extra_fields[s].dataset.column : "Selected Dataset is not available anymore"))]) : a("span", [e._v("No Dataset selected")])]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_datasets_menu" }, [a("router-link", { staticClass: "dropdown-item", attrs: { to: "/settings/developer/datasets" } }, [e._v("Manage Datasets")]), e._l(e.datasets, (function (t, i, o) { return a("div", [a("hr"), a("h6", { staticClass: "dropdown-header" }, [e._v("Dataset: " + e._s(t.dataset_name))]), e._l(t.columns, (function (i) { return a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (a) { return a.preventDefault(), e.$set(e.extra_fields[s], "dataset", { dataset: t.id, column: i }) } } }, [e._v(e._s(i))]) }))], 2) }))], 2)]) : e._e()])])]), a("div", { staticClass: "card-body elegant-color white-text rounded-bottom slider", class: { closed: "custom" != e.extra_fields[s].generator } }, ["custom" == e.extra_fields[s].generator ? a("div", [e.root.isLicenseActive() && e.codemirror_enabled ? a("div", { staticClass: "position-relative" }, ["custom" == e.extra_fields[s].generator ? a("codemirror", { ref: "codemirrorWrapper_" + s, refInFor: !0, model: { value: e.extra_fields_callbacks[s], callback: function (t) { e.$set(e.extra_fields_callbacks, s, t) }, expression: "extra_fields_callbacks[name]" } }) : e._e()], 1) : a("div", [a("div", { staticClass: "md-form unique-textarea active-unique-textarea" }, [a("font-awesome-icon", { class: ["prefix", "grey-text", "fs-25px"], attrs: { icon: ["fas", "code"] } }), a("textarea", { directives: [{ name: "model", rawName: "v-model", value: e.extra_fields_callbacks[s], expression: "extra_fields_callbacks[name]" }], staticClass: "md-textarea text-white form-control code-textarea", attrs: { type: "text", id: "custom_code_" + s, rows: "3" }, domProps: { value: e.extra_fields_callbacks[s] }, on: { input: function (t) { t.target.composing || e.$set(e.extra_fields_callbacks, s, t.target.value) } } }), a("label", { attrs: { for: "custom_code_" + s } }, [e._v("JavaScript code here")])], 1)])]) : e._e()]), a("div", { staticClass: "card-footer" }, [a("div", { staticClass: "card-footer-inner" }, [e._m(2, !0), a("div", { staticClass: "card-footer-buttons" }, [a("a", { staticClass: "btn btn-unique btn-flat btn-sm", on: { click: function (t) { return e.removeField(s) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"], size: "sm" } }), e._v("  Delete")], 1), e.root.isLicenseActive() && e.codemirror_enabled && "custom" == e.extra_fields[s].generator ? a("a", { staticClass: "btn grey darken-3 btn-flat btn-sm", on: { click: function (t) { return e.root.codeMirrorFullScreen(e.$refs["codemirrorWrapper_" + s], s) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "expand-arrows-alt"] } }), e._v("  Fullscreen")], 1) : e._e(), a("a", { staticClass: "btn grey darken-3 btn-flat btn-sm", on: { click: function (a) { return e.generatePreview(s, t, a) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "eye"], size: "sm" } }), e._v("  Preview")], 1)])])])]) })), e.has_more_items ? a("button", { staticClass: "btn elegant-color-dark btn-lg btn-block", attrs: { type: "button" }, on: { click: e.loadMoreEntries } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-down"] } }), e._v("  Load More")], 1) : e._e()], 2) : a("div", [a("h5", { staticClass: "text-center" }, [e._v("No Unnamed Fields learned yet.")]), e._m(3)])]), a("div", { staticClass: "tab-pane in", class: { active: "option" == e.active_tab }, attrs: { id: "tab_option", role: "tabpanel" } }, [e.root.isLicenseActive() ? a("div", [e.extra_fields_len > 0 && (!e.search_field_option && Object.keys(e.active_extra_fields_option).length > 0 || e.search_field_option) ? a("div", [a("form", { staticClass: "form-inline md-form form-sm unique-textarea search_form", on: { submit: function (e) { e.stopPropagation(), e.preventDefault() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "search"], size: "sm" } }), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.search_field_option, expression: "search_field_option" }], staticClass: "form-control form-control-sm ml-3 w-75 text-white", attrs: { type: "text", placeholder: "Search", "aria-label": "Search" }, domProps: { value: e.search_field_option }, on: { input: function (t) { t.target.composing || (e.search_field_option = t.target.value) } } })], 1), e._l(e.active_extra_fields_option, (function (t, s) { return a("div", { staticClass: "card text-white bg-dark mb-3 field_card" }, [a("div", { staticClass: "card-header elegant-color" }, [a("div", { staticClass: "card-header-title" }, [t.regex_enabled ? a("small", { staticClass: "block blue-text", attrs: { title: t.url } }, [e._v(e._s(t.regex_expr))]) : a("small", { staticClass: "block" }, [e._v(e._s(t.url))]), a("small", [e._v("@" + e._s(t.selector))]), a("div", { staticClass: "regex_btns" }, [a("button", { staticClass: "btn btn-sm grey darken-3 btn-flat enable_regex_btn", attrs: { type: "button", title: "Replace URL with RegEx" }, on: { click: function (a) { return e.editLinkAsRegex(t) } } }, [t.regex_enabled ? a("span", [e._v("Manage Regex")]) : a("span", [e._v("Use Regex")])]), t.regex_enabled ? a("button", { staticClass: "btn btn-sm btn-unique btn-flat disable_regex_btn", attrs: { type: "button", title: "Remove RegEx setting" }, on: { click: function (a) { return e.removeRegexSetting(t) } } }, [e._v("Remove Regex")]) : e._e()])]), a("div", { staticClass: "pull-right" }, [a("div", { staticClass: "dropdown inline-block" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm pull-right", on: { click: function (a) { return e.openOptionsModal(s, t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "ellipsis-v"] } })], 1), a("button", { staticClass: "btn elegant-color-dark btn-sm cursor-default no-waves", attrs: { type: "button" } }, [!0 === e.extra_fields[s].optionValue ? a("span", [e._v("Default Behavior")]) : !1 === e.extra_fields[s].optionValue ? a("span", [e._v("Ignore Field")]) : a("span", [e._v("Custom selection")])])])])]), a("div", { staticClass: "card-footer" }, [a("div", { staticClass: "card-footer-inner" }, [a("small", { staticClass: "preview_label" }, [!1 !== e.extra_fields[s].optionValue && !0 !== e.extra_fields[s].optionValue ? a("span", { staticClass: "preview_label_text" }, [e._v(" " + e._s(e.extra_fields[s].optionLabel) + " ")]) : e._e()]), a("div", { staticClass: "card-footer-buttons" }, [a("a", { staticClass: "btn btn-unique btn-flat btn-sm", on: { click: function (t) { return e.removeField(s) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"], size: "sm" } }), e._v("  Delete")], 1)])])])]) })), e.has_more_items ? a("button", { staticClass: "btn elegant-color-dark btn-lg btn-block", attrs: { type: "button" }, on: { click: e.loadMoreEntries } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-down"] } }), e._v("  Load More")], 1) : e._e()], 2) : a("div", [a("h5", { staticClass: "text-center" }, [e._v("No Option Fields learned yet.")]), e._m(5)])]) : a("div", [a("h5", { staticClass: "text-center" }, [a("router-link", { staticClass: "pro_required text-white", attrs: { to: "/account/license" } }, [a("span", { staticClass: "text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } }), e._v("  Only for Pro users")], 1)])], 1), e._m(4)])])])])]), a("nav", { staticClass: "navbar navbar-dark elegant-color-dark fixed-bottom d-block save_bar slider", class: { closed: !e.any_changes } }, [a("div", { staticClass: "text-center" }, [a("button", { staticClass: "btn btn-md btn-dark-green save_btn", attrs: { type: "button" }, on: { click: e.saveChanges } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v(" Save Changes")], 1), a("button", { staticClass: "btn btn-md btn-unique cancel_btn", attrs: { type: "button" }, on: { click: e.cancelChanges } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Cancel")], 1)])]), a("fields-manage-modal", { key: e.active_edit_field, attrs: { active_edit_field_pending: e.active_edit_field_pending, active_edit_field: e.active_edit_field, active_edit_field_extra_options: e.active_edit_field_extra_options, custom_generators: e.custom_generators, root: e.root, savecallback: e.saveNewField, active_tab: e.active_tab, active_edit_field_prioritise: e.active_edit_field_prioritise } }), a("fields-unnamed-regex-modal", { attrs: { field: e.regex.field, extra_fields: e.extra_fields, savecallback: e.saveRegexEditing, root: e.root } }), a("generator-options-modal", { attrs: { root: e.root }, model: { value: e.optionsField, callback: function (t) { e.optionsField = t }, expression: "optionsField" } })], 1) }, wt = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("small", { staticClass: "preview_label" }, [a("span", { staticClass: "preview_label_text" })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", { staticClass: "mt-5 help_list" }, [a("li", [e._v("HTML inputs for which you "), a("a", { staticClass: "text-white", attrs: { href: "assets/nested_generators.png", target: "_blank" } }, [e._v("choose a Generator from the context menu")]), e._v(" will show up here.")]), a("li", [e._v("Only HTML inputs with a "), a("code", [e._v("name")]), e._v(" or an "), a("code", [e._v("id")]), e._v(" attribute will be shown here, otherwise they will be categorised as Unnamed Fields.")]), a("li", [e._v("Once they show up, you will be able to manage each of them, individually, the way you want.")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("small", { staticClass: "preview_label" }, [a("span", { staticClass: "preview_label_text" })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", { staticClass: "mt-5 help_list" }, [a("li", [e._v("HTML inputs for which you "), a("a", { staticClass: "text-white", attrs: { href: "assets/nested_generators.png", target: "_blank" } }, [e._v("choose a Generator from the context menu")]), e._v(" will show up here.")]), a("li", [e._v("Only HTML inputs that don't have a "), a("code", [e._v("name")]), e._v(" or an "), a("code", [e._v("id")]), e._v(" attribute will be shown here, otherwise they will be categorised as Named Fields.")]), a("li", [e._v("Once they show up, you will be able to manage each of them, individually, the way you want.")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "mt-5" }, [a("p", [e._v("Managing text input fields is nice and, hopefully, Fake Data has proven to you that is the best at doing this. But do you want to know what else would make Fake Data even more awesome? The ability to choose whatever option you want from a "), a("code", [e._v("<select>")]), e._v(" element, or to decide whether a particular "), a("code", [e._v("checkbox")]), e._v(" element is checked or unchecked, or to choose which "), a("code", [e._v("radio button")]), e._v(" from a group is selected.")]), a("p", [e._v("By default, Fake Data chooses a random value for every "), a("code", [e._v("<select>")]), e._v(" element, but as a Pro user you will have the power to dictate which option you want to be selected. The same behavior applies to other two elements.")]), a("p", [e._v("Without a Pro license you can achieve the same functionality by writing few lines of JavaScript code for each element, which is a pain. So don't be cheap and get yourself a Pro membership for this awesome extension! You will also unlock other cool features.")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", { staticClass: "mt-5 help_list" }, [a("li", [e._v("HTML <select> elements for which you choose to always have the same value selected will show up here.")]), a("li", [e._v("Checkbox inputs for which you decided to be always checked, or always unchecked will show up here.")]), a("li", [e._v("Managed radio buttons will also show up here.")])]) }], kt = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade", attrs: { tabindex: "-1", role: "dialog", id: "regex_field_modal" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [e._m(0), a("div", { staticClass: "modal-body" }, [a("form", { staticClass: "form-horizontal", on: { submit: function (t) { return t.stopPropagation(), t.preventDefault(), e.saveRegex.apply(null, arguments) } } }, [a("p", { staticStyle: { "margin-bottom": "20px" } }, [e._v("Instead of identifying a single page by its static url, you can identify multiple similar pages using a regular expression. This is helpful if a website has dynamic pages with similar content and fields.")]), e._m(1), a("hr"), a("br"), a("div", { staticClass: "md-form unique-textarea" }, [a("span", { staticClass: "form-control field_name text-white", domProps: { innerHTML: e._s(e.original_url_html) } }), a("label", { staticClass: "active" }, [e._v("Original URL")])]), a("br"), a("div", { staticClass: "md-form unique-textarea" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.regex_field, expression: "regex_field" }], staticClass: "form-control text-white", attrs: { type: "text", id: "regex_field" }, domProps: { value: e.regex_field }, on: { input: function (t) { t.target.composing || (e.regex_field = t.target.value) } } }), a("label", { attrs: { for: "regex_field" } }, [e._v("Matching RegEx")]), e.regex_error_message ? a("p", { staticClass: "text-danger small" }, [e._v(e._s(e.regex_error_message))]) : e._e()]), e.additional_matched_links.length ? a("div", { staticClass: "additional_links" }, [a("h5", [e.additional_matched_links.length > 1 ? a("button", { staticClass: "pull-right btn btn-md grey darken-3", staticStyle: { "margin-top": "-3px" }, attrs: { type: "button" }, on: { click: e.toggleAdditionalSelection } }, [e.selected_all_additional_links ? a("span", [e._v("Unselect")]) : a("span", [e._v("Select")]), e._v(" All")]) : e._e(), e._v(" Replace additional matched links ")]), a("div", { staticClass: "additional_matched_links_holder" }, e._l(e.additional_matched_links, (function (t, s) { return a("div", { staticClass: "form-check additional_matched_link" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.additional_matched_links_selected, expression: "additional_matched_links_selected" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "checkbox" + s }, domProps: { value: t, checked: Array.isArray(e.additional_matched_links_selected) ? e._i(e.additional_matched_links_selected, t) > -1 : e.additional_matched_links_selected }, on: { change: function (a) { var s = e.additional_matched_links_selected, i = a.target, o = !!i.checked; if (Array.isArray(s)) { var n = t, r = e._i(s, n); i.checked ? r < 0 && (e.additional_matched_links_selected = s.concat([n])) : r > -1 && (e.additional_matched_links_selected = s.slice(0, r).concat(s.slice(r + 1))) } else e.additional_matched_links_selected = o } } }), a("label", { staticClass: "form-check-label inline-block", attrs: { for: "checkbox" + s } }, [a("span", { staticClass: "additional_link_url" }, [e._v(e._s(t.url))]), e._v("@"), a("span", { staticClass: "additional_link_selector" }, [e._v(e._s(t.selector))]), e._v(" = "), "unnamed" == e.field.kind ? a("span", { staticClass: "additional_link_generator" }, [e._v(e._s(t.generator))]) : "option" == e.field.kind ? a("span", { staticClass: "additional_link_generator" }, [!0 === t.optionValue ? a("span", [e._v("Default Behavior")]) : !1 === t.optionValue ? a("span", [e._v("Ignore Field")]) : a("span", [e._v(e._s(t.optionLabel))])]) : e._e()])]) })), 0)]) : e._e()])]), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-dark-green", attrs: { type: "button", disabled: !e.save_enabled }, on: { click: e.saveRegex } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v(" Set")], 1), a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Close")], 1)])])])]) }, yt = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title" }, [e._v("Replace URL with RegEx")]), a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { staticClass: "text-white", attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "regex_instructions" }, [a("blockquote", { staticClass: "blockquote small" }, [a("p", { staticClass: "no-padding" }, [e._v("Write your regex without the delimiter character.")]), a("p", { staticClass: "no-padding" }, [e._v("Case insensitive flag is enabled.")]), a("p", { staticClass: "no-padding" }, [e._v("Your regex must match the full url.")])])]) }], xt = { name: "fields-unnamed-regex-modal", props: ["field", "extra_fields", "savecallback", "root"], data: function () { return { original_url: null, original_url_html: null, save_enabled: !1, regex_field: "", regex_error_message: null, additional_matched_links: [], additional_matched_links_selected: [] } }, watch: { field: function () { this.original_url = this.field.url, this.regex_field = this.field.regex_expr || "" }, original_url: function () { this.original_url_html = this.original_url }, original_url_html: function () { this.checkRegex() }, regex_field: function () { this.checkRegex() }, selected_all_additional_links: function () { this.root.resetBsEvents() } }, computed: { selected_all_additional_links: function () { return this.additional_matched_links_selected.length == this.additional_matched_links.length } }, mounted: function () { $(document).off("show.bs.modal", "#regex_field_modal"), $(document).off("shown.bs.modal", "#regex_field_modal"), $(document).on("show.bs.modal", "#regex_field_modal", function () { this.additional_matched_links_selected = [] }.bind(this)), $(document).on("shown.bs.modal", "#regex_field_modal", function () { $("#regex_field_modal #regex_field").focus() }.bind(this)) }, methods: { showRegexErrorMessage: function (e) { this.regex_error_message = e }, checkRegex: function () { if (this.save_enabled = !1, this.additional_matched_links = [], "" == this.regex_field.toString().trim()) return this.highlightText(), void this.showRegexErrorMessage(null); try { var e = new RegExp(this.regex_field, "i"), t = e.exec(this.original_url); this.highlightText(t), t ? t[0] == this.original_url ? (this.showRegexErrorMessage(), this.findAdditionalLinks(), this.save_enabled = !0) : this.showRegexErrorMessage("Expression does not match the whole url yet.") : this.showRegexErrorMessage("Expression does not match the url.") } catch (a) { console.error(a), this.highlightText(), this.showRegexErrorMessage("The expression contains errors.") } }, highlightText: function (e) { var t = this.original_url; if (e) { var a = t.substr(0, e.index), s = t.substr(e.index, e[0].length), i = t.substr(e.index + e[0].length); t = a + '<span class="highlighted_match">' + s + "</span>" + i, this.original_url_html = t } else this.original_url_html = t }, findAdditionalLinks: function () { var e = [], t = null, a = null; for (var s in this.extra_fields) if ("object" == typeof this.extra_fields[s] && this.extra_fields[s].kind == this.field.kind && this.extra_fields[s] != this.field) { a = this.extra_fields[s].url; try { t = new RegExp(this.regex_field, "i").exec(a) } catch (i) { t = null } t && t[0] == a && e.push(this.extra_fields[s]) } this.additional_matched_links = e }, toggleAdditionalSelection: function () { this.selected_all_additional_links ? this.additional_matched_links_selected = [] : this.additional_matched_links_selected = Object.values(this.additional_matched_links) }, saveRegex: function () { if (this.save_enabled) { for (var e in this.extra_fields) (this.additional_matched_links_selected.indexOf(this.extra_fields[e]) >= 0 || this.extra_fields[e] == this.field) && (this.extra_fields[e].regex_enabled = !0, this.extra_fields[e].regex_expr = this.regex_field); this.savecallback(this.extra_fields), this.$nextTick((function () { $("#regex_field_modal").modal("hide") })) } } } }, Ct = xt, $t = (a("622c"), Object(b["a"])(Ct, kt, yt, !1, null, null, null)), St = $t.exports, At = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", [e.active_edit_field ? a("div", { staticClass: "modal fade add_new_field_modal", attrs: { id: "add_new_field_modal", tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [a("form", { on: { submit: function (t) { return t.stopPropagation(), t.preventDefault(), e.saveField.apply(null, arguments) } } }, [a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title" }, [e._v("Manage " + e._s({ named: "Named", unnamed: "Unnamed", option: "Option" }[e.active_edit_field.kind]) + " Field")]), e._m(0)]), a("div", { staticClass: "modal-body" }, [["date", "datetime-local", "month", "number", "time"].indexOf(e.active_edit_field_extra_options.inputType) >= 0 ? a("div", [a("p", { staticClass: "small" }, [a("font-awesome-icon", { class: "yellow-text", attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("   "), "date" == e.active_edit_field_extra_options.inputType ? a("span", [e._v(' Inputs of type "date" must always be updated with a valid date in '), a("span", { staticClass: "text-white", attrs: { title: "Ex: 2018-12-25" } }, [e._v("YYYY-MM-DD")]), e._v(' format. It is recommended to use the "datetime" Generator with them. ')]) : e._e(), "datetime-local" == e.active_edit_field_extra_options.inputType ? a("span", [e._v(' Inputs of type "datetime-local" must always be updated with a valid date and time in '), a("span", { staticClass: "text-white", attrs: { title: "Ex: 2018-12-25T16:20" } }, [e._v("YYYY-MM-DDTHH:mm")]), e._v(' format. It is recommended to use the "datetime" Generator with them. ')]) : e._e(), "time" == e.active_edit_field_extra_options.inputType ? a("span", [e._v(' Inputs of type "time" must always be updated with a valid time in '), a("span", { staticClass: "text-white", attrs: { title: "Ex: 16:20" } }, [e._v("HH:mm")]), e._v(' format. It is recommended to use the "datetime" Generator with them. ')]) : e._e(), "month" == e.active_edit_field_extra_options.inputType ? a("span", [e._v(' Inputs of type "month" must always be updated with a valid date in '), a("span", { staticClass: "text-white", attrs: { title: "Ex: 2018-12" } }, [e._v("YYYY-MM")]), e._v(' format. It is recommended to use the "datetime" Generator with them. ')]) : e._e(), "number" == e.active_edit_field_extra_options.inputType ? a("span", [e._v(' Inputs of type "number" must always be updated with a valid and non-formatted number, either '), a("span", { staticClass: "text-white", attrs: { title: "Ex: 666<br />Ex: -666", "data-html": "true" } }, [e._v("integer")]), e._v(", or "), a("span", { staticClass: "text-white", attrs: { title: "Ex: 4.20" } }, [e._v("double")]), e._v(' with dot (" . ") as decimal separator. It is recommended to use the "number" Generator with them. ')]) : e._e()], 1)]) : e._e(), "named" == e.backup_field.kind ? a("div", [!e.named_fallback_unnamed && e.save_as_unnamed ? a("div", { staticClass: "alert alert-warning p-1" }, [a("p", { staticClass: "mb-0" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  "), a("strong", [e._v("Fallback Named Fields to Unnamed Fields")]), e._v(" setting is not enabled, which will make this change to have no effect. "), a("router-link", { attrs: { to: "/settings/developer/matching?highlight=named_fallback_unnamed", target: "_blank" } }, [e._v("Go to Options page to enable this setting.")])], 1)]) : e._e(), a("div", { staticClass: "position-relative unique-textarea" }, [a("label", { staticClass: "active" }, [e._v("Save Field as:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", [a("span", [e._v("Named Field")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.save_as_unnamed, expression: "save_as_unnamed" }], attrs: { type: "checkbox", id: "field_type_selector" }, domProps: { checked: Array.isArray(e.save_as_unnamed) ? e._i(e.save_as_unnamed, null) > -1 : e.save_as_unnamed }, on: { change: function (t) { var a = e.save_as_unnamed, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && (e.save_as_unnamed = a.concat([o])) : n > -1 && (e.save_as_unnamed = a.slice(0, n).concat(a.slice(n + 1))) } else e.save_as_unnamed = i } } }), a("span", { staticClass: "lever" }), a("span", [e._v("Unnamed Field")])])])]), "unnamed" != e.active_edit_field_prioritise || e.save_as_unnamed ? e._e() : a("small", [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  Unnamed Field will be deleted"), a("br")], 1), a("br")]) : e._e(), a("div", { staticClass: "md-form unique-textarea" }, [a("div", { staticStyle: { display: "flex", "word-break": "break-all" } }, [a("div", { staticStyle: { "flex-grow": "1" } }, [e.active_edit_field_extra_options.regex_enabled ? a("div", [a("span", { staticClass: "form-control" }, [a("small", { staticClass: "blue-text" }, [e._v(e._s(e.active_edit_field.regex_expr))]), a("small", { staticClass: "text-white" }, [e._v("@" + e._s(e.active_edit_field.selector))])])]) : a("div", [a("span", { staticClass: "form-control text-white break-word" }, ["named" != e.active_edit_field.kind ? a("small", [e._v(e._s(e.active_edit_field.url) + "@" + e._s(e.active_edit_field.selector))]) : a("span", [e._v(e._s(e.active_edit_field.inputName))])])])]), a("div", ["named" != e.active_edit_field.kind ? a("button", { staticClass: "btn btn-sm elegant-color pull-right", attrs: { type: "button", title: "Edit Selector" }, on: { click: e.openUpdateSelectorModal } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "pen"] } })], 1) : e._e()])]), e.original_selector != e.active_edit_field.selector && e.save_as_unnamed ? a("div", { staticClass: "small mb-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  Original Unnamed Field will be deleted."), a("br")], 1) : e._e(), a("label", { staticClass: "active" }, [e._v(e._s({ named: "Named", unnamed: "Unnamed", option: "Option" }[e.active_edit_field.kind]) + " Field identifier")])]), e.conflicts && e.conflicts.length ? a("div", [a("p", { staticClass: "text-warning small" }, [a("font-awesome-icon", { class: "yellow-text", attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("   Found " + e._s(e.conflicts.length) + " " + e._s(1 == e.conflicts.length ? "Unnamed Field" : "Unnamed Fields") + " with conflicts: ")], 1), a("div", { staticClass: "small" }, [a("ul", { staticStyle: { "list-style-type": "none" } }, e._l(e.conflicts, (function (t) { return a("li", [t.regex_enabled ? a("span", [a("span", { staticClass: "blue-text" }, [e._v(e._s(t.regex_expr))]), e._v("@" + e._s(t.selector))]) : a("span", [e._v(e._s(t.url) + "@" + e._s(t.selector))]), a("a", { staticClass: "btn elegant-color btn-flat btn-xs", attrs: { title: "Edit this one instead" }, on: { click: function (a) { return e.editConflictField(t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "pen"], size: "sm" } })], 1), a("a", { staticClass: "btn btn-unique btn-flat btn-xs", attrs: { title: "Delete" }, on: { click: function (a) { return e.removeConflictField(t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"], size: "sm" } })], 1)]) })), 0)])]) : e._e(), e.active_edit_field.regex_enabled ? a("div", [a("br"), a("div", { staticClass: "position-relative unique-textarea" }, [a("label", { staticClass: "active" }, [e._v("Manage link regex setting:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", [a("span", [e._v("Disable regex")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.active_edit_field_extra_options.regex_enabled, expression: "active_edit_field_extra_options.regex_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.active_edit_field_extra_options.regex_enabled) ? e._i(e.active_edit_field_extra_options.regex_enabled, null) > -1 : e.active_edit_field_extra_options.regex_enabled }, on: { change: function (t) { var a = e.active_edit_field_extra_options.regex_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.active_edit_field_extra_options, "regex_enabled", a.concat([o])) : n > -1 && e.$set(e.active_edit_field_extra_options, "regex_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.active_edit_field_extra_options, "regex_enabled", i) } } }), a("span", { staticClass: "lever" }), a("span", [e._v("Enable regex")])])])])]) : e._e(), a("br"), "named" == e.active_edit_field.kind && (e.root.fields.indexOf(e.active_edit_field.inputName) >= 0 || e.custom_generator_labels.indexOf(e.active_edit_field.inputName) >= 0) ? a("div", [a("small", [a("font-awesome-icon", { attrs: { icon: ["fas", "info-circle"] } }), e._v("  Settings are not available yet for Fields with same name as Generators.")], 1)]) : a("div", ["option" != e.active_edit_field.kind ? a("div", [a("div", { staticClass: "position-relative unique-textarea", attrs: { id: "generator_selector" } }, [a("div", { staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), e.root.isLicenseActive() || "Fake Data/Dataset" != e.active_edit_field.generator ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark mr-2", staticStyle: { position: "absolute", top: "13px" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), a("input", { staticClass: "select-dropdown dropdown-toggle", class: { "pl-4p5": !e.root.isLicenseActive() && "Fake Data/Dataset" == e.active_edit_field.generator }, attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: "custom" == e.active_edit_field.generator ? "Custom Code" : "Fake Data/Dataset" == e.active_edit_field.generator ? "Dataset" : e.active_edit_field.generator || "Choose Generator" } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { return t.preventDefault(), e.chooseGenerator("custom") } } }, [e._v("Custom Code")]), a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.active_edit_field.generator = "Fake Data/Dataset" } } }, [e._v("Dataset "), e.root.isLicenseActive() ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark ml-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1)]), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Default Generators")]), e._l(e.root.fields, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { return a.preventDefault(), e.chooseGenerator(t) } } }, [e._v(e._s(t))]) })), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Custom Generators")]), e._l(e.custom_generators, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { return a.preventDefault(), e.chooseGenerator(t.label) } } }, [e._v(e._s(t.label))]) }))], 2)]), a("label", [e._v("Generator:")])]), a("br"), "Fake Data/Dataset" == e.active_edit_field.generator ? a("div", { staticClass: "position-relative unique-textarea", attrs: { id: "dataset_selector" } }, [a("div", { staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), e.root.isLicenseActive() || "Fake Data/Dataset" != e.active_edit_field.generator ? !e.active_edit_field.dataset || e.datasets && e.datasets[e.active_edit_field.dataset.dataset] && e.datasets[e.active_edit_field.dataset.dataset].columns.includes(e.active_edit_field.dataset.column) ? e._e() : a("span", { staticClass: "badge warning-color-dark mr-2", staticStyle: { position: "absolute", top: "13px" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } })], 1) : a("span", { staticClass: "badge pro_required danger-color-dark mr-2", staticStyle: { position: "absolute", top: "13px" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), a("input", { staticClass: "select-dropdown dropdown-toggle", class: { "pl-4p5": !e.root.isLicenseActive() || e.active_edit_field.dataset && (!e.datasets || !e.datasets[e.active_edit_field.dataset.dataset]) }, attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: e.active_edit_field.dataset ? e.datasets && e.datasets[e.active_edit_field.dataset.dataset] && e.datasets[e.active_edit_field.dataset.dataset].columns.includes(e.active_edit_field.dataset.column) ? e.datasets[e.active_edit_field.dataset.dataset].dataset_name + " / " + e.active_edit_field.dataset.column : "Selected Dataset is not available anymore" : "No Dataset selected" } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.jumpToPage("/settings/developer/datasets") } } }, [e._v("Manage Datasets")]), e._l(e.datasets, (function (t, s, i) { return a("div", [a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Dataset: " + e._s(t.dataset_name))]), e._l(t.columns, (function (s) { return a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (a) { return a.preventDefault(), e.$set(e.active_edit_field, "dataset", { dataset: t.id, column: s }) } } }, [e._v(e._s(s))]) }))], 2) }))], 2)]), a("label", [e._v("Dataset:")])]) : e._e()]) : a("div", [e.root.isLicenseActive() || "option" != e.active_edit_field.kind ? e._e() : a("div", [a("h5", [a("pro-required", { staticClass: "no-margin", attrs: { "label-false": "Pro Only", root: e.root } })], 1), a("br")]), a("div", { staticClass: "position-relative unique-textarea manage_select_options_container", class: { pro_required: !e.root.isLicenseActive() } }, [a("select", { directives: [{ name: "model", rawName: "v-model", value: e.active_edit_field.optionValue, expression: "active_edit_field.optionValue" }], attrs: { id: "manage_select_options", "data-stop-refresh": "true" }, on: { change: function (t) { var a = Array.prototype.filter.call(t.target.options, (function (e) { return e.selected })).map((function (e) { var t = "_value" in e ? e._value : e.value; return t })); e.$set(e.active_edit_field, "optionValue", t.target.multiple ? a : a[0]) } } }, [a("option", { domProps: { value: !0 } }, [e._v("Use default behavior")]), "select" == e.active_edit_field_extra_options.inputType || "radio" == e.active_edit_field_extra_options.inputType || "checkbox" == e.active_edit_field_extra_options.inputType ? a("option", { domProps: { value: !1 } }, [e._v("Ignore field and select nothing")]) : e._e(), "select" == e.active_edit_field_extra_options.inputType && e.active_edit_field_extra_options.isMultiSelect ? a("option", { attrs: { value: "$$fd:multi:random" } }, [e._v("Select a random number of random options")]) : e._e(), "select" == e.active_edit_field_extra_options.inputType && e.active_edit_field_extra_options.isMultiSelect ? a("option", { attrs: { value: "$$fd:multi:all" } }, [e._v("Select all options")]) : e._e(), "select" == e.active_edit_field_extra_options.inputType && e.active_edit_field_extra_options.isMultiSelect ? a("option", { attrs: { value: "$$fd:multi:one" } }, [e._v("Select one random option at a time")]) : e._e(), a("option", { attrs: { disabled: !0 } }), "checkbox" == e.active_edit_field_extra_options.inputType ? a("option", { domProps: { value: "checked" } }, [e._v("Always checked")]) : e._e(), "checkbox" == e.active_edit_field_extra_options.inputType ? a("option", { domProps: { value: "unchecked" } }, [e._v("Always unchecked")]) : e._e()]), a("label", [e._v("Fixed option")])]), "select" == e.active_edit_field_extra_options.inputType ? a("div", [a("br"), a("div", { staticClass: "position-relative unique-textarea manage_excluded_options_container", class: { pro_required: !e.root.isLicenseActive() } }, [a("select", { directives: [{ name: "model", rawName: "v-model", value: e.active_edit_field.excluded_options, expression: "active_edit_field.excluded_options" }], attrs: { id: "manage_excluded_options", multiple: "", "data-stop-refresh": "true" }, on: { change: function (t) { var a = Array.prototype.filter.call(t.target.options, (function (e) { return e.selected })).map((function (e) { var t = "_value" in e ? e._value : e.value; return t })); e.$set(e.active_edit_field, "excluded_options", t.target.multiple ? a : a[0]) } } }, [a("option", { attrs: { disabled: "", selected: "" }, domProps: { value: null } }, [e._v("None")])]), a("label", [e._v("Exclude options from selection  "), a("font-awesome-icon", { attrs: { icon: ["fas", "question-circle"], title: "Select the options that you never want to be selected by Fake Data" } })], 1)])]) : e._e()]), "option" != e.active_edit_field.kind ? a("div", { staticClass: "position-relative unique-textarea" }, [a("div", { staticClass: "white-text slider custom_code_wrapper", class: { closed: "custom" != e.active_edit_field.generator } }, [e.root.isLicenseActive() && e.codemirror_enabled ? a("div", { staticClass: "position-relative" }, [a("codemirror", { ref: "codemirrorWrapper_custom_callback", model: { value: e.active_edit_field.custom_callback, callback: function (t) { e.$set(e.active_edit_field, "custom_callback", t) }, expression: "active_edit_field.custom_callback" } })], 1) : a("div", [a("div", { staticClass: "md-form unique-textarea active-unique-textarea" }, [a("font-awesome-icon", { class: ["prefix", "grey-text", "fs-25px"], attrs: { icon: ["fas", "code"] } }), a("textarea", { directives: [{ name: "model", rawName: "v-model", value: e.active_edit_field.custom_callback, expression: "active_edit_field.custom_callback" }], staticClass: "md-textarea text-white form-control code-textarea", attrs: { type: "text", id: "callback_before", rows: "3" }, domProps: { value: e.active_edit_field.custom_callback }, on: { input: function (t) { t.target.composing || e.$set(e.active_edit_field, "custom_callback", t.target.value) } } }), a("label", { attrs: { for: "callback_before" } }, [e._v("JavaScript code here")])], 1)])])]) : e._e(), e.root.isLicenseActive() || "option" == e.active_edit_field.kind ? a("div", [a("br")]) : a("div", [a("h5", [a("pro-required", { staticClass: "no-margin", attrs: { "label-false": "Pro Only", root: e.root } })], 1)]), a("div", { class: { pro_required: !e.root.isLicenseActive() } }, [e.field ? a("field-options-modal-content", { attrs: { root: e.root, field_options: e.active_edit_field_extra_options }, model: { value: e.field, callback: function (t) { e.field = t }, expression: "field" } }) : e._e()], 1), "option" != e.active_edit_field.kind ? a("hr") : e._e(), "option" != e.active_edit_field.kind ? a("div", { staticClass: "preview_buttons_innder" }, [e._m(1), a("div", { staticClass: "preview_button" }, [a("button", { staticClass: "btn btn-sm elegant-color pull-right", attrs: { type: "button" }, on: { click: function (t) { return e.generatePreview(e.name, e.field, t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "eye"], size: "sm" } }), e._v("  Preview")], 1)])]) : e._e()])]), a("div", { staticClass: "modal-footer" }, [e.saveBtnEnabled ? a("button", { staticClass: "btn btn-md btn-dark-green", attrs: { type: "submit" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v("  Save")], 1) : a("button", { staticClass: "btn btn-md btn-dark-green", attrs: { type: "button", disabled: "disabled" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v("  Save")], 1), a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v("  Close")], 1)])])])])]) : e._e(), e.active_edit_field ? a("fields-manage-modal-edit-selector", { attrs: { element_unique_selector: e.active_edit_field.original_selector, original_selector_is_xpath: e.active_edit_field.selector_is_xpath, original_selector: e.active_edit_field.selector, tab_id: e.$route.query.backto, frame_id: e.$route.query.frameid, callback: e.selectorUpdated, root: e.root } }) : e._e(), e.active_edit_field_pending ? a("div", { staticClass: "modal fade active_edit_field_pending", attrs: { id: "active_edit_field_pending", tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [e._m(2), a("div", { staticClass: "modal-body" }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  Waiting for Custom Element "), a("code", [e._v(e._s(e.active_edit_field_pending.custom_element_selector))]), e._v(" to finish loading... ")], 1), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v("  Close")], 1)])])])]) : e._e()], 1) }, Ft = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { staticClass: "text-white", attrs: { "aria-hidden": "true" } }, [e._v("×")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("small", { staticClass: "preview_label" }, [a("span", { staticClass: "preview_label_text" })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title" }, [e._v("Waiting for registered element")]), a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { staticClass: "text-white", attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }], Dt = function () { var e = this, t = e.$createElement, a = e._self._c || t; return e.value ? a("div", [e.permissions.phone_format ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Phone number format:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_phone_format_enabled, expression: "value.object.extra_phone_format_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_phone_format_enabled) ? e._i(e.value.object.extra_phone_format_enabled, null) > -1 : e.value.object.extra_phone_format_enabled }, on: { change: function (t) { var a = e.value.object.extra_phone_format_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_phone_format_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_phone_format_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_phone_format_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_phone_format_enabled }, staticStyle: { height: "47px" } }, [a("div", { staticClass: "md-form unique-textarea" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_phone_format_value, expression: "value.object.extra_phone_format_value" }], staticClass: "form-control text-white", attrs: { type: "text", required: "" }, domProps: { value: e.value.object.extra_phone_format_value }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_phone_format_value", t.target.value) } } }), a("label", [e._v("Format")])])]), a("hr")]) : e._e(), e.permissions.lorem_words_count ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Words count:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_lorem_words_count_enabled, expression: "value.object.extra_lorem_words_count_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_lorem_words_count_enabled) ? e._i(e.value.object.extra_lorem_words_count_enabled, null) > -1 : e.value.object.extra_lorem_words_count_enabled }, on: { change: function (t) { var a = e.value.object.extra_lorem_words_count_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_lorem_words_count_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_lorem_words_count_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_lorem_words_count_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_lorem_words_count_enabled }, staticStyle: { height: "47px" } }, [a("div", { staticClass: "md-form unique-textarea" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_lorem_words_count_value, expression: "value.object.extra_lorem_words_count_value" }], staticClass: "form-control text-white", attrs: { type: "number", min: "0", required: "" }, domProps: { value: e.value.object.extra_lorem_words_count_value }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_lorem_words_count_value", t.target.value) } } }), a("label", [e._v("Number of words")])])]), a("hr")]) : e._e(), e.permissions.lorem_paragraph_sentences ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Sentence count:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_lorem_paragraph_sentences_enabled, expression: "value.object.extra_lorem_paragraph_sentences_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_lorem_paragraph_sentences_enabled) ? e._i(e.value.object.extra_lorem_paragraph_sentences_enabled, null) > -1 : e.value.object.extra_lorem_paragraph_sentences_enabled }, on: { change: function (t) { var a = e.value.object.extra_lorem_paragraph_sentences_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_lorem_paragraph_sentences_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_lorem_paragraph_sentences_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_lorem_paragraph_sentences_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_lorem_paragraph_sentences_enabled }, staticStyle: { height: "47px" } }, [a("div", { staticClass: "md-form unique-textarea" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_lorem_paragraph_sentences_value, expression: "value.object.extra_lorem_paragraph_sentences_value" }], staticClass: "form-control text-white", attrs: { type: "number", min: "0", required: "" }, domProps: { value: e.value.object.extra_lorem_paragraph_sentences_value }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_lorem_paragraph_sentences_value", t.target.value) } } }), a("label", [e._v("Number of sentences in paragraph")])])]), a("hr")]) : e._e(), e.permissions.lorem_paragraphs_count ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Paragraphs count:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_lorem_paragraphs_count_enabled, expression: "value.object.extra_lorem_paragraphs_count_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_lorem_paragraphs_count_enabled) ? e._i(e.value.object.extra_lorem_paragraphs_count_enabled, null) > -1 : e.value.object.extra_lorem_paragraphs_count_enabled }, on: { change: function (t) { var a = e.value.object.extra_lorem_paragraphs_count_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_lorem_paragraphs_count_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_lorem_paragraphs_count_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_lorem_paragraphs_count_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_lorem_paragraphs_count_enabled }, staticStyle: { height: "47px" } }, [a("div", { staticClass: "md-form unique-textarea" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_lorem_paragraphs_count_value, expression: "value.object.extra_lorem_paragraphs_count_value" }], staticClass: "form-control text-white", attrs: { type: "number", min: "0", required: "" }, domProps: { value: e.value.object.extra_lorem_paragraphs_count_value }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_lorem_paragraphs_count_value", t.target.value) } } }), a("label", [e._v("Number of paragraphs (x3 sentences)")])])]), a("hr")]) : e._e(), e.permissions.datetime_between ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Date & Time interval:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_datetime_between_enabled, expression: "value.object.extra_datetime_between_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_datetime_between_enabled) ? e._i(e.value.object.extra_datetime_between_enabled, null) > -1 : e.value.object.extra_datetime_between_enabled }, on: { change: function (t) { var a = e.value.object.extra_datetime_between_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_datetime_between_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_datetime_between_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_datetime_between_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_datetime_between_enabled }, staticStyle: { height: "192px" } }, [a("div", [a("div", { staticClass: "md-form unique-textarea inline-block" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.datetime_from_date, expression: "datetime_from_date" }], staticClass: "form-control text-white pickDate", attrs: { type: "text", readonly: "", "data-field": "extra_datetime_from_value" }, domProps: { value: e.datetime_from_date }, on: { input: function (t) { t.target.composing || (e.datetime_from_date = t.target.value) } } }), a("label", [e._v("From Date")])]), a("div", { staticClass: "md-form unique-textarea inline-block" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.datetime_from_time, expression: "datetime_from_time" }], staticClass: "form-control text-white pickTime", attrs: { type: "text", readonly: "", "data-field": "extra_datetime_from_value" }, domProps: { value: e.datetime_from_time }, on: { input: function (t) { t.target.composing || (e.datetime_from_time = t.target.value) } } }), a("label", [e._v("From Time")])])]), a("div", [a("div", { staticClass: "md-form unique-textarea inline-block" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.datetime_to_date, expression: "datetime_to_date" }], staticClass: "form-control text-white pickDate", attrs: { type: "text", readonly: "", "data-field": "extra_datetime_to_value" }, domProps: { value: e.datetime_to_date }, on: { input: function (t) { t.target.composing || (e.datetime_to_date = t.target.value) } } }), a("label", [e._v("To Date")])]), a("div", { staticClass: "md-form unique-textarea inline-block" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.datetime_to_time, expression: "datetime_to_time" }], staticClass: "form-control text-white pickTime", attrs: { type: "text", readonly: "", "data-field": "extra_datetime_to_value" }, domProps: { value: e.datetime_to_time }, on: { input: function (t) { t.target.composing || (e.datetime_to_time = t.target.value) } } }), a("label", [e._v("To Time")])])]), a("div", [a("small", [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  If the input element has min and/or max attributes, those will have priority over this setting.")], 1)])]), a("hr")]) : e._e(), e.permissions.datetime_format ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Date & Time format:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_datetime_format_enabled, expression: "value.object.extra_datetime_format_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_datetime_format_enabled) ? e._i(e.value.object.extra_datetime_format_enabled, null) > -1 : e.value.object.extra_datetime_format_enabled }, on: { change: function (t) { var a = e.value.object.extra_datetime_format_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_datetime_format_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_datetime_format_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_datetime_format_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_datetime_format_enabled }, staticStyle: { height: "107px" } }, [a("div", { staticClass: "md-form unique-textarea" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_datetime_format_value, expression: "value.object.extra_datetime_format_value" }], staticClass: "form-control text-white", attrs: { type: "text", required: "" }, domProps: { value: e.value.object.extra_datetime_format_value }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_datetime_format_value", t.target.value) } } }), a("label", [e._v("Format  "), a("a", { staticClass: "text-dark-blue", attrs: { href: "https://momentjs.com/docs/#/displaying/format/", target: "_blank" } }, [a("font-awesome-icon", { attrs: { title: "See available formats", icon: ["fas", "question-circle"] } })], 1)])]), a("div", [a("small", [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  According to "), a("a", { staticClass: "text-white", attrs: { href: "https://www.w3.org/TR/html5/sec-forms.html#date-time-and-number-formats", target: "_blank" } }, [e._v("W3C standards")]), e._v(', <input type="(date|datetime-local|time|month)"> must always return the value in '), a("a", { staticClass: "text-white", attrs: { href: "https://en.wikipedia.org/wiki/ISO_8601", targe: "_blank", target: "_blank" } }, [e._v("ISO 8601")]), e._v(" format. Therefore, this option will be ignored for such fields.")], 1)])]), a("hr")]) : e._e(), e.permissions.number_range ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Number range:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_number_range_enabled, expression: "value.object.extra_number_range_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_number_range_enabled) ? e._i(e.value.object.extra_number_range_enabled, null) > -1 : e.value.object.extra_number_range_enabled }, on: { change: function (t) { var a = e.value.object.extra_number_range_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_number_range_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_number_range_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_number_range_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_number_range_enabled }, staticStyle: { height: "107px" } }, [a("div", [a("div", { staticClass: "md-form unique-textarea inline-block" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_number_range_min_value, expression: "value.object.extra_number_range_min_value" }], staticClass: "form-control text-white", attrs: { type: "number" }, domProps: { value: e.value.object.extra_number_range_min_value }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_number_range_min_value", t.target.value) } } }), a("label", [e._v("Min")])]), a("div", { staticClass: "md-form unique-textarea inline-block" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_number_range_max_value, expression: "value.object.extra_number_range_max_value" }], staticClass: "form-control text-white", attrs: { type: "number" }, domProps: { value: e.value.object.extra_number_range_max_value }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_number_range_max_value", t.target.value) } } }), a("label", [e._v("Max")])])]), a("div", [a("small", [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  If the input element has min and/or max attributes, those will have priority over this setting.")], 1)])]), a("hr")]) : e._e(), e.permissions.password_length ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Password length:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_password_length_enabled, expression: "value.object.extra_password_length_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_password_length_enabled) ? e._i(e.value.object.extra_password_length_enabled, null) > -1 : e.value.object.extra_password_length_enabled }, on: { change: function (t) { var a = e.value.object.extra_password_length_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_password_length_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_password_length_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_password_length_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_password_length_enabled }, staticStyle: { height: "47px" } }, [a("div", { staticClass: "md-form unique-textarea" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_password_length_value, expression: "value.object.extra_password_length_value" }], staticClass: "form-control text-white", attrs: { type: "number", min: "0", required: "" }, domProps: { value: e.value.object.extra_password_length_value }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_password_length_value", t.target.value) } } }), a("label", [e._v("Character length")])])]), a("hr")]) : e._e(), e.permissions.password_memorable ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Make password memorable:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_password_memorable_enabled, expression: "value.object.extra_password_memorable_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_password_memorable_enabled) ? e._i(e.value.object.extra_password_memorable_enabled, null) > -1 : e.value.object.extra_password_memorable_enabled }, on: { change: function (t) { var a = e.value.object.extra_password_memorable_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_password_memorable_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_password_memorable_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_password_memorable_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_password_memorable_enabled }, staticStyle: { height: "47px" } }, [a("div", { staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), a("input", { staticClass: "select-dropdown dropdown-toggle", attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: e.yes_no_null(e.value.object.extra_password_memorable_value) } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.value.object.extra_password_memorable_value = null } } }, [e._v("Use Global Setting (No)")]), a("div", { staticClass: "dropdown-divider" }), a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.value.object.extra_password_memorable_value = !0 } } }, [e._v("Yes (Generate memorable password)")]), a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.value.object.extra_password_memorable_value = !1 } } }, [e._v("No (Generate fully randomized password)")])])])]), a("hr")]) : e._e(), e.permissions.language_allowed ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Custom language:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Use global")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_custom_language_enabled, expression: "value.object.extra_custom_language_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_custom_language_enabled) ? e._i(e.value.object.extra_custom_language_enabled, null) > -1 : e.value.object.extra_custom_language_enabled }, on: { change: function (t) { var a = e.value.object.extra_custom_language_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_custom_language_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_custom_language_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_custom_language_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_custom_language_enabled }, staticStyle: { height: "47px" } }, [a("div", { staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), a("input", { staticClass: "select-dropdown dropdown-toggle", attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: e.selected_language } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.value.object.extra_custom_language = null } } }, [e._v("Use Global Setting")]), a("div", { staticClass: "dropdown-divider" }), e._l(e.root.languages, (function (t, s) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.value.object.extra_custom_language = s } } }, [e._v(e._s(t))]) }))], 2)])]), a("hr")]) : e._e(), e.show_cloud_place_field && !e.root.isUltraSubscriber() ? a("pro-required", { attrs: { "label-false": "Ultra Only", ultra_required: !0, root: e.root } }) : e._e(), e.show_cloud_place_field ? a("div", { staticClass: "position-relative unique-textarea", class: { pro_required: !e.root.isUltraSubscriber() } }, [a("label", [e._v("Fake Data Cloud Place:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", [a("span", [e._v("This is just a basic dropdown")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_select_cloud_place_enabled, expression: "value.object.extra_select_cloud_place_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_select_cloud_place_enabled) ? e._i(e.value.object.extra_select_cloud_place_enabled, null) > -1 : e.value.object.extra_select_cloud_place_enabled }, on: { change: function (t) { var a = e.value.object.extra_select_cloud_place_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_select_cloud_place_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_select_cloud_place_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_select_cloud_place_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" This dropdown is address-related (country, state, city) ")])]), a("div", { staticClass: "slider shit_fix", class: { closed: !e.value.object.extra_select_cloud_place_enabled }, staticStyle: { height: "47px" } }, [a("div", { staticClass: "md-form unique-textarea" }, [a("select", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_select_cloud_place_type, expression: "value.object.extra_select_cloud_place_type" }], staticClass: "mdb-select", on: { change: function (t) { var a = Array.prototype.filter.call(t.target.options, (function (e) { return e.selected })).map((function (e) { var t = "_value" in e ? e._value : e.value; return t })); e.$set(e.value.object, "extra_select_cloud_place_type", t.target.multiple ? a : a[0]) } } }, [a("option", { attrs: { value: "country" } }, [e._v("Country")]), a("option", { attrs: { value: "state" } }, [e._v("State / Province")]), a("option", { attrs: { value: "city" } }, [e._v("City")])]), a("label", [e._v("Type of Place")])])]), a("hr")]) : e._e(), e.permissions.callback_before ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Callback before insert:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Disabled")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_callback_before_enabled, expression: "value.object.extra_callback_before_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_callback_before_enabled) ? e._i(e.value.object.extra_callback_before_enabled, null) > -1 : e.value.object.extra_callback_before_enabled }, on: { change: function (t) { var a = e.value.object.extra_callback_before_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_callback_before_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_callback_before_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_callback_before_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "white-text slider custom_code_wrapper", class: { closed: !e.value.object.extra_callback_before_enabled } }, [e.root.isLicenseActive() && e.codemirror_enabled ? a("div", { staticClass: "position-relative" }, [a("codemirror", { ref: "codemirrorWrapper_callback_before", model: { value: e.value.object.extra_callback_before_code, callback: function (t) { e.$set(e.value.object, "extra_callback_before_code", t) }, expression: "value.object.extra_callback_before_code" } })], 1) : a("div", [a("div", { staticClass: "md-form unique-textarea active-unique-textarea" }, [a("font-awesome-icon", { class: ["prefix", "grey-text", "fs-25px"], attrs: { icon: ["fas", "code"] } }), a("textarea", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_callback_before_code, expression: "value.object.extra_callback_before_code" }], staticClass: "md-textarea text-white form-control code-textarea", attrs: { id: "callback_before", rows: "3" }, domProps: { value: e.value.object.extra_callback_before_code }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_callback_before_code", t.target.value) } } }), a("label", { attrs: { for: "callback_before" } }, [e._v("JavaScript code here")])], 1)])]), a("hr")]) : e._e(), e.permissions.callback_after ? a("div", { staticClass: "position-relative unique-textarea" }, [a("label", [e._v("Callback after insert:")]), a("div", { staticClass: "switch secondary-switch small" }, [a("label", ["Field" == e.value.type ? a("span", [e._v("Use from Generator")]) : a("span", [e._v("Disabled")]), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_callback_after_enabled, expression: "value.object.extra_callback_after_enabled" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.value.object.extra_callback_after_enabled) ? e._i(e.value.object.extra_callback_after_enabled, null) > -1 : e.value.object.extra_callback_after_enabled }, on: { change: function (t) { var a = e.value.object.extra_callback_after_enabled, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && e.$set(e.value.object, "extra_callback_after_enabled", a.concat([o])) : n > -1 && e.$set(e.value.object, "extra_callback_after_enabled", a.slice(0, n).concat(a.slice(n + 1))) } else e.$set(e.value.object, "extra_callback_after_enabled", i) } } }), a("span", { staticClass: "lever" }), e._v(" Use custom ")])]), a("div", { staticClass: "white-text slider custom_code_wrapper", class: { closed: !e.value.object.extra_callback_after_enabled } }, [e.root.isLicenseActive() && e.codemirror_enabled ? a("div", { staticClass: "position-relative" }, [a("codemirror", { ref: "codemirrorWrapper_callback_after", model: { value: e.value.object.extra_callback_after_code, callback: function (t) { e.$set(e.value.object, "extra_callback_after_code", t) }, expression: "value.object.extra_callback_after_code" } })], 1) : a("div", [a("div", { staticClass: "md-form unique-textarea active-unique-textarea" }, [a("font-awesome-icon", { class: ["prefix", "grey-text", "fs-25px"], attrs: { icon: ["fas", "code"] } }), a("textarea", { directives: [{ name: "model", rawName: "v-model", value: e.value.object.extra_callback_after_code, expression: "value.object.extra_callback_after_code" }], staticClass: "md-textarea text-white form-control code-textarea", attrs: { id: "callback_after", rows: "3" }, domProps: { value: e.value.object.extra_callback_after_code }, on: { input: function (t) { t.target.composing || e.$set(e.value.object, "extra_callback_after_code", t.target.value) } } }), a("label", { attrs: { for: "callback_after" } }, [e._v("JavaScript code here")])], 1)])])]) : e._e()], 1) : e._e() }, Et = [], jt = { components: { ProRequired: F }, name: "field_options_modal_content", props: ["value", "root", "field_options"], data() { return { language: "en_US", extra_fields: {}, extra_fields_callbacks: {}, custom_generators: [], codemirror_enabled: !0, field: null, datetime_from_date: "", datetime_from_time: "", datetime_to_date: "", datetime_to_time: "" } }, computed: { selected_language: function () { return null !== this.value.object.extra_custom_language ? this.root.languages[this.value.object.extra_custom_language] : "Use Global Setting - [" + this.root.languages[this.language] + "]" }, permissions: function () { return { language_allowed: this.root.fields.indexOf(this.value.object.generator) >= 0 && "number" != this.value.object.generator, password_length: "password" == this.value.object.generator, password_memorable: "password" == this.value.object.generator, phone_format: "phone" == this.value.object.generator, lorem_words_count: "words" == this.value.object.generator, lorem_paragraph_sentences: "paragraph" == this.value.object.generator, lorem_paragraphs_count: "text" == this.value.object.generator, datetime_format: "datetime" == this.value.object.generator, datetime_between: "datetime" == this.value.object.generator, number_range: "number" == this.value.object.generator, cloud_place: "option" == this.value.object.kind && this.field_options && "select" == this.field_options.inputType, callback_before: !0, callback_after: !0 } }, show_cloud_place_field: function () { return this.root.isLicenseActive() && this.permissions.cloud_place } }, mounted() { this.syncStorage() }, watch: { datetime_from_date: { immediate: !0, handler: function (e, t) { e ? this.updateDateTime() : this.datetime_from_time = "" } }, datetime_from_time: function () { this.updateDateTime() }, datetime_to_date: { immediate: !0, handler: function (e, t) { e ? this.updateDateTime() : this.datetime_to_time = "" } }, datetime_to_time: function () { this.updateDateTime() }, value: { deep: !0, immediate: !0, handler: function () { "undefined" == typeof this.value.object.extra_callback_before_enabled && this.$set(this.value.object, "extra_callback_before_enabled", !1), "undefined" == typeof this.value.object.extra_callback_before_code && this.$set(this.value.object, "extra_callback_before_code", ""), "undefined" == typeof this.value.object.extra_callback_after_enabled && this.$set(this.value.object, "extra_callback_after_enabled", !1), "undefined" == typeof this.value.object.extra_callback_after_code && this.$set(this.value.object, "extra_callback_after_code", ""), "undefined" == typeof this.value.object.extra_custom_language_enabled && this.$set(this.value.object, "extra_custom_language_enabled", !1), "undefined" == typeof this.value.object.extra_custom_language && this.$set(this.value.object, "extra_custom_language", null), "undefined" == typeof this.value.object.extra_password_length_enabled && this.$set(this.value.object, "extra_password_length_enabled", !1), "undefined" == typeof this.value.object.extra_password_length_value && this.$set(this.value.object, "extra_password_length_value", 15), "undefined" == typeof this.value.object.extra_password_memorable_enabled && this.$set(this.value.object, "extra_password_memorable_enabled", !1), "undefined" == typeof this.value.object.extra_password_memorable_value && this.$set(this.value.object, "extra_password_memorable_value", null), "undefined" == typeof this.value.object.extra_phone_format_enabled && this.$set(this.value.object, "extra_phone_format_enabled", !1), "undefined" == typeof this.value.object.extra_phone_format_value && this.$set(this.value.object, "extra_phone_format_value", "###-###-####"), "undefined" == typeof this.value.object.extra_lorem_words_count_enabled && this.$set(this.value.object, "extra_lorem_words_count_enabled", !1), "undefined" == typeof this.value.object.extra_lorem_words_count_value && this.$set(this.value.object, "extra_lorem_words_count_value", 3), "undefined" == typeof this.value.object.extra_lorem_paragraph_sentences_enabled && this.$set(this.value.object, "extra_lorem_paragraph_sentences_enabled", !1), "undefined" == typeof this.value.object.extra_lorem_paragraph_sentences_value && this.$set(this.value.object, "extra_lorem_paragraph_sentences_value", 3), "undefined" == typeof this.value.object.extra_lorem_paragraphs_count_enabled && this.$set(this.value.object, "extra_lorem_paragraphs_count_enabled", !1), "undefined" == typeof this.value.object.extra_lorem_paragraphs_count_value && this.$set(this.value.object, "extra_lorem_paragraphs_count_value", 3), "undefined" == typeof this.value.object.extra_datetime_format_enabled && this.$set(this.value.object, "extra_datetime_format_enabled", !1), "undefined" == typeof this.value.object.extra_datetime_format_value && this.$set(this.value.object, "extra_datetime_format_value", "YYYY-MM-DD HH:mm:ss"), "undefined" == typeof this.value.object.extra_datetime_between_enabled && this.$set(this.value.object, "extra_datetime_between_enabled", !1), "undefined" == typeof this.value.object.extra_datetime_from_value && this.$set(this.value.object, "extra_datetime_from_value", ""), "undefined" == typeof this.value.object.extra_datetime_to_value && this.$set(this.value.object, "extra_datetime_to_value", ""), "undefined" == typeof this.value.object.extra_number_range_enabled && this.$set(this.value.object, "extra_number_range_enabled", !1), "undefined" == typeof this.value.object.extra_number_range_min_value && this.$set(this.value.object, "extra_number_range_min_value", ""), "undefined" == typeof this.value.object.extra_number_range_max_value && this.$set(this.value.object, "extra_number_range_max_value", ""), "undefined" == typeof this.value.object.extra_select_cloud_place_enabled && this.$set(this.value.object, "extra_select_cloud_place_enabled", ""), "undefined" == typeof this.value.object.extra_select_cloud_place_type && this.$set(this.value.object, "extra_select_cloud_place_type", ""), this.resetEvents() } }, show_cloud_place_field: function () { this.$nextTick((function () { $.fn.materialSelect && ($("#add_new_field_modal select.mdb-select").materialSelect("destroy"), $("#add_new_field_modal select.mdb-select").materialSelect(function (e) { $("#add_new_field_modal select.mdb-select").parent().find(".select-dropdown").trigger("close"); var t = document.createEvent("HTMLEvents"); t.initEvent("change", !0, !1), $("#add_new_field_modal select.mdb-select").get(0).dispatchEvent(t) }.bind(this))) })) } }, methods: { syncStorage: function () { this.root.getStorageEngine().get({ language: "en_US", extra_fields: {}, extra_fields_callbacks: {}, custom_generators: [], codemirror_enabled: !0 }, function (e) { this.language = e.language, this.extra_fields = e.extra_fields, this.extra_fields_callbacks = e.extra_fields_callbacks, this.custom_generators = e.custom_generators, this.codemirror_enabled = e.codemirror_enabled, this.resetEvents() }.bind(this)) }, yes_no_null: function (e) { return { null: "Use Global Setting", true: "Yes", false: "No" }[e] }, resetEvents: function () { this.$nextTick((function () { var e = this; $(".pickDate").each((function () { $(this).data("pickadate") || ($(this).pickadate({ selectYears: 100, onSet: function () { var t = document.createEvent("HTMLEvents"); t.initEvent("input", !0, !1), this.dispatchEvent(t), e.root.resetInputLabels() }.bind(this) }), $(this).off("focus")); let t = new Date(e.value.object[$(this).attr("data-field")] || ""); isNaN(t.getTime()) ? $(this).data("pickadate").set("select", null) : $(this).data("pickadate").set("select", t) })), $(".pickTime").each((function () { $(this).data("clockpicker") || ($(this).pickatime({ darktheme: !0, twelvehour: !1, autoclose: !0, afterDone: function () { var t = document.createEvent("HTMLEvents"); t.initEvent("input", !0, !1), this.dispatchEvent(t), e.root.resetInputLabels() }.bind(this) }), $(this).off("focus")); var t = new Date(e.value.object[$(this).attr("data-field")] || ""); if (isNaN(t.getTime())) $(this).val(""); else { var a = t.getHours(), s = t.getMinutes(); a < 10 && (a = "0" + a), s < 10 && (s = "0" + s), $(this).val(a + ":" + s) } var i = document.createEvent("HTMLEvents"); i.initEvent("input", !0, !1), this.dispatchEvent(i) })), this.root.resetBsEvents() })) }, updateDateTime: function () { var e = this.datetime_from_date, t = this.datetime_from_time, a = this.datetime_to_date, s = this.datetime_to_time; e && !t && (t = "00:00"), a && !s && (s = "23:59"), t && !e && (e = this.root.unParseDate(new Date, !1)), s && !a && (a = this.root.unParseDate(new Date, !1)), this.value.object.extra_datetime_from_value = this.root.unParseDate(e + " " + t), this.value.object.extra_datetime_to_value = this.root.unParseDate(a + " " + s) } } }, Ot = jt, Pt = (a("bcfa"), Object(b["a"])(Ot, Dt, Et, !1, null, null, null)), Mt = Pt.exports, Tt = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade", attrs: { id: "update_selector_modal", tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-dialog-centered modal-md", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [a("form", { on: { submit: function (t) { return t.stopPropagation(), t.preventDefault(), e.updateSelector.apply(null, arguments) } } }, [e._m(0), a("div", { staticClass: "modal-body" }, [a("div", { staticClass: "md-form unique-textarea" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.selector, expression: "selector" }], staticClass: "form-control text-white", attrs: { type: "text", id: "selector" }, domProps: { value: e.selector }, on: { input: function (t) { t.target.composing || (e.selector = t.target.value) } } }), a("label", { attrs: { for: "selector" } }, [e._v("Element Selector")]), e.selector_status ? a("small", { class: [e.selector_status_class] }, [e._v(e._s(e.selector_status_text))]) : e._e()]), a("div", { staticClass: "unique-textarea form-check my-4 pl-0" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.selector_is_xpath, expression: "selector_is_xpath" }], staticClass: "filled-in form-check-input", attrs: { type: "checkbox", id: "selector_is_xpath" }, domProps: { checked: Array.isArray(e.selector_is_xpath) ? e._i(e.selector_is_xpath, null) > -1 : e.selector_is_xpath }, on: { change: function (t) { var a = e.selector_is_xpath, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && (e.selector_is_xpath = a.concat([o])) : n > -1 && (e.selector_is_xpath = a.slice(0, n).concat(a.slice(n + 1))) } else e.selector_is_xpath = i } } }), a("label", { staticClass: "form-check-label inline-block", attrs: { for: "selector_is_xpath" } }, [e._v("Evaluate selector as XPath")])])]), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md elegant-color", attrs: { disabled: e.selector == e.element_unique_selector, type: "button" }, on: { click: function (t) { return e.resetToOriginalSelector() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "redo"], size: "sm" } }), e._v(" Reset")], 1), a("span"), a("button", { staticClass: "btn btn-md btn-dark-green", attrs: { disabled: !e.selector || 1 == e.selector_status, type: "submit" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v(" Validate")], 1), a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v("  Close")], 1)])])])])]) }, Ut = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title w-100" }, [e._v("Update Selector")]), a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }], qt = { name: "FieldsManageModalEditSelector", props: ["original_selector", "tab_id", "frame_id", "root", "value", "callback", "element_unique_selector", "original_selector_is_xpath"], data() { return { selector: "", selector_status: 0, selector_is_xpath: !1 } }, computed: { selector_status_class: function () { switch (this.selector_status) { case 1: return "text-success"; case 2: return "text-danger" } }, selector_status_text: function () { switch (this.selector_status) { case 1: return "Validating..."; case 2: return "The new selector does not match the original element." } } }, mounted: function () { this.$nextTick((function () { $("#update_selector_modal").on("show.bs.modal", function () { setTimeout(function () { $(".modal-backdrop.fade.show:last").addClass("update_selector_modal_backdrop"), this.selector = this.original_selector, this.selector_is_xpath = !!this.original_selector_is_xpath, this.selector_status = 0, this.root.resetBsEvents() }.bind(this), 100) }.bind(this)), $("#update_selector_modal").on("hidden.bs.modal", (function () { $("body").addClass("modal-open") })) })) }, methods: { resetToOriginalSelector: function () { this.selector = this.element_unique_selector, this.selector_is_xpath = !!this.original_selector_is_xpath }, updateSelector: function () { this.selector_status = 1, setTimeout(function () { chrome.tabs.sendMessage(parseInt(this.tab_id), { type: "test_selector", original_selector: this.original_selector, new_selector: this.selector, selector_is_xpath: this.selector_is_xpath, element_id: this.$route.query.elementid }, { frameId: parseInt(this.frame_id) }, function (e) { e.valid ? ("function" == typeof this.callback && this.callback({ selector: this.selector, selector_is_xpath: this.selector_is_xpath }), $("#update_selector_modal").modal("hide")) : this.selector_status = 2 }.bind(this)) }.bind(this), 200) } } }, Lt = qt, Bt = (a("1d8e"), a("18b0"), Object(b["a"])(Lt, Tt, Ut, !1, null, null, null)), Nt = Bt.exports, Gt = { name: "FieldsManageModal", props: ["active_edit_field", "active_edit_field_extra_options", "root", "savecallback", "custom_generators", "active_tab", "active_edit_field_prioritise", "active_edit_field_pending"], components: { ProRequired: F, FieldOptionsModalContent: Mt, FieldsManageModalEditSelector: Nt }, data() { return { codemirror_enabled: !0, field: null, save_as_unnamed: !1, backup_field: null, backup_field_unnamed: null, custom_generator_labels: [], original_selector: null, conflicts: null, datasets: {}, named_fallback_unnamed: !1 } }, beforeMount() { "undefined" != typeof this.$route.query.backto && chrome.tabs.sendMessage(parseInt(this.$route.query.backto), { type: "find_conflicts", kind: this.$route.query.kind, original_selector: this.original_selector, element_id: this.$route.query.elementid }, { frameId: parseInt(this.$route.query.frameid) }, function (e) { if (e.found_conflicts && e.found_conflicts.length > 0) { for (var t = [], a = 0; a < e.found_conflicts.length; a++)e.found_conflicts[a].inputName != this.$route.query.data && t.push(e.found_conflicts[a]); t.length > 0 && (this.conflicts = t) } }.bind(this)) }, mounted() { this.syncStorage(), $("#add_new_field_modal").on("shown.bs.modal", function () { this.root.resetBsEvents() }.bind(this)), $(document).on("hide.bs.modal", "#add_new_field_modal, #active_edit_field_pending", function () { chrome.tabs.getCurrent(function (e) { if (this.$route.query.backto && !isNaN(this.$route.query.backto)) try { chrome.tabs.update(parseInt(this.$route.query.backto), { selected: !0 }) } catch (t) { chrome.tabs.update(parseInt(this.$route.query.backto), { active: !0 }) } chrome.tabs.remove(e.id, (function () { })) }.bind(this)) }.bind(this)), this.active_edit_field && $("#add_new_field_modal").modal("show"), this.active_edit_field_pending && $("#active_edit_field_pending").modal("show") }, computed: { saveBtnEnabled: function () { return -1 == this.root.fields.indexOf(this.active_edit_field.inputName) && ("option" != this.active_edit_field.kind && this.active_edit_field.generator || "option" == this.active_edit_field.kind && this.root.isLicenseActive()) } }, watch: { save_as_unnamed: function () { "named" == this.backup_field.kind && (this.save_as_unnamed ? (this.backup_field = Object.assign({}, this.active_edit_field), this.active_edit_field = Object.assign({}, this.backup_field_unnamed)) : (this.backup_field_unnamed = Object.assign({}, this.active_edit_field), this.active_edit_field = Object.assign({}, this.backup_field))) }, "active_edit_field_extra_options.selOption": { deep: !0, immediate: !0, handler: function () { this.$nextTick((function () { if ($("#manage_select_options").length) { if (("select" == this.active_edit_field_extra_options.inputType || "radio" == this.active_edit_field_extra_options.inputType) && this.active_edit_field_extra_options.selOption) for (var e = Object.values(this.active_edit_field_extra_options.selOption), t = 0; t < e.length; t++)if ("undefined" != typeof e[t].options) { for (var a = $("<optgroup>").attr("label", e[t].label), s = Object.values(e[t].options), i = 0; i < s.length; i++) { var o = ""; void 0 != s[i].text && "" != s[i].text.toString() ? o = s[i].text.trim() : void 0 != s[i].value && "" != s[i].value.toString() && (o = "[" + s[i].value + "]"); var n = $("<option>").val(s[i].value).text(o).prop("disabled", "true" == s[i].disabled); a.append(n) } this.active_edit_field_extra_options.isMultiSelect || $("#manage_select_options").append(a), $("#manage_excluded_options").append(a.clone()) } else { o = ""; void 0 != e[t].text && "" != e[t].text.toString() ? o = e[t].text.trim() : void 0 != e[t].value && "" != e[t].value.toString() && (o = "[" + e[t].value + "]"); n = $("<option>").val(e[t].value).text(o).prop("disabled", "true" == e[t].disabled); this.active_edit_field_extra_options.isMultiSelect || $("#manage_select_options").append(n), $("#manage_excluded_options").append(n.clone()) } this.$nextTick((function () { $.fn.materialSelect && ($("#manage_select_options").materialSelect(function (e) { $("#manage_select_options").parent().find(".select-dropdown").trigger("close"); var t = document.createEvent("HTMLEvents"); t.initEvent("change", !0, !1), $("#manage_select_options").get(0).dispatchEvent(t) }.bind(this)), $("#manage_excluded_options").materialSelect(), $(".manage_excluded_options_container li.disabled:first-child").off("click")) })) } })) } }, "active_edit_field.optionValue": { immediate: !0, handler: function () { this.$nextTick((function () { this.active_edit_field && "option" == this.active_edit_field.kind && (this.active_edit_field.optionLabel = !1 === this.active_edit_field.optionValue || !0 === this.active_edit_field.optionValue ? null : $("#manage_select_options").find(":selected").text(), setTimeout(function () { $("#manage_select_options").materialSelect("destroy"), $("#manage_select_options").materialSelect(function (e) { $("#manage_select_options").parent().find(".select-dropdown").trigger("close"); var t = document.createEvent("HTMLEvents"); t.initEvent("change", !0, !1), $("#manage_select_options").get(0).dispatchEvent(t) }.bind(this)), $("#manage_excluded_options").materialSelect("destroy"), $("#manage_excluded_options").materialSelect(), $(".manage_excluded_options_container li.disabled:first-child").get(0).addEventListener("click", function () { $(".manage_excluded_options_container [type=checkbox]:checked").each((function () { let e = $(this).closest("li"); e.hasClass("select-toggle-all") || e.click() })), $(".modal-title").click() }.bind(this), !0), this.active_edit_field.optionLabel = !1 === this.active_edit_field.optionValue || !0 === this.active_edit_field.optionValue ? null : $("#manage_select_options").find(":selected").text() }.bind(this), 200)) })) } }, active_edit_field: { deep: !0, immediate: !0, handler: function () { this.active_edit_field && (this.field = { type: "Field", subtype: this.active_edit_field.kind.charAt(0).toUpperCase() + this.active_edit_field.kind.slice(1), id: this.active_edit_field.inputName, object: this.active_edit_field, onsave: this.saveOptionsModal }, null === this.backup_field && (this.backup_field = $.extend(!0, {}, this.active_edit_field)), null == this.backup_field_unnamed && "undefined" != typeof this.active_edit_field.unnamed_version && (this.backup_field_unnamed = $.extend(!0, {}, this.active_edit_field.unnamed_version), Us.delete(this.active_edit_field, "unnamed_version"), Us.delete(this.backup_field, "unnamed_version"), "named" == this.active_edit_field.kind && "unnamed" == this.active_edit_field_prioritise && (this.save_as_unnamed = !0)), null === this.original_selector && (this.original_selector = this.active_edit_field.selector)) } } }, methods: { syncStorage: function () { this.root.getStorageEngine().get({ language: "en_US", codemirror_enabled: !0, custom_generators: [], datasets: {}, named_fallback_unnamed: !1 }, function (e) { this.language = e.language, this.codemirror_enabled = e.codemirror_enabled, this.datasets = e.datasets, this.named_fallback_unnamed = e.named_fallback_unnamed, this.custom_generator_labels = e.custom_generators.map((function (e) { return e.label })), this.root.resetBsEvents() }.bind(this)) }, chooseGenerator: function (e) { this.active_edit_field.generator = e }, saveField: function () { var e = Object.assign({}, this.field.object); Object.assign(this.active_edit_field, e); var t = {}; this.backup_field_unnamed && ("unnamed" != this.active_edit_field_prioritise || this.save_as_unnamed ? this.save_as_unnamed && this.original_selector != this.active_edit_field.selector && (t.delete = this.backup_field_unnamed.inputName) : t.delete = this.backup_field_unnamed.inputName), this.savecallback(this.active_edit_field, this.active_edit_field_extra_options, t) }, generatePreview: function (e, t, a) { "custom" == this.active_edit_field.generator ? chrome.runtime.sendMessage({ type: "run_callback", callback: this.active_edit_field.custom_callback, overwrite_field_settings: Object.assign({}, this.active_edit_field, this.field.object), field: this.active_edit_field }, function (e) { this.parseGeneratedPreviewCallback(e, a) }.bind(this)) : chrome.runtime.sendMessage({ type: "get_faker_original_callback", generator: this.active_edit_field.generator, overwrite_field_settings: Object.assign({}, this.active_edit_field, this.field.object) }, function (e) { this.parseGeneratedPreviewCallback(e, a) }.bind(this)) }, parseGeneratedPreviewCallback: function (e, t) { if (e) if ("error" != e.type) { var a; if ("string" == typeof e.callback_before && e.callback_before) if (3 == this.root.getManifestVersion()) a = this.root.evalMV3CodeInSandbox(e.callback_before); else { var s = new Function(e.callback_before); a = s(null) } a && a.then || (a = new Promise((function (e) { e() }))), a.then(function () { var s = e.text || ""; if ("object" === e.text_type) { var i = JSON.parse(e.text, this.root.functionReviver); if (null !== i && i.constructor === Array && "function" === typeof i[0]) { var o = new Function("return " + i[0])(); i[0] = null, s = o.apply(this, i) } else s = JSON.stringify(i, this.root.functionReplacer) } else if ("function" === e.text_type) { o = new Function("return " + e.text)(); s = o.apply(this, [null]) } if ("object" != typeof s || s.constructor != Promise) { var n = s; s = new Promise((function (e) { e(n) })) } s.then(function (s) { if (this.showGeneratedPreview(s || "", t.target), "string" == typeof e.callback_after && e.callback_after) if (3 == this.root.getManifestVersion()) a = this.root.evalMV3CodeInSandbox(e.callback_after); else { var i = new Function(e.callback_after); a = i(null) } }.bind(this)) }.bind(this)) } else this.showPreviewError(e.result || "Error", t.target); else this.showPreviewError("Failed to run", t.target) }, showGeneratedPreview: function (e, t) { "" != e.toString() && $(t).closest(".preview_buttons_innder").find(".preview_label").removeClass("red-text").addClass("text-white").find(".preview_label_text").text(e) }, showPreviewError: function (e, t) { $(t).closest(".preview_buttons_innder").find(".preview_label").removeClass("text-white").addClass("red-text").find(".preview_label_text").text(e.name || "Error") }, openUpdateSelectorModal: function () { $("#update_selector_modal").modal("show") }, selectorUpdated: function (e) { this.active_edit_field.selector = e.selector, this.active_edit_field.selector_is_xpath = e.selector_is_xpath, this.active_edit_field.inputName = this.active_edit_field.url + "@" + this.active_edit_field.selector, this.$parent.load_active_edit_field(this.active_edit_field) }, removeConflictField: function (e) { if ($(".tooltip").remove(), confirm("Are you sure you want to delete this Unnamed Field?")) for (var t = 0; t < this.conflicts.length; t++)e == this.conflicts[t] && (this.conflicts.splice(t, 1), this.$parent.removeField(e.inputName, !0), this.$parent.saveChanges(null, !1)) }, editConflictField: function (e) { $(".tooltip, .modal-backdrop").remove(); var t = Object.assign({}, this.$route.query); t.data = e.url + "@" + e.selector, t.kind = e.kind, t.selector = e.selector, t.url = e.url, this.$router.push({ path: "/fields/" + e.kind, query: t }), this.$parent.load_active_edit_field(e) }, jumpToPage: function (e) { $("#add_new_field_modal:visible").length && $(document).off("hide.bs.modal", "#add_new_field_modal, #active_edit_field_pending"), $(".modal:visible").modal("hide"), $(".modal-backdrop").remove(), this.$nextTick(function () { this.$router.push({ path: e }) }.bind(this)) } } }, It = Gt, zt = (a("0651"), Object(b["a"])(It, At, Ft, !1, null, null, null)), Rt = zt.exports, Vt = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade generator-options-modal", attrs: { id: "field_options_modal", tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [a("form", { on: { submit: function (t) { return t.stopPropagation(), t.preventDefault(), e.saveField.apply(null, arguments) } } }, [a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title" }, [e._v("Overwrite extra options "), e.root.isLicenseActive() ? e._e() : a("pro-required", { attrs: { "label-false": "Pro Only", root: e.root } })], 1), e._m(0)]), e.value ? a("div", { staticClass: "modal-body", class: { pro_required: !e.root.isLicenseActive() } }, [a("div", { staticClass: "md-form unique-textarea" }, [a("span", { staticClass: "form-control field_name text-white" }, [e._v(e._s(e.value.id))]), a("label", { staticClass: "active" }, [e._v(e._s(e.value.subtype) + " " + e._s(e.value.type) + " identifier")])]), "Field" == e.value.type && "Option" != e.value.subtype ? a("div", [a("br"), a("div", { staticClass: "position-relative unique-textarea" }, [a("div", { staticClass: "dropdown select-wrapper mdb-select colorful-select dropdown-dark" }, [a("span", { staticClass: "caret" }, [e._v("▼")]), a("input", { staticClass: "select-dropdown dropdown-toggle", attrs: { type: "text", "data-toggle": "dropdown", readonly: "true" }, domProps: { value: e.selected_generator } }), a("div", { staticClass: "dropdown-menu dropdown-dark w-100" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.value.object.generator = "custom" } } }, [e._v("Custom Code")]), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Default Generators")]), e._l(e.root.fields, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.value.object.generator = t } } }, [e._v(e._s(t))]) })), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Custom Generators")]), e._l(e.custom_generators, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.value.object.generator = t.label } } }, [e._v(e._s(t.label))]) }))], 2)]), a("label", [e._v("Generator:")])])]) : e._e(), a("hr"), a("br"), a("field-options-modal-content", { attrs: { root: e.root }, model: { value: e.value, callback: function (t) { e.value = t }, expression: "value" } })], 1) : e._e(), a("div", { staticClass: "modal-footer" }, [e.root.isLicenseActive() ? a("button", { staticClass: "btn btn-md btn-dark-green", attrs: { type: "submit" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v(" Done")], 1) : e._e(), a("button", { staticClass: "btn btn-md btn-unique", attrs: { type: "button", "data-dismiss": "modal" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Close")], 1)])])])])]) }, Yt = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("button", { staticClass: "close", attrs: { type: "button", "data-dismiss": "modal", "aria-label": "Close" } }, [a("span", { staticClass: "text-white", attrs: { "aria-hidden": "true" } }, [e._v("×")])]) }], Wt = { components: { ProRequired: F, FieldOptionsModalContent: Mt }, name: "GeneratorOptionsModal", props: ["value", "root"], data() { return { custom_generators: [], codemirror_enabled: !0, field: null } }, mounted() { this.syncStorage(), $("#field_options_modal").on("shown.bs.modal", function () { this.root.resetBsEvents() }.bind(this)) }, computed: { selected_generator: function () { return "custom" != this.value.object.generator ? this.value.object.generator : "Custom Code" } }, watch: { value: function () { this.root.resetBsEvents() }, "value.object.generator": function () { this.root.resetBsEvents() } }, methods: { syncStorage: function () { this.root.getStorageEngine().get({ custom_generators: [], codemirror_enabled: !0 }, function (e) { this.custom_generators = e.custom_generators, this.codemirror_enabled = e.codemirror_enabled }.bind(this)) }, saveField: function () { "function" == typeof this.value.onsave && this.value.onsave(this.value) } } }, Kt = Wt, Ht = (a("3314"), Object(b["a"])(Kt, Vt, Yt, !1, null, null, null)), Jt = Ht.exports, Qt = { name: "Fields", components: { FieldsUnnamedRegexModal: St, FieldsManageModal: Rt, GeneratorOptionsModal: Jt, ProRequired: F }, data: function () { return { extra_fields: {}, extra_fields_callbacks: {}, custom_generators: [], initial_values: {}, any_changes: !1, loading_fields: !0, active_tab: this.$route.params.kind || null, datasets: {}, codemirror_enabled: null, active_edit_field: null, active_edit_field_pending: this.$route.query.wait_id ? { wait_id: this.$route.query.wait_id, custom_element_selector: this.$route.query.custom_element_selector } : null, active_edit_field_extra_options: null, active_edit_field_prioritise: null, regex: { field: null }, search_field_named: "", search_field_unnamed: "", search_field_option: "", perpage_current: 0, perpage_increment: 20, has_more_items: !0, optionsField: null } }, props: ["root"], watch: { $route: function () { this.active_tab = this.$route.params.kind || null }, active_tab: { immediate: !0, handler: function () { this.active_tab ? (this.perpage_current = this.perpage_increment, this.root.resetBsEvents()) : this.changeTab("named") } }, extra_fields: { deep: !0, handler: function () { this.any_changes = this.checkForChanges() } }, extra_fields_callbacks: { deep: !0, handler: function () { this.any_changes = this.checkForChanges() } }, search_field_named: function () { this.perpage_current = this.perpage_increment }, search_field_unnamed: function () { this.perpage_current = this.perpage_increment }, search_field_option: function () { this.perpage_current = this.perpage_increment } }, computed: { active_extra_fields_named: function () { var e = {}, t = !1, a = !1; if ("named" == this.active_tab) { var s = 0; for (var i in this.extra_fields) if ("string" == typeof this.extra_fields[i] || "object" == typeof this.extra_fields[i] && "named" == this.extra_fields[i].kind) { if ("" != this.search_field_named && i.toLowerCase().replace(/[^a-zA-Z0-9]/g, "").indexOf(this.search_field_named.toLowerCase().replace(/[^a-zA-Z0-9]/g, "")) < 0) continue; if (t) { a = !0; break } e[i] = this.extra_fields[i], ++s >= this.perpage_current - 1 && (t = !0) } this.has_more_items = a, this.root.resetBsEvents() } return e }, active_extra_fields_unnamed: function () { var e = {}, t = !1, a = !1; if ("unnamed" == this.active_tab) { var s = 0; for (var i in this.extra_fields) if ("object" == typeof this.extra_fields[i] && "unnamed" == this.extra_fields[i].kind) { if ("" != this.search_field_unnamed && i.toLowerCase().replace(/[^a-zA-Z0-9]/g, "").indexOf(this.search_field_unnamed.toLowerCase().replace(/[^a-zA-Z0-9]/g, "")) < 0) continue; if (t) { a = !0; break } e[i] = this.extra_fields[i], ++s >= this.perpage_current - 1 && (t = !0) } this.has_more_items = a, this.root.resetBsEvents() } return e }, active_extra_fields_option: function () { var e = {}, t = !1, a = !1; if ("option" == this.active_tab) { var s = 0; for (var i in this.extra_fields) if ("object" == typeof this.extra_fields[i] && "option" == this.extra_fields[i].kind) { if ("" != this.search_field_option && i.toLowerCase().replace(/[^a-zA-Z0-9]/g, "").indexOf(this.search_field_option.toLowerCase().replace(/[^a-zA-Z0-9]/g, "")) < 0) continue; if (t) { a = !0; break } e[i] = this.extra_fields[i], ++s >= this.perpage_current - 1 && (t = !0) } this.has_more_items = a, this.root.resetBsEvents() } return e }, extra_fields_len: function () { return Object.keys(this.extra_fields).length } }, mounted: function () { this.root.currentView = this, this.setActiveEditFieldFromRoute(), this.syncStorage() }, methods: { setActiveEditFieldFromRoute: function () { this.active_edit_field = this.$route.query.data ? { inputName: this.$route.query.data, kind: this.$route.query.kind, generator: null, custom_callback: "", regex_enabled: !1, regex_expr: null, url: this.$route.query.url, selector: this.$route.query.selector, original_selector: this.$route.query.original_selector, optionValue: null, optionLabel: null, excluded_options: [] } : null, this.active_edit_field_extra_options = { regex_enabled: !1, inputType: this.$route.query.inputType || null, selOption: this.$route.query.selOption || null, isMultiSelect: "true" == this.$route.query.isMultiSelect || !1 } }, syncStorage: function () { this.root.getStorageEngine().get({ extra_fields: {}, extra_fields_callbacks: {}, custom_generators: [], codemirror_enabled: !0, datasets: {} }, function (e) { if (e) { for (var t in this.codemirror_enabled = e.codemirror_enabled, this.datasets = e.datasets, e.extra_fields) { if ("string" == typeof e.extra_fields[t]) e.extra_fields[t] = { generator: e.extra_fields[t], kind: "named" }; else if ("unnamed" == e.extra_fields[t].kind) { if ("undefined" == typeof e.extra_fields[t].url || "undefined" == typeof e.extra_fields[t].selector) { var a = t.split("@"); "undefined" == typeof e.extra_fields[t].url && (e.extra_fields[t].url = a[0]), delete a[0], "undefined" == typeof e.extra_fields[t].selector && (e.extra_fields[t].selector = Object.values(a).join("@")) } "undefined" == typeof e.extra_fields[t].regex_enabled && (e.extra_fields[t].regex_enabled = !1) } this.extra_fields_callbacks[t] = e.extra_fields_callbacks[t] || "" } for (var t in this.extra_fields = e.extra_fields, this.extra_fields_callbacks = e.extra_fields_callbacks, this.custom_generators = e.custom_generators, this.initial_values.extra_fields = Object.assign({}, this.extra_fields), this.initial_values.extra_fields_callbacks = Object.assign({}, this.extra_fields_callbacks), this.extra_fields) "object" == typeof this.extra_fields[t] && (this.initial_values.extra_fields[t] = Object.assign({}, this.extra_fields[t])) } else toastr.error("Load Error: " + (chrome.runtime.lastError || "FD - Unknown error occurred"), !1, { closeButton: !0, timeOut: 5e3 }); this.load_active_edit_field(), this.loading_fields = !1, this.root.resetBsEvents() }.bind(this)) }, removeField: function (e, t) { (t || confirm("Remove this extra field?")) && (Us.delete(this.extra_fields, e), Us.delete(this.extra_fields_callbacks, e)) }, checkForChanges: function () { return JSON.stringify([this.extra_fields_callbacks, this.extra_fields]) != JSON.stringify([this.initial_values.extra_fields_callbacks, this.initial_values.extra_fields]) }, saveChanges: function (e, t = !0) { for (var a in this.root.getStorageEngine().set(this.root.normalizeVueObject({ extra_fields: this.extra_fields, extra_fields_callbacks: this.extra_fields_callbacks }), (function () { chrome.runtime.sendMessage({ type: "refresh_data" }), "function" == typeof e && e() })), this.initial_values.extra_fields = Object.assign({}, this.extra_fields), this.initial_values.extra_fields_callbacks = Object.assign({}, this.extra_fields_callbacks), this.extra_fields) "object" == typeof this.extra_fields[a] && (this.initial_values.extra_fields[a] = Object.assign({}, this.extra_fields[a])); this.$nextTick((function () { this.any_changes = !1, t && toastr.success("Fields saved!", !1, { closeButton: !0, timeOut: 1e3 }) })) }, cancelChanges: function () { if (confirm("Are you sure you want to discard all changes?")) { for (var e in this.extra_fields = Object.assign({}, this.initial_values.extra_fields), this.extra_fields_callbacks = Object.assign({}, this.initial_values.extra_fields_callbacks), this.initial_values.extra_fields) "object" == typeof this.initial_values.extra_fields[e] && (this.extra_fields[e] = Object.assign({}, this.initial_values.extra_fields[e])); this.$nextTick((function () { this.any_changes = !1, this.root.resetBsEvents() })) } }, changeTab: function (e) { this.active_tab = e, this.$router.push({ path: "/fields/" + e }) }, showHelpModal: function () { $("#fields_help_modal").modal("show") }, saveNewField: function (e, t, a) { e && (this.extra_fields[e.inputName] = Object.assign({}, e), this.extra_fields[e.inputName].regex_enabled = e.regex_enabled && t.regex_enabled, this.extra_fields[e.inputName].regex_expr = t.regex_enabled ? e.regex_expr : null, "custom" == e.generator && (this.extra_fields_callbacks[e.inputName] = e.custom_callback), a && "undefined" != typeof a.delete && this.removeField(a.delete, !0)), this.saveChanges(function () { $("#add_new_field_modal").modal("hide") }.bind(this)) }, editLinkAsRegex: function (e) { this.regex.field = null, this.regex.field = e, $("#regex_field_modal").modal("show") }, saveRegexEditing: function (e) { this.extra_fields = e }, removeRegexSetting: function (e) { e.regex_enabled = !1, e.regex_expr = null, this.$nextTick((function () { $(".tooltip").remove() })) }, hasMatchingRegexField: function (e, t) { var a; for (var s in this.extra_fields) if ("unnamed" == this.extra_fields[s].kind && this.extra_fields[s].regex_enabled && this.extra_fields[s].regex_expr) { a = null; try { a = new RegExp(this.extra_fields[s].regex_expr, "i").exec(e.url) } catch (i) { } if (a && a[0] == e.url && (!t && e.selector == this.extra_fields[s].selector || t)) return this.extra_fields[s] } return !1 }, openOptionsModal: function (e, t) { this.optionsField = { type: "Field", subtype: t.kind.charAt(0).toUpperCase() + t.kind.slice(1), id: e, object: Object.assign({}, t), onsave: this.saveOptionsModal }, this.$nextTick((function () { $("#field_options_modal").modal("show") })) }, saveOptionsModal: function (e) { this.extra_fields[e.id] = Object.assign({}, e.object), $("#field_options_modal").modal("hide") }, loadMoreEntries: function () { this.$nextTick((function () { this.perpage_current += this.perpage_increment })) }, generatePreview: function (e, t, a) { "custom" == t.generator ? chrome.runtime.sendMessage({ type: "run_callback", field_name: e, callback: this.extra_fields_callbacks[e], overwrite_field_settings: Object.assign({}, t), field: t }, function (e) { this.parseGeneratedPreviewCallback(e, a) }.bind(this)) : chrome.runtime.sendMessage({ type: "get_faker_original_callback", field_name: e, generator: t.generator, overwrite_field_settings: Object.assign({}, t) }, function (e) { this.parseGeneratedPreviewCallback(e, a) }.bind(this)) }, parseGeneratedPreviewCallback: function (e, t) { if (e) if ("error" != e.type) { var a; if ("string" == typeof e.callback_before && e.callback_before) if (3 == this.root.getManifestVersion()) a = this.root.evalMV3CodeInSandbox(e.callback_before); else { var s = new Function(e.callback_before); a = s(null) } a && a.then || (a = new Promise((function (e) { e() }))), a.then(function () { var a = e.text || ""; if ("object" === e.text_type) { var s = JSON.parse(e.text, this.root.functionReviver); if (null !== s && s.constructor === Array && "function" === typeof s[0]) { var i = new Function("return " + s[0])(); s[0] = null, a = i.apply(this, s) } else a = JSON.stringify(s, this.root.functionReplacer) } else if ("function" === e.text_type) { i = new Function("return " + e.text)(); a = i.apply(this, [null]) } if ("object" != typeof a || a.constructor != Promise) { var o = a; a = new Promise((function (e) { e(o) })) } a.then(function (a) { if (this.showGeneratedPreview(a || "", t.target), "string" == typeof e.callback_after && e.callback_after) if (3 == this.root.getManifestVersion()) this.root.evalMV3CodeInSandbox(e.callback_after); else { var s = new Function(e.callback_after); s(null) } }.bind(this)) }.bind(this)) } else this.showPreviewError(e.result || "Error", t.target); else this.showPreviewError("Failed to run", t.target) }, showGeneratedPreview: function (e, t) { "" != e.toString() && $(t).closest(".card-footer").find(".preview_label").removeClass("red-text").addClass("text-white").find(".preview_label_text").text(e) }, showPreviewError: function (e, t) { $(t).closest(".card-footer").find(".preview_label").removeClass("text-white").addClass("red-text").find(".preview_label_text").text(e.name || "Error") }, load_active_edit_field: function (e) { if ("undefined" !== typeof e && (this.active_edit_field = e), this.active_edit_field) { var t = this.active_edit_field.url, a = this.active_edit_field.kind, s = this.active_edit_field.selector; if ("undefined" != typeof this.extra_fields[this.active_edit_field.inputName]) "object" == typeof this.extra_fields[this.active_edit_field.inputName] ? (this.active_edit_field = Object.assign({}, this.active_edit_field, this.extra_fields[this.active_edit_field.inputName]), this.active_edit_field.kind = a) : this.active_edit_field.generator = this.extra_fields[this.active_edit_field.inputName]; else { var i = this.hasMatchingRegexField(this.active_edit_field), o = !0; i || (i = this.hasMatchingRegexField(this.active_edit_field, !0), o = !1), i && (this.active_edit_field.generator = o ? i.generator : this.active_edit_field.generator, this.active_edit_field.regex_enabled = i.regex_enabled, this.active_edit_field.regex_expr = i.regex_expr, this.active_edit_field.url = o ? i.url : this.active_edit_field.url, this.active_edit_field.selector = o ? i.selector : this.active_edit_field.selector) } var n = this.active_edit_field.kind; if ("named" == this.active_edit_field.kind) { var r = null; "object" == typeof this.extra_fields[t + "@" + s] ? (r = Object.assign({}, this.extra_fields[t + "@" + s]), n = "unnamed") : (r = Object.assign({}, this.active_edit_field), r.kind = "unnamed", r.url = t, r.inputName = t + "@" + s, r.selector = s); var l = Object.assign({}, this.active_edit_field); l.unnamed_version = r, this.active_edit_field = l, this.active_edit_field_prioritise = n } "option" != this.active_edit_field.kind || "select" != this.active_edit_field_extra_options.inputType || this.active_edit_field.excluded_options || (this.active_edit_field.excluded_options = []), this.active_edit_field_extra_options.regex_enabled = this.active_edit_field.regex_enabled || r && r.regex_enabled || !1, "undefined" != typeof this.extra_fields_callbacks[this.active_edit_field.inputName] && (this.active_edit_field.custom_callback = this.extra_fields_callbacks[this.active_edit_field.inputName]) } } } }, Zt = Qt, Xt = (a("529e"), Object(b["a"])(Zt, bt, wt, !1, null, null, null)), ea = Xt.exports, ta = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "page-howto" }, [a("div", { staticClass: "card text-white keyboard_shortcuts" }, [a("div", { staticClass: "card-header elegant-color-dark" }, [a("span", { staticClass: "card-header-title" }, [e._v(" Keyboard + Mouse Shortcuts ")]), a("router-link", { staticClass: "btn grey darken-3 btn-flat btn-sm waves-effect waves-effect pull-right", attrs: { to: "/settings/keyboard" } }, [e._v("Change shortcuts")])], 1), a("div", { staticClass: "card-body white-text rounded-bottom grey darken-3" }, [a("div", { staticClass: "position-relative" }, [a("label", { staticClass: "setting_label" }, [e._v("Insert data in a single field:")]), a("kbd", { staticClass: "display-block" }, [e._v(e._s(e.printKeyboardShortcut()))])]), a("div", { staticClass: "position-relative" }, [a("label", { staticClass: "setting_label", staticStyle: { "margin-top": "15px" } }, [e._v("Fill entire form:")]), a("kbd", { staticClass: "display-block" }, [e._v(e._s(e.printKeyboardShortcutForEntireForm()))])])])]), a("ul", { staticClass: "nav md-tabs nav-justified elegant-color-dark" }, [a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/rtfm/basic", "active-class": "active" } }, [e._v("Basic Usage")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/rtfm/advanced", "active-class": "active" } }, [e._v("Advanced Usage")])], 1)]), a("div", { staticClass: "tab-content grey darken-3 card" }, [a("div", { staticClass: "tab-pane in", class: { active: "basic" == e.active_tab }, attrs: { id: "tab_basic", role: "tabpanel" } }, [a("div", { staticClass: "mb-4 mt-3" }, [a("div", { staticClass: "switch secondary-switch pull-right" }, [a("label", [e._v(" Full lecture "), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.basic_tldr, expression: "basic_tldr" }], attrs: { type: "checkbox" }, domProps: { checked: Array.isArray(e.basic_tldr) ? e._i(e.basic_tldr, null) > -1 : e.basic_tldr }, on: { change: function (t) { var a = e.basic_tldr, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && (e.basic_tldr = a.concat([o])) : n > -1 && (e.basic_tldr = a.slice(0, n).concat(a.slice(n + 1))) } else e.basic_tldr = i } } }), a("span", { staticClass: "lever" }), e._v(" TL;DR ")])]), a("div", { staticClass: "clearfix" })]), a("div", { class: { hidden: !e.basic_tldr } }, [e._m(0), e._m(1), a("p", [e._v("You only have to do this once because next time Fake Data will remember your option when you will try to fill the entire form with "), a("mark", { staticClass: "kbd" }, [e._v(e._s(e.printKeyboardShortcutForEntireForm().replace(" + Double Click", "")) + " + double click")]), e._v(" shortcut.")])]), a("div", { class: { hidden: e.basic_tldr } }, [e._m(2), a("p", [e._v("But since you are already here, you might also want some answers too, so let's start.")]), a("p", { staticClass: "h5 text-white", attrs: { id: "rtfmb1" } }, [e._v("1. Inputs and forms can be filled on the fly with just a keyboard shortcut")]), a("p", [e._v("To insert some fake data in a certain input field, hold down "), a("mark", { staticClass: "kbd" }, [e._v(e._s(e.printKeyboardShortcut().replace(" + Double Click", "")))]), e._v(" button" + e._s(e.keyboard_shortcut && e.keyboard_shortcut.keyboard.length > 1 ? "s" : "") + " on your keyboard "), a("mark", { staticClass: "kbd" }, [e._v("and double click")]), e._v(" the field. Simple as that!")]), a("p", [e._v("You can also fill entire forms at once with exactly the same ease as you would do with a single field. To do that, hold "), a("mark", { staticClass: "kbd" }, [e._v(e._s(e.printKeyboardShortcutForEntireForm().replace(" + Double Click", "")))]), e._v(" button" + e._s(e.keyboard_shortcut_entire_form && e.keyboard_shortcut_entire_form.keyboard.length > 1 ? "s" : "") + " "), a("mark", { staticClass: "kbd" }, [e._v("and double click")]), e._v(" any input field in the form you want to fill. "), a("strong", [e._v("Awesome")]), e._v(", isn't it?")]), e._m(3), a("p", { staticClass: "h5 text-white", attrs: { id: "rtfmb2" } }, [e._v("2. Train Fake Data so it will know next time")]), e._m(4), e._m(5), e._m(6), e._m(7), a("p", [e._v("You can also use this method if you want to change the data that is inserted in the field. For example, if you previously selected first name option for a field and now you want to insert last names.")])])]), a("div", { staticClass: "tab-pane in", class: { active: "advanced" == e.active_tab }, attrs: { id: "tab_advanced", role: "tabpanel" } }, [a("p", [e._v("So you think you are tough and want to use Fake Data at it's full potential? Good! People like you are needed here!")]), e._m(8), a("p", { staticClass: "h5 text-white" }, [e._v("1. The two main components of Fake Data")]), a("p", [e._v("You might have noticed, at least in the menu, the Generators and the Fields. These two elements are what you have to master in order to be cool. The good news is that it's nothing hard.")]), a("p", { staticClass: "h5 text-white" }, [e._v("1.1 Generators")]), a("p", [e._v("If you followed the instructions from the Basic tutorial, you already know that under Fake Data context menu there are a bunch of options from which you can choose to insert data into an input field. Over these places, those are called Generators.")]), a("p", { staticClass: "h5 text-white" }, [e._v("1.1.1 Default Generators")]), a("p", [e._v("By default, you have "), a("mark", { attrs: { title: e.root.fields.join(", ") } }, [e._v(e._s(e.root.fields.length) + " Generators")]), e._v(" to play with. These cannot be renamed or deleted, but they can be customized in a lot of ways:")]), e._m(9), a("p", [e._v("In order to access the customizations we talked about, click on the three-dotted button that is on the right side of the title bar of the Generator. It should look like this: "), a("button", { staticClass: "btn elegant-color-dark btn-sm extra_options_btn" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "ellipsis-v"] } })], 1)]), e._m(10), e._m(11), a("p", { staticClass: "h5 text-white" }, [e._v("1.1.2 Custom Generators")]), a("p", [e._v("While the Default Generators will get you covered in most of the cases, there will always be a time when you want something more specific to your needs and you will not find it. That is to be expected, and that is why you can create your own Custom Generators")]), a("p", [e._v("Unlike Default Generators, for custom ones you can give them any name you want, you can rename as many times you want and you can even delete them, obviously.")]), e._m(12), e._m(13), a("p", [e._v('TIP: In the Fake Data context menu you can have nested Generators if you give them a path-like name, with forward slashes "/".')]), a("p", [e._v("Example: If you have 3 Custom Generators named like this:")]), e._m(14), a("p", [e._v("They will look like this:")]), e._m(15), a("p", { staticClass: "h5 text-white" }, [e._v("1.2 Fields")]), a("p", [e._v("Fields are the second big thing that you should know in Fake Data. They represent the unrecognized input fields that have been learned while you were training Fake Data.")]), a("div", { staticClass: "p" }, [e._v("Like Generators, Fields can be customized in a lot of ways. First thing that you might notice is that you can change the Generator that has been initially linked to them. To do that, you will find a dropdown inside each Field box that looks similar to this: "), a("div", { staticClass: "dropdown inline-block" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm dropdown-toggle", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e._v(" " + e._s("custom" != e.howto_generator ? e.howto_generator : "Custom Code") + " ")]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_generators_menu" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.howto_generator = "custom" } } }, [e._v("Custom Code")]), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Default Generators")]), e._l(e.root.fields, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.howto_generator = t } } }, [e._v(e._s(t))]) })), a("div", { staticClass: "dropdown-divider" }), a("h6", { staticClass: "dropdown-header" }, [e._v("Custom Generators")]), e._l(e.custom_generators, (function (t) { return a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.howto_generator = t.label } } }, [e._v(e._s(t.label))]) }))], 2)])]), a("p", [e._v('You will notice that the first option is "Custom Code", which brings us to the second customization that you can do.')]), e._m(16), e._m(17), a("p", [e._v("To access these customizations, you have to click on the button that looks similar to the one you have used for Generators page: "), a("button", { staticClass: "btn elegant-color-dark btn-sm extra_options_btn" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "ellipsis-v"] } })], 1)]), e._m(18), a("p", [e._v("If you read until here, and if you opened the Fields page at least once, you might ask yourself why you haven't found yet what are the three types of Fields. So let's find out, shall we?")]), a("p", { staticClass: "h5 text-white" }, [e._v("1.2.1 Named Fields")]), a("p", [e._v("These are pretty simple. You might already know, and if you don't, you will learn now, that on webpages, the input fields can be identified by either a name, by an id, or by both. If the input field that you are targeting has any of those attributes, it means that Fake Data can identify all similar fields on the internet.")]), a("p", [e._v('As an example: You visit a porn website and you try to use the search box. That box might has the name "boobs". If you use Fake Data with it to search for a random word, an entry called "boobs" will appear in the Named Fields section. If you go to a completely different website that has another input field called the same, "boobs", Fake Data will use the Field that is already learned, with all the customizations that you set.')]), a("p", [e._v('In short, settings made for an input field with name "boobs" on website A, will apply to any other input field with the same name or id from websites B, C, D, E and so on.')]), a("p", { staticClass: "h5 text-white" }, [e._v("1.2.2 Unnamed Fields")]), a("p", [e._v("This is where things gets interesting. Out on the internet, there can be input fields that don't have neither a name, nor an id. Theoretically, you will not be able to associate these kind of elements with any of the learned Fields.")]), e._m(19), a("p", [e._v("First problem that had to be solved was identifying the same field a second time, so Fake Data can apply your desired settings to it. To do that, in the Unnamed Fields section, the input element will be identified by two variables: the page url and the DOM selector.")]), e._m(20), a("p", [e._v("If you know what an url is, then you might ask yourself, what happens for similar pages, like an admin area where you can manage database entries and all the pages look the same but the ID in the url is different. Well, my friend, I have the right answer for this.")]), a("p", [e._v("Unnamed Fields have a feature where you can identify such pages by replacing the actual hardcoded url with a regular expression. If you don't know what that is, don't worry... actually you should learn it. It's good and useful to know.")]), a("p", [e._v("Example: If you have two pages that have basically the same content and their urls are like this:")]), e._m(21), a("p", [e._v("You can have a single Unnamed Field entry with an url identified by:")]), e._m(22), e._m(23), a("p", [e._v("If you know what DOM and DOM selector is, you might ask yourself how accurate is that identification? Good question, the answer is pretty accurate. If it's not, then you're screwed. At least for now. But it's way better than not being able to identify the field at all.")]), a("p", { staticClass: "h5 text-white" }, [e._v("1.2.3 Option Fields")]), a("p", [e._v("These type of Fields are dedicated to <select> HTML elements, checkboxes and radio buttons. When you try to manage such elements you will be presented with a dropdown menu to choose from three actions that can be applied:")]), e._m(24), a("p", [e._v("Similar to Unnamed Fields, Option Fields will be stored and identified second time by url + DOM selector combination.")]), a("p", { staticClass: "h5 text-white" }, [e._v("2. Custom Codes")]), a("p", [e._v("If you read the whole instructions page, you might be eager to learn more about Custom Codes. Becuase there is quite a lot to read about them, follow the url below which will take you to the right place to do that. Happy reading!")]), a("p", [a("a", { staticClass: "btn elegant-color-dark text-white helpsource_link", attrs: { href: "https://github.com/haterapps/fake-data/wiki/Help-Page", target: "_blank" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "external-link-alt"] } }), e._v("  https://github.com/haterapps/fake-data/wiki/Help-Page")], 1)])])])]) }, aa = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("Just "), a("mark", { staticClass: "kbd" }, [e._v("right click")]), e._v(" on the input field and go to "), a("mark", { staticClass: "kbd" }, [e._v("Fake Data submenu")]), e._v(", then choose the appropriate type of data that you want to insert.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [a("a", { attrs: { href: "/assets/basic_usage.png", target: "_blank" } }, [a("img", { staticStyle: { width: "80%" }, attrs: { src: "assets/basic_usage.png" } })])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("Fake Data is thought to be used out of the box in a very easy way, with no initial setup and no configuration required. You can use it and benefit from its "), a("strong", [e._v("awesome")]), e._v(" features without even accessing this options page. "), a("strong", [e._v("100% frustration free")]), e._v(" promised!")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [a("span", { staticClass: "red-text" }, [e._v("BUT WAIT!")]), e._v(" Before you go out in the wild (or on the internet) and use the new tricks you learned here, you should know one more thing, so keep reading.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("By using only the method described in the first part, you will notice that it will not work everywhere. Actually if you go right now to a random website and try using it, there are chances, pretty big actually, that it won't work or it will not insert the type of data you would expect. "), a("strong", [e._v("Fake Data is awesome")]), e._v(", but it can't do magic, so you will have to do one more step in order to train Fake Data to recognise a field automatically.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("Luckily, you are still covered by the "), a("strong", [e._v("100% frustration free")]), e._v(" promise, which means that this step is very easy to do.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("Just "), a("mark", { staticClass: "kbd" }, [e._v("right click")]), e._v(" on the input field and go to "), a("mark", { staticClass: "kbd" }, [e._v("Fake Data submenu")]), e._v(", then choose the appropriate type of data that you want to insert.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("After doing this, the same field will be automatically recognised next time when you apply method #1. In the beginning, you might have to do this for most of the fields, but as you add them, you will realise how "), a("strong", [e._v("awesome")]), e._v(" Fake Data is.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("In the Basic Usage page there was a promise, that Fake Data is "), a("strong", [e._v("100% frustration free")]), e._v(". For advanced users Fake Data promises that it can do "), a("strong", { staticClass: "underline" }, [e._v("EVERYTHING")]), e._v("! Don't believe? Keep reading.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", [a("li", [e._v("You can change the language that is used for generating content. Someone might say that there is a language option in the Settings page that will apply globally, which is true. But what if you want to change only one Generator? For example you can have Indian people names and Chinese city names.")]), a("li", [e._v("Some Generators have multiple ways of customization that are particular to them. For example, for the phone Generator you can change the format of the generated number, or for the password Generator you can choose how many characters it should have. There are others left to be discovered. Pretty "), a("strong", [e._v("awesome")]), e._v(", right?")]), a("li", [e._v("All Generators have two more features: executing your very own JavaScript code before and after inserting content in the input field. With these features you can make Generators do pretty much "), a("strong", { staticClass: "underline" }, [e._v("EVERYTHING")]), e._v(". But more about this later.")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "p" }, [e._v("Another button that will pop up in your face when you first open the Generators page is the toggle button, which switches between a default behavior and a custom code. I'm talking about this one: "), a("div", { staticClass: "switch secondary-switch small inline-block", staticStyle: { "margin-left": "10px" } }, [a("label", [e._v(" Default Behavior "), a("input", { attrs: { type: "checkbox" } }), a("span", { staticClass: "lever" }), e._v(" Custom Code ")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v('If left on the "Default Behavior" option, the Generator will do what is supposed to do. first_name Generator will generate first names, password Generator will generate passwords and so on. If you put it on "Custom Code" you are able to overwrite it and make it do '), a("strong", { staticClass: "underline" }, [e._v("EVERYTHING")]), e._v(" you want.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("You set them up by using your own JavaScript code and "), a("code", [e._v("return")]), e._v(" the value that you want to be inserted in the input field. Basically you can make them do "), a("strong", { staticClass: "underline" }, [e._v("EVERYTHING")]), e._v(" you want.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("If you are not satisfied by just writing some JavaScript code and "), a("code", [e._v("return")]), e._v(" the string you want to be used, there is also an API available! Sort of. Ok, it's not really an API, but you have access to everything that Fake Data has to offer. More about this later, just keep reading.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", [a("li", [e._v("Cryptocurrencies/Random Bitcoin Address")]), a("li", [e._v("Cryptocurrencies/Random Ethereum Address")]), a("li", [e._v("Cryptocurrencies/Random Litecoin Address")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [a("a", { attrs: { href: "/assets/nested_generators.png", target: "_blank" } }, [a("img", { staticStyle: { "max-width": "300px", width: "100%" }, attrs: { src: "assets/nested_generators.png" } })])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("If you want any Field to do something particular, that is not covered by a Generator and you don't feel like creating one only for a single Field, you can directly write your very own JavaScript code and make that Field do "), a("strong", { staticClass: "underline" }, [e._v("EVERYTHING")]), e._v(" you want. As you might have guessed, instructions about Custom Codes later in the page.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("But the customizations don't stop here. Remember how we talked that you can change for each Generator some options that are particular to them? Well, you can do the same with fields. Let's take the phone Generator as an example. If you change the format of the generated number through the Generators page, it will automatically change it for every Field that is using it. But from the Fields page you can overwrite that for each Field individually. You can have on a website a phone number generated in a format, and on another website in another format. Without even using any JavaScript at all. "), a("strong", [e._v("Awesome")]), e._v(", isn't it?")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("Of course, you can change the language and the before/after callbacks for each one. But that is obvious and expected from such an "), a("strong", [e._v("awesome")]), e._v(" tool.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("Lucky for you, Fake Data is "), a("strong", [e._v("awesome")]), e._v(" and can handled that, to a certain point.")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("If you don't know what an url or a DOM selector is, don't worry, you didn't lose anything. You should only know that Fake Data is "), a("strong", [e._v("awesome")]), e._v(".")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", [a("li", [e._v("https://www.haterapps.com/?some-random-id="), a("span", { staticClass: "id-not-ok" }, [e._v("4")])]), a("li", [e._v("https://www.haterapps.com/?some-random-id="), a("span", { staticClass: "id-not-ok" }, [e._v("20")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", [a("li", [e._v("https://www.haterapps.com/?some-random-id="), a("span", { staticClass: "id-ok" }, [e._v("[0-9]+")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", [e._v("To manage the regular expression rule for the Field, click on the button that looks similar to this: "), a("button", { staticClass: "btn btn-sm grey darken-4", attrs: { type: "button" } }, [a("span", [e._v("Use Regex")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", [a("li", [e._v("Choose a random value from all available options.")]), a("li", [e._v("Ignore the field and leave it as is.")]), a("li", [e._v("Choose one of the available options inside element as static value that will always be selected.")])]) }], sa = { data() { return { keyboard_shortcut: null, keyboard_shortcut_entire_form: null, active_tab: this.$route.params.kind || null, howto_generator: "full_name", custom_generators: [], basic_tldr: !0 } }, props: ["root"], watch: { $route: function () { this.active_tab = this.$route.params.kind || null }, active_tab: { immediate: !0, handler: function () { this.active_tab ? this.root.resetBsEvents() : this.changeTab("basic") } } }, mounted: function () { this.root.currentView = this, this.syncStorage(), this.root.resetBsEvents() }, methods: { syncStorage: function () { this.root.getStorageEngine().get({ keyboard_shortcut: this.root.generateDefaultKeyboardShortcuts(), keyboard_shortcut_entire_form: this.root.generateDefaultKeyboardShortcutsForEntireForm(), custom_generators: [] }, function (e) { this.keyboard_shortcut = { keyboard: Object.assign([], e.keyboard_shortcut.keyboard).sort(), mouse: e.keyboard_shortcut.mouse }, this.keyboard_shortcut_entire_form = { keyboard: Object.assign([], e.keyboard_shortcut_entire_form.keyboard).sort(), mouse: e.keyboard_shortcut_entire_form.mouse }, this.custom_generators = e.custom_generators, this.root.resetBsEvents() }.bind(this)) }, changeTab: function (e) { this.active_tab = e, this.$router.push({ path: "/rtfm/" + e }) }, printKeyboardShortcut: function () { if (!this.keyboard_shortcut || !this.keyboard_shortcut.keyboard) return "None assigned"; var e = Object.assign([], this.keyboard_shortcut.keyboard); return e.length > 0 && e.push("Double Click"), e.join(" + ") }, printKeyboardShortcutForEntireForm: function () { if (!this.keyboard_shortcut_entire_form || !this.keyboard_shortcut_entire_form.keyboard) return "None assigned"; var e = Object.assign([], this.keyboard_shortcut_entire_form.keyboard); return e.length > 0 && e.push("Double Click"), e.join(" + ") } } }, ia = sa, oa = (a("219d"), Object(b["a"])(ia, ta, aa, !1, null, null, null)), na = oa.exports, ra = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "page-about" }, [a("ul", { staticClass: "nav md-tabs nav-justified elegant-color-dark" }, [a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { "active-class": "active", to: "/about/intro" } }, [e._v("About Fake Data")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { "active-class": "active", to: "/about/support" } }, [e._v("Support")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { "active-class": "active", to: "/about/changelog" } }, [e._v("Changelog")])], 1)]), a("div", { staticClass: "tab-content grey darken-3 card" }, [a("div", { staticClass: "tab-pane in", class: { active: "intro" == e.active_tab }, attrs: { id: "tab_intro", role: "tabpanel" } }, [e._m(0), a("p", { staticClass: "h5 text-white" }, [e._v("The Frustration")]), a("p", [e._v("Fake Data is an extension born from the frustration of a need to complete many forms with random test data, but as real as possible. Unfortunately there was no easy way to generate that kind of data on the fly without an exhausting back and forth copy-paste operation from other sources.")]), a("p", { staticClass: "h5 text-white" }, [e._v("What does it do?")]), a("p", [e._v("Fake Data lets you insert, as the name suggests, fake and random data in the input fields with just a keyboard shortcut.")]), a("p", [e._v("It's very easy to use that even a 3 year old can do it. If he's allowed to complete internet forms, of course.")]), a("p", [e._v("And it is very customizable that any developer should use. Unless they like to manually fill forms all day.")])]), a("div", { staticClass: "tab-pane in", class: { active: "support" == e.active_tab }, attrs: { id: "tab_support", role: "tabpanel" } }, [a("p", { staticClass: "h5 text-white" }, [e._v("Support for you")]), a("p", [e._v("Any question, problem, bug or frustration about Fake Data can be reported using the following methods:")]), a("p", [a("a", { staticClass: "btn elegant-color-dark text-white", staticStyle: { "text-transform": "none" }, attrs: { href: "mailto:frustrations@haterapps.com", target: "_blank" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "envelope"] } }), e._v("  frustrations@haterapps.com")], 1), a("a", { staticClass: "btn elegant-color-dark text-white", staticStyle: { "text-transform": "none" }, attrs: { href: "https://github.com/haterapps/fake-data/issues", target: "_blank" } }, [a("font-awesome-icon", { attrs: { icon: ["fab", "github"] } }), e._v("  Submit an issue on GitHub")], 1)]), a("p", { staticClass: "h5 text-white" }, [e._v("Support for project")]), a("p", [e._v("Are you disappointed with Fake Data? Or do you think it's awesome? Feel free to rate it and leave a review so others will know.")]), e.extension_store ? a("p", [a("a", { staticClass: "text-white btn elegant-color-dark", staticStyle: { "text-transform": "none" }, attrs: { href: e.extension_store.link, target: "_blank", id: "rate_extension_link", "data-browser": e.extension_browser } }, [a("font-awesome-icon", { attrs: { icon: e.extension_store.icon, size: "sm" } }), e._v("  " + e._s(e.extension_store.title))], 1)]) : e._e(), a("p", { staticClass: "mt-5" }, [e._v("Money do make people happy, so any donation is welcome.")]), a("p", [e.root.isLicenseActive() ? e._e() : a("router-link", { staticClass: "btn elegant-color-dark text-white", staticStyle: { "text-transform": "none" }, attrs: { to: "/account/license" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "credit-card"], size: "sm" } }), e._v("  Purchase a Pro License ")], 1), e.root.isLicenseActive() && !e.root.isUltraSubscriber() ? a("router-link", { staticClass: "btn elegant-color-dark text-white", staticStyle: { "text-transform": "none" }, attrs: { to: "/account/license" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "credit-card"], size: "sm" } }), e._v("  Become an Ultra Subscriber ")], 1) : e._e(), a("button", { staticClass: "btn elegant-color-dark", staticStyle: { "text-transform": "none" }, on: { click: function (t) { return t.stopPropagation(), e.donatePaypal.apply(null, arguments) } } }, [a("font-awesome-icon", { attrs: { icon: ["fab", "paypal"], size: "sm" } }), e._v("  Donate with PayPal ")], 1), a("button", { staticClass: "btn elegant-color-dark", staticStyle: { "text-transform": "none" }, on: { click: function (t) { return t.stopPropagation(), e.donateBitcoin.apply(null, arguments) } } }, [a("font-awesome-icon", { attrs: { icon: ["fab", "btc"], size: "sm" } }), e._v("  Donate with Bitcoin ")], 1)], 1)]), a("div", { staticClass: "tab-pane in pt-5", class: { active: "changelog" == e.active_tab }, attrs: { id: "tab_changelog", role: "tabpanel" } }, e._l(e.logs, (function (t, s) { return a("div", [e.last_seen > 0 && e.last_seen < e.logs.length ? a("div", [0 == s ? a("h4", [e._v("Since your last visit here, the following updates have been made")]) : s == e.logs.length - e.last_seen ? a("h4", [e._v("And the previous updates, in case you want to read them")]) : e._e()]) : e._e(), a("div", { staticClass: "card text-white", class: { fadeout: e.last_seen > 0 && e.last_seen < e.logs.length && e.last_seen > e.logs.length - s - 1 } }, [a("div", { staticClass: "card-header elegant-color-dark" }, [a("span", { staticClass: "card-header-title" }, [a("span", { staticClass: "pull-left" }, [t.release_date ? a("span", [e._v(e._s(e.root.parseDate(t.release_date)))]) : a("span", [e._v("Soon")])]), a("span", { staticClass: "pull-right" }, [e._v("Version " + e._s(t.version))])])]), a("div", { staticClass: "card-body white-text rounded-bottom grey elegant-color" }, [a("ul", e._l(t.items, (function (t) { return a("li", { staticClass: "log_item" }, [a("div", "string" == typeof t ? [a("span", { domProps: { innerHTML: e._s(t) } })] : [t.pro || t.ultra ? a("span", [t.ultra ? a("pro-required", { attrs: { root: e.root, ultra_required: !0 } }) : t.pro ? a("pro-required", { attrs: { root: e.root } }) : e._e(), e._v("   ")], 1) : e._e(), a("span", { domProps: { innerHTML: e._s(t.text) } }), t.docs_link ? a("a", { staticClass: "ml-3", attrs: { href: t.docs_link, target: "_blank" } }, [a("span", { staticClass: "badge badge-pill badge-info" }, [e._v(e._s(t.docs_text || "See docs") + " "), a("font-awesome-icon", { staticClass: "text-white", attrs: { icon: ["fas", "question-circle"] } })], 1)]) : t.readmore_link ? a("a", { staticClass: "ml-3", attrs: { href: t.readmore_link, target: "_blank" } }, [a("span", { staticClass: "badge badge-pill badge-info" }, [e._v(e._s(t.readmore_text || "Read more"))])]) : e._e()])]) })), 0)])])]) })), 0)]), a("div", [e._m(1), a("div", { staticClass: "modal fade", attrs: { id: "bitcoin-donate", role: "dialog", tabindex: "-1" } }, [a("div", { staticClass: "modal-dialog", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [e._m(2), e._m(3), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-unique", attrs: { "data-dismiss": "modal", type: "button" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Close ")], 1)])])])])])]) }, la = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "text-center" }, [a("a", { attrs: { href: "http://www.haterapps.com", target: "_blank" } }, [a("img", { staticClass: "hater_logo", attrs: { src: "assets/logo_text_transparent_bg.png" } })])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("form", { staticClass: "text-center", attrs: { action: "https://www.paypal.com/donate", id: "paypal-form", method: "post", target: "_blank" } }, [a("input", { attrs: { name: "cmd", type: "hidden", value: "_s-xclick" } }), a("input", { attrs: { name: "hosted_button_id", type: "hidden", value: "WUS2GLJMCCYYW" } })]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title" }, [e._v("Donate with Bitcoin")]), a("button", { staticClass: "close", attrs: { "aria-label": "Close", "data-dismiss": "modal", type: "button" } }, [a("span", { staticClass: "text-white", attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-body" }, [a("div", { staticClass: "text-center" }, [a("div", { staticClass: "img-wallet" }, [a("a", { attrs: { href: "bitcoin:1HATE88T3YxMyq86C94ud29PP51uPhy9c9", target: "_blank" } }, [a("img", { attrs: { src: "assets/bitcoin_qr.png" } })])]), a("div", { staticClass: "btc_address" }, [a("code", [e._v("1HATE88T3YxMyq86C94ud29PP51uPhy9c9")])])])]) }], ca = { components: { ProRequired: F }, props: ["root"], data: function () { return { active_tab: this.$route.params.kind || null, extension_store: null, extension_browser: null, all_extension_stores: { chrome: { icon: ["fab", "chrome"], title: "Rate Fake Data on Chrome Web Store", link: "https://chrome.google.com/webstore/detail/fake-data/gchcfdihakkhjgfmokemfeembfokkajj/reviews" }, firefox: { icon: ["fab", "firefox"], title: "Rate Fake Data on Firefox Add-ons", link: "https://addons.mozilla.org/en-US/firefox/addon/fake-data-haterapps/reviews/" }, opera: { icon: ["fab", "opera"], title: "Rate Fake Data on Opera add-ons", link: "https://addons.opera.com/en/extensions/details/fake-data/?display=en#feedback-container" }, edge: { icon: ["fab", "edge"], title: "Rate Fake Data on Microsoft Edge Addons Store", link: "https://microsoftedge.microsoft.com/addons/detail/kaabapeemblncdbnnkpajpbjebhochob" } } } }, computed: { logs: function () { return a("f302").default }, last_seen: function () { var e = this.root.last_seen_version, t = this.$route.query.lastseen; return t || e } }, watch: { $route: function () { this.active_tab = this.$route.params.kind || null }, active_tab: { immediate: !0, handler: function () { this.active_tab ? this.root.resetBsEvents() : this.changeTab("intro") } } }, mounted: function () { this.root.currentView = this, this.extension_browser = this.root.getBrowser(), this.extension_store = this.all_extension_stores[this.root.getBrowser()] }, methods: { changeTab: function (e) { this.active_tab = e, this.$router.push({ path: "/about/" + e }) }, donatePaypal: function () { $("#paypal-form").submit() }, donateBitcoin: function () { $("#bitcoin-donate").modal("show") } } }, da = ca, ua = (a("f361"), Object(b["a"])(da, ra, la, !1, null, null, null)), _a = ua.exports, ma = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { ref: "page-generators", staticClass: "page-generators" }, [e.show_mv3_warning && !e.dismiss_mv3_warning ? a("div", { staticClass: "alert alert-warning", staticStyle: { "margin-bottom": "30px" }, attrs: { role: "alert" } }, [a("button", { staticClass: "close", attrs: { type: "button", "aria-label": "Close" }, on: { click: function (t) { return e.dismissMv3Warning() } } }, [a("span", { attrs: { "aria-hidden": "true" } }, [e._v("×")])]), a("a", { staticClass: "btn btn-warning btn-sm pull-right position-relative mr-4", staticStyle: { top: "-10px" }, attrs: { href: "https://github.com/haterapps/fake-data/issues/12", target: "_blank" } }, [e._v("Read more")]), a("p", { staticClass: "no-margin" }, [e._v("Important changes to Custom Code generators will be coming soon!")])]) : e._e(), e.root.current_version > e.root.last_seen_version && 0 != e.root.last_seen_version && (0 == e.root.dismiss_version_notif || 1 == e.root.dismiss_version_notif) ? a("div", { staticClass: "alert alert-success", staticStyle: { "margin-bottom": "30px" }, attrs: { role: "alert" } }, [a("router-link", { staticClass: "btn btn-success btn-sm pull-right position-relative", staticStyle: { top: "-10px" }, attrs: { to: "/about/changelog" } }, [e._v("See what's new")]), a("p", { staticClass: "no-margin" }, [e._v("Fake Data has been updated to version " + e._s(e.current_version_string) + ".")])], 1) : a("div", [!e.rate_answered && e.show_rate_question ? a("div", { staticClass: "alert grey darken-2", class: { alert_disabled: e.show_sub_rate_question }, staticStyle: { "margin-bottom": "30px" } }, [a("button", { staticClass: "btn btn-unique btn-sm pull-right position-relative", staticStyle: { top: "-10px" }, on: { click: function (t) { return e.rateThumbDown() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "hand-middle-finger"] } }), e._v("  It's shit!")], 1), a("button", { staticClass: "btn btn-dark-green btn-sm pull-right position-relative", staticStyle: { top: "-10px" }, on: { click: function (t) { return e.rateThumbUp() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "thumbs-up"] } }), e._v("  It's the shit!")], 1), a("p", { staticClass: "no-margin" }, [e._v("What do you think of Fake Data?")])]) : e._e(), !e.rate_answered && e.show_rate_question && e.show_sub_rate_question ? a("div", ["rate_up" == e.show_sub_rate_question ? a("div", { staticClass: "alert success-color-dark", staticStyle: { "margin-bottom": "30px" } }, [a("button", { staticClass: "btn btn-unique btn-sm pull-right position-relative", staticStyle: { top: "-10px" }, on: { click: function (t) { return e.rateClose() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"] } }), e._v("  Hell no!")], 1), a("a", { staticClass: "btn btn-dark-green btn-sm pull-right position-relative", staticStyle: { top: "-10px" }, attrs: { href: e.all_extension_stores[e.root.getBrowser()].link, target: "_blank" }, on: { click: function (t) { return e.rateClose() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"] } }), e._v("  Sure!")], 1), a("p", { staticClass: "no-margin" }, [e._v("Would you like to leave a review on " + e._s(e.all_extension_stores[e.root.getBrowser()].title) + "?")])]) : e._e(), "rate_down" == e.show_sub_rate_question ? a("div", { staticClass: "alert red darken-4", staticStyle: { "margin-bottom": "30px" } }, [a("button", { staticClass: "btn btn-unique btn-sm pull-right position-relative", staticStyle: { top: "-10px" }, on: { click: function (t) { return e.rateClose() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"] } }), e._v("  Hell no!")], 1), a("button", { staticClass: "btn btn-dark-green btn-sm pull-right position-relative", staticStyle: { top: "-10px" }, on: { click: function (t) { return e.rateSendFeedback() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"] } }), e._v("  Sure!")], 1), a("p", { staticClass: "no-margin" }, [e._v("Would you like to send some feedback?")])]) : e._e()]) : e._e()]), a("ul", { staticClass: "nav md-tabs nav-justified elegant-color-dark" }, [a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/generators/default", "active-class": "active" } }, [e._v("Default Generators")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", class: { active: "custom" == e.active_tab }, attrs: { to: "/generators/custom", "active-class": "active" } }, [e._v("Custom Generators")])], 1)]), a("div", { staticClass: "tab-content grey darken-3 card" }, [a("div", { staticClass: "tab-pane in", class: { active: "rtfm" == e.active_tab }, attrs: { id: "tab_rtfm", role: "tabpanel" } }, [a("h1", [e._v("RTFM")])]), a("div", { staticClass: "tab-pane in", class: { active: "default" == e.active_tab }, attrs: { id: "tab_default", role: "tabpanel" } }, e._l(e.checkboxes, (function (t, s) { return a("div", { staticClass: "card text-white bg-dark mb-3 generator_card" }, [a("div", { staticClass: "card-header elegant-color" }, [a("span", { staticClass: "card-header-title" }, [e._v(e._s(s))]), a("div", { staticClass: "pull-right" }, [a("div", { staticClass: "dropdown inline-block" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm pull-right", on: { click: function (t) { return e.openOptionsModal(s, null, "Default") } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "ellipsis-v"] } })], 1), a("div", { staticClass: "inline-block m-0 dropdown-container-checkbox" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm dropdown-toggle", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e.root.isActiveUltraSubscriber() || "string" != typeof e.checkboxes[s] || "cloud_" != e.checkboxes[s].substr(0, 6) ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e.root.isLicenseActive() || "string" != typeof e.checkboxes[s] || "dataset" != e.checkboxes[s] ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e._v(" " + e._s({ true: "Custom Code", false: "Default Behavior", cloud_emails: "Cloud Emails", cloud_phone: "Cloud Phone Numbers", cloud_country: "Cloud Place: Country", cloud_state: "Cloud Place: State", cloud_city: "Cloud Place: City", cloud_address: "Cloud Place: Address", cloud_zip: "Cloud Place: Zip", dataset: "Dataset" }[e.checkboxes[s]]) + " ")]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_generators_menu" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.checkboxes[s] = !1 } } }, [e._v("Default Behavior")]), a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.checkboxes[s] = !0 } } }, [e._v("Custom Code")]), e._l({ email: { cloud_generator: "cloud_emails", label: "Cloud Emails" }, phone: { cloud_generator: "cloud_phone", label: "Cloud Phone Numbers" }, country: { cloud_generator: "cloud_country", label: "Cloud Place: Country" }, state: { cloud_generator: "cloud_state", label: "Cloud Place: State" }, city: { cloud_generator: "cloud_city", label: "Cloud Place: City" }, address: { cloud_generator: "cloud_address", label: "Cloud Place: Address" }, zip: { cloud_generator: "cloud_zip", label: "Cloud Place: Zip" } }, (function (t, i) { return s == i ? a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isActiveUltraSubscriber() }, attrs: { href: "#" }, on: { click: function (a) { a.preventDefault(), e.checkboxes[s] = t.cloud_generator } } }, [e._v(" " + e._s(t.label) + " "), e.root.isActiveUltraSubscriber() ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark ml-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1)]) : e._e() })), e.datasets ? a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.checkboxes[s] = "dataset" } } }, [e._v("Dataset "), e.root.isLicenseActive() ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark ml-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1)]) : e._e()], 2)]), "dataset" == e.checkboxes[s] ? a("div", { staticClass: "inline-block" }, [a("button", { staticClass: "m-0 btn elegant-color-dark btn-sm dropdown-toggle", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e.root.isLicenseActive() ? !e.default_generators_settings[s].dataset || e.datasets && e.datasets[e.default_generators_settings[s].dataset.dataset] && e.datasets[e.default_generators_settings[s].dataset.dataset].columns.includes(e.default_generators_settings[s].dataset.column) ? e._e() : a("span", { staticClass: "badge warning-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } })], 1) : a("span", { staticClass: "badge pro_required danger-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e.default_generators_settings[s].dataset ? a("span", [e._v(e._s(e.datasets && e.datasets[e.default_generators_settings[s].dataset.dataset] && e.datasets[e.default_generators_settings[s].dataset.dataset].columns.includes(e.default_generators_settings[s].dataset.column) ? e.datasets[e.default_generators_settings[s].dataset.dataset].dataset_name + " / " + e.default_generators_settings[s].dataset.column : "Selected Dataset is not available anymore"))]) : a("span", [e._v("No Dataset selected")])]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_datasets_menu" }, [a("router-link", { staticClass: "dropdown-item", attrs: { to: "/settings/developer/datasets" } }, [e._v("Manage Datasets")]), e._l(e.datasets, (function (t, i, o) { return a("div", [a("hr"), a("h6", { staticClass: "dropdown-header" }, [e._v("Dataset: " + e._s(t.dataset_name))]), e._l(t.columns, (function (i) { return a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (a) { return a.preventDefault(), e.$set(e.default_generators_settings[s], "dataset", { dataset: t.id, column: i }) } } }, [e._v(e._s(i))]) }))], 2) }))], 2)]) : e._e()])])]), a("div", { staticClass: "card-body elegant-color white-text rounded-bottom slider", class: { closed: !0 !== e.checkboxes[s] } }, [e.checkboxes[s] ? a("div", [e.root.isLicenseActive() && e.codemirror_enabled ? a("div", { staticClass: "position-relative" }, [e.checkboxes[s] ? a("codemirror", { ref: "codemirrorWrapper_" + s, refInFor: !0, model: { value: e.callbacks[s], callback: function (t) { e.$set(e.callbacks, s, t) }, expression: "callbacks[label]" } }) : e._e()], 1) : a("div", [a("div", { staticClass: "md-form unique-textarea active-unique-textarea" }, [a("font-awesome-icon", { class: ["prefix", "grey-text", "fs-25px"], attrs: { icon: ["fas", "code"] } }), a("textarea", { directives: [{ name: "model", rawName: "v-model", value: e.callbacks[s], expression: "callbacks[label]" }], staticClass: "md-textarea text-white form-control code-textarea", attrs: { type: "text", id: "custom_code_" + s, rows: "3" }, domProps: { value: e.callbacks[s] }, on: { input: function (t) { t.target.composing || e.$set(e.callbacks, s, t.target.value) } } }), a("label", { attrs: { for: "custom_code_" + s } }, [e._v("JavaScript code here")])], 1)])]) : e._e()]), a("div", { staticClass: "card-footer" }, [a("div", { staticClass: "card-footer-inner" }, [e._m(0, !0), a("div", { staticClass: "card-footer-buttons" }, [e.root.isLicenseActive() && e.codemirror_enabled && !0 === e.checkboxes[s] ? a("a", { staticClass: "btn grey darken-3 btn-flat btn-sm", on: { click: function (t) { return e.root.codeMirrorFullScreen(e.$refs["codemirrorWrapper_" + s]) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "expand-arrows-alt"] } }), e._v("  Fullscreen")], 1) : e._e(), a("a", { staticClass: "btn grey darken-3 btn-flat btn-sm preview_btn", on: { click: function (t) { return e.generatePreview(s, t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "eye"], size: "sm" } }), e._v("  Preview")], 1)])])])]) })), 0), a("div", { staticClass: "tab-pane in", class: { active: "custom" == e.active_tab }, attrs: { id: "tab_custom", role: "tabpanel" } }, [a("a", { staticClass: "btn-floating btn-lg default-color-dark add_new_generator_btn", on: { click: e.addCustomGenerator } }, [a("font-awesome-icon", { class: ["fs-25px"], staticStyle: { left: "20px", position: "relative", top: "16px" }, attrs: { icon: ["fas", "plus"] } })], 1), a("div", { staticClass: "callback", attrs: { role: "tablist", "aria-multiselectable": "true" } }, [e.custom_generators.length > 0 ? a("div", [a("draggable", { attrs: { handle: ".card-drag-handle" }, on: { start: e.dragStart, end: e.dragEnd }, model: { value: e.custom_generators, callback: function (t) { e.custom_generators = t }, expression: "custom_generators" } }, e._l(e.custom_generators, (function (t, s) { return a("div", { staticClass: "card text-white bg-dark mb-3 generator_card", attrs: { "data-original-name": t.label } }, [a("div", { staticClass: "card-header elegant-color" }, [a("div", { staticClass: "card-drag-handle" }), a("div", { staticClass: "pull-right" }, [a("div", { staticClass: "dropdown inline-block", staticStyle: { height: "0px" } }, [a("button", { staticClass: "btn elegant-color-dark btn-sm pull-right default_extra_options_btn extra_options_btn", on: { click: function (a) { return e.openOptionsModal(t.label, t, "Custom") } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "ellipsis-v"] } })], 1), a("div", { staticClass: "inline-block m-0 dropdown-container-checkbox p-0 m-0", staticStyle: { top: "-8px", position: "relative" } }, [a("button", { staticClass: "btn elegant-color-dark btn-sm dropdown-toggle", staticStyle: { "margin-bottom": "0px" }, attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e.root.isLicenseActive() || "string" != typeof t.generator || "dataset" != t.generator ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), e._v(" " + e._s({ undefined: "Custom Code", custom: "Custom Code", dataset: "Dataset" }[t.generator]) + " ")]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_generators_menu" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (a) { return a.preventDefault(), e.$set(t, "generator", "custom") } } }, [e._v("Custom Code")]), e.datasets ? a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (a) { return a.preventDefault(), e.$set(t, "generator", "dataset") } } }, [e._v("Dataset "), e.root.isLicenseActive() ? e._e() : a("span", { staticClass: "badge pro_required danger-color-dark ml-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1)]) : e._e()])]), "dataset" == t.generator ? a("div", { staticClass: "inline-block", staticStyle: { top: "-5px", position: "relative" } }, [a("button", { staticClass: "m-0 btn elegant-color-dark btn-sm dropdown-toggle", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e.root.isLicenseActive() ? !t.dataset || e.datasets && e.datasets[t.dataset.dataset] && e.datasets[t.dataset.dataset].columns.includes(t.dataset.column) ? e._e() : a("span", { staticClass: "badge warning-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } })], 1) : a("span", { staticClass: "badge pro_required danger-color-dark mr-2" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } })], 1), t.dataset ? a("span", [e._v(e._s(e.datasets && e.datasets[t.dataset.dataset] && e.datasets[t.dataset.dataset].columns.includes(t.dataset.column) ? e.datasets[t.dataset.dataset].dataset_name + " / " + t.dataset.column : "Selected Dataset is not available anymore"))]) : a("span", [e._v("No Dataset selected")])]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_datasets_menu" }, [a("router-link", { staticClass: "dropdown-item", attrs: { to: "/settings/developer/datasets" } }, [e._v("Manage Datasets")]), e._l(e.datasets, (function (s, i, o) { return a("div", [a("hr"), a("h6", { staticClass: "dropdown-header" }, [e._v("Dataset: " + e._s(s.dataset_name))]), e._l(s.columns, (function (i) { return a("a", { staticClass: "dropdown-item", class: { disabled: !e.root.isLicenseActive() }, attrs: { href: "#" }, on: { click: function (a) { return a.preventDefault(), e.$set(t, "dataset", { dataset: s.id, column: i }) } } }, [e._v(e._s(i))]) }))], 2) }))], 2)]) : e._e()])]), a("div", { staticClass: "md-form unique-textarea" }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: t.label, expression: "generator.label" }], staticClass: "form-control text-white position-relative", staticStyle: { top: "-8px" }, attrs: { type: "text", id: "custom_generator_index_" + s }, domProps: { value: t.label }, on: { input: function (a) { a.target.composing || e.$set(t, "label", a.target.value) } } }), a("label", { staticClass: "custom_generator_label", attrs: { for: "custom_generator_index_" + s } }, [e._v("Generator Label")])])]), a("div", { staticClass: "card-body elegant-color white-text rounded-bottom slider", class: { closed: t.generator && "custom" != t.generator } }, [e.root.isLicenseActive() && e.codemirror_enabled ? a("div", { staticClass: "position-relative" }, [a("codemirror", { ref: "codemirrorWrapper_" + t.label, refInFor: !0, model: { value: t.callback, callback: function (a) { e.$set(t, "callback", a) }, expression: "generator.callback" } })], 1) : a("div", [a("div", { staticClass: "md-form unique-textarea active-unique-textarea" }, [a("font-awesome-icon", { class: ["prefix", "grey-text", "fs-25px"], attrs: { icon: ["fas", "code"] } }), a("textarea", { directives: [{ name: "model", rawName: "v-model", value: t.callback, expression: "generator.callback" }], staticClass: "md-textarea text-white form-control code-textarea", attrs: { type: "text", id: "custom_code_" + t.label, rows: "3" }, domProps: { value: t.callback }, on: { input: function (a) { a.target.composing || e.$set(t, "callback", a.target.value) } } }), a("label", { attrs: { for: "custom_code_" + t.label } }, [e._v("JavaScript code here")])], 1)])]), a("div", { staticClass: "card-footer" }, [a("div", { staticClass: "card-footer-inner" }, [a("small", { staticClass: "preview_label" }, [a("span", { staticClass: "preview_label_text" })]), a("div", { staticClass: "card-footer-buttons" }, [a("a", { staticClass: "btn btn-unique btn-flat btn-sm", on: { click: function (t) { return e.removeField(s) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"], size: "sm" } }), e._v("  Delete")], 1), e.root.isLicenseActive() && e.codemirror_enabled ? a("a", { staticClass: "btn grey darken-3 btn-flat btn-sm", on: { click: function (a) { return e.root.codeMirrorFullScreen(e.$refs["codemirrorWrapper_" + t.label]) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "expand-arrows-alt"] } }), e._v("  Fullscreen")], 1) : e._e(), a("a", { staticClass: "btn grey darken-3 btn-flat btn-sm preview_btn", on: { click: function (a) { return e.generatePreview(t, a) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "eye"], size: "sm" } }), e._v("  Preview")], 1)])])])]) })), 0)], 1) : a("div", [a("h5", { staticClass: "text-center" }, [e._v("No Custom Generators created.")])])])])]), a("nav", { staticClass: "navbar navbar-dark elegant-color-dark fixed-bottom d-block save_bar slider", class: { closed: !e.any_changes } }, [a("div", { staticClass: "text-center" }, [a("button", { staticClass: "btn btn-md btn-dark-green save_btn", attrs: { type: "button" }, on: { click: e.saveChanges } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "check"], size: "sm" } }), e._v(" Save Changes")], 1), a("button", { staticClass: "btn btn-md btn-unique cancel_btn", attrs: { type: "button" }, on: { click: e.cancelChanges } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Cancel")], 1)])]), a("generator-options-modal", { attrs: { root: e.root }, model: { value: e.optionsField, callback: function (t) { e.optionsField = t }, expression: "optionsField" } })], 1) }, ha = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("small", { staticClass: "preview_label" }, [a("span", { staticClass: "preview_label_text" })]) }], pa = a("b76a"), fa = a.n(pa), va = { components: { GeneratorOptionsModal: Jt, draggable: fa.a }, data: function () { return { active_tab: this.$route.params.kind || null, callbacks: this.root.mapFields(null), checkboxes: this.root.mapFields(!1), default_generators_settings: this.root.mapFields({}), datasets: {}, codemirror_enabled: null, custom_generators: [], any_changes: !1, initial_values: {}, removed_generators: [], renamed_generators: {}, current_version_string: chrome.runtime.getManifest().version, optionsField: null, show_rate_question: !1, show_sub_rate_question: null, rate_answered: !1, all_extension_stores: { chrome: { title: "Chrome Web Store", link: "https://chrome.google.com/webstore/detail/fake-data/gchcfdihakkhjgfmokemfeembfokkajj/reviews" }, firefox: { title: "Firefox Add-ons", link: "https://addons.mozilla.org/en-US/firefox/addon/fake-data-haterapps/reviews/" }, opera: { title: "Opera add-ons", link: "https://addons.opera.com/en/extensions/details/fake-data/?display=en#feedback-container" }, edge: { title: "Microsoft Edge Addons Store", link: "https://microsoftedge.microsoft.com/addons/detail/kaabapeemblncdbnnkpajpbjebhochob" } }, dismiss_mv3_warning: !0, show_mv3_warning: !1 } }, props: ["root"], watch: { $route: function () { this.active_tab = this.$route.params.kind || null }, active_tab: { immediate: !0, handler: function () { this.active_tab ? (this.root.resetBsEvents(), this.$nextTick((function () { this.handleScrollEvent() }))) : this.changeTab("default") } }, callbacks: { deep: !0, handler: function () { this.$nextTick((function () { this.any_changes = this.checkForChanges() })) } }, checkboxes: { deep: !0, handler: function () { this.$nextTick((function () { this.any_changes = this.checkForChanges(), this.root.resetBsEvents() })) } }, custom_generators: { deep: !0, handler: function () { this.$nextTick((function () { this.any_changes = this.checkForChanges() })) } }, default_generators_settings: { deep: !0, handler: function () { this.$nextTick((function () { this.any_changes = this.checkForChanges() })) } } }, mounted: function () { this.root.currentView = this, this.syncStorage(), this.$nextTick((function () { $("body").off("scroll.hatespacegenerators", this.handleScrollEvent), $("body").on("scroll.hatespacegenerators", this.handleScrollEvent), this.handleScrollEvent(), this.root.dismiss_version_notif++ })) }, beforeDestroy: function () { $("body").off("scroll.hatespacegenerators", this.handleScrollEvent) }, methods: { changeTab: function (e) { this.$router.push({ path: "/generators/" + e }) }, syncStorage: function () { this.root.getStorageEngine().get({ custom_callbacks: {}, default_generator_checkboxes: {}, custom_generators: [], codemirror_enabled: !0, default_generators_settings: this.root.mapFields({}), stats: {}, install_date: null, rate_answered: !1, dismiss_mv3_warning: !1, datasets: {} }, function (e) { if (e) { var t = e.custom_callbacks; for (var a in this.codemirror_enabled = e.codemirror_enabled, this.rate_answered = e.rate_answered, this.dismiss_mv3_warning = !!e.dismiss_mv3_warning, this.datasets = e.datasets, this.root.fields) { var s = this.root.fields[a]; this.callbacks[s] = t[s] || ""; var i = "undefined" != typeof e.default_generator_checkboxes[s] ? e.default_generator_checkboxes[s] : null; null === i && (i = !!this.callbacks[s]), this.checkboxes[s] = i } for (var s in e.custom_generators) e.custom_generators[s].original_name = e.custom_generators[s].label; for (var s in this.custom_generators = e.custom_generators, Object.assign(this.default_generators_settings, e.default_generators_settings), this.initial_values.callbacks = Object.assign({}, this.callbacks), this.initial_values.checkboxes = Object.assign({}, this.checkboxes), this.initial_values.default_generators_settings = this.root.normalizeVueObject(this.default_generators_settings), this.initial_values.custom_generators = [], this.custom_generators) this.initial_values.custom_generators[s] = Object.assign({}, this.custom_generators[s]); if (e.install_date && e.stats && e.stats.fill_sessions && (this.root.isLicenseActive() ? new Date(e.install_date).getTime() >= 12096e5 && e.stats.fill_sessions >= 100 && (this.show_rate_question = !0) : new Date(e.install_date).getTime() >= 2592e6 && e.stats.fill_sessions >= 300 && (this.show_rate_question = !0)), e.stats.fill_sessions && e.stats.fill_sessions >= 50) for (var s in !this.show_mv3_warning && this.custom_generators.length > 1 && (this.show_mv3_warning = !0), this.checkboxes) if (!0 === this.checkboxes[s] && "email" != s) { this.show_mv3_warning = !0; break } } else toastr.error("Load Error: " + (chrome.runtime.lastError || "FD - Unknown error occurred"), !1, { closeButton: !0, timeOut: 5e3 }); this.$nextTick((function () { this.any_changes = !1, this.root.resetBsEvents() })) }.bind(this)) }, cancelChanges: function () { if (confirm("Are you sure you want to discard all changes?")) { for (var e in Object.assign(this.callbacks, this.initial_values.callbacks), Object.assign(this.checkboxes, this.initial_values.checkboxes), this.custom_generators = [], this.initial_values.custom_generators) this.custom_generators.push(Object.assign({}, this.initial_values.custom_generators[e])); var t = {}; for (var e in this.initial_values.default_generators_settings) t[e] = this.root.normalizeVueObject(this.initial_values.default_generators_settings[e]); this.default_generators_settings = t, this.removed_generators = [], this.$nextTick((function () { this.any_changes = !1, this.root.resetBsEvents() })) } }, saveChanges: function () { if (this.custom_generators.length) { for (var e in this.custom_generators) { if (this.root.fields.indexOf(this.custom_generators[e].label) > -1) return void alert("A Default Generator with the same label already exists"); if ("custom" == this.custom_generators[e].label.toLowerCase() || "fake data cloud/" == this.custom_generators[e].label.substr(0, 16).toLowerCase() || "fake data/" == this.custom_generators[e].label.substr(0, 10).toLowerCase()) return void alert(this.custom_generators[e].label + " is not allowed as a name for Custom Generators") } for (var e in this.custom_generators) for (var t in this.custom_generators) if (this.custom_generators[e] != this.custom_generators[t] && this.custom_generators[e].label == this.custom_generators[t].label) return void alert("A Custom Generator with the same label already exists") } for (var e in this.custom_generators) this.custom_generators[e].label != this.custom_generators[e].original_name && (this.renamed_generators[this.custom_generators[e].original_name] = this.custom_generators[e].label), Us.delete(this.custom_generators[e], "original_name"); this.root.getStorageEngine().set(this.root.normalizeVueObject({ custom_callbacks: this.callbacks, default_generator_checkboxes: this.checkboxes, custom_generators: this.custom_generators, default_generators_settings: this.default_generators_settings }), function () { this.root.getStorageEngine().get({ extra_fields: {} }, function (e) { if (e) { var t = !1; for (var a in e.extra_fields) "object" == typeof e.extra_fields[a] && this.removed_generators.indexOf(e.extra_fields[a].generator) > -1 || "string" == typeof e.extra_fields[a] && this.removed_generators.indexOf(e.extra_fields[a]) > -1 ? (delete e.extra_fields[a], t = !0) : "object" == typeof e.extra_fields[a] && "undefined" != typeof this.renamed_generators[e.extra_fields[a].generator] ? (e.extra_fields[a].generator = this.renamed_generators[e.extra_fields[a].generator], t = !0) : "string" == typeof e.extra_fields[a] && "undefined" != typeof this.renamed_generators[e.extra_fields[a]] && (e.extra_fields[a] = this.renamed_generators[e.extra_fields[a]], t = !0); for (var a in t ? this.root.getStorageEngine().set(this.root.normalizeVueObject({ extra_fields: e.extra_fields }), (function () { chrome.runtime.sendMessage({ type: "refresh_data" }) })) : chrome.runtime.sendMessage({ type: "refresh_data" }), this.custom_generators) this.custom_generators[a].original_name = this.custom_generators[a].label; for (var a in this.initial_values.callbacks = Object.assign({}, this.callbacks), this.initial_values.checkboxes = Object.assign({}, this.checkboxes), this.initial_values.default_generators_settings = this.root.normalizeVueObject(this.default_generators_settings), this.initial_values.custom_generators = [], this.custom_generators) this.initial_values.custom_generators.push(Object.assign({}, this.custom_generators[a])); this.$nextTick((function () { this.any_changes = !1, toastr.success("Generators saved!", !1, { closeButton: !0, timeOut: 1e3 }) })) } else toastr.error("Load Error: " + (chrome.runtime.lastError || "FD - Unknown error occurred"), !1, { closeButton: !0, timeOut: 5e3 }), this.$nextTick((function () { this.any_changes = !1 })) }.bind(this)) }.bind(this)) }, checkForChanges: function () { if (this.custom_generators.length != this.initial_values.custom_generators.length) return !0; for (var e in this.callbacks) if (this.callbacks[e] != this.initial_values.callbacks[e] && null != this.initial_values.callbacks[e]) return !0; for (var e in this.custom_generators) for (var t in this.custom_generators[e]) if ("undefined" == typeof this.initial_values.custom_generators[e][t] || this.custom_generators[e][t] != this.initial_values.custom_generators[e][t]) return !0; for (var e in this.checkboxes) { if (this.checkboxes[e] != this.initial_values.checkboxes[e]) return !0; for (var t in this.default_generators_settings[e]) if ("dataset" == t) { if ("undefined" == typeof typeof this.initial_values.default_generators_settings[e][t]) return !0; if (this.default_generators_settings[e][t].dataset != this.initial_values.default_generators_settings[e][t].dataset) return !0; if (this.default_generators_settings[e][t].column != this.initial_values.default_generators_settings[e][t].column) return !0 } else if ("undefined" == typeof this.initial_values.default_generators_settings[e][t] || this.default_generators_settings[e][t] != this.initial_values.default_generators_settings[e][t]) return !0 } return !1 }, addCustomGenerator: function () { this.custom_generators.push({ label: "", callback: "" }), this.$nextTick((function () { $("html, body").animate({ scrollTop: $(document).height() }, 500), this.root.resetBsEvents() })) }, removeField: function (e) { confirm("Delete this generator?\n\nFields linked with it will be deleted too!") && (this.removed_generators.push(this.custom_generators[e].label), this.custom_generators.splice(e, 1), this.$nextTick((function () { this.root.resetBsEvents() }))) }, generatePreview: function (e, t) { if ("string" == typeof e) if (!0 === this.checkboxes[e]) chrome.runtime.sendMessage({ type: "run_callback", callback: this.callbacks[e], overwrite_settings: Object.assign({}, this.default_generators_settings[e]), field: e }, function (e) { this.parseGeneratedPreviewCallback(e, t) }.bind(this)); else { var a = e; "cloud_emails" === this.checkboxes[e] ? a = "Fake Data Cloud/Email" : "cloud_phone" === this.checkboxes[e] ? a = "Fake Data Cloud/Phone" : "cloud_country" === this.checkboxes[e] ? a = "Fake Data Cloud/Country" : "cloud_state" === this.checkboxes[e] ? a = "Fake Data Cloud/State" : "cloud_city" === this.checkboxes[e] ? a = "Fake Data Cloud/City" : "cloud_address" === this.checkboxes[e] ? a = "Fake Data Cloud/Address" : "cloud_zip" === this.checkboxes[e] ? a = "Fake Data Cloud/Zip" : "dataset" === this.checkboxes[e] && (a = "Fake Data/Dataset"), chrome.runtime.sendMessage({ type: "get_faker_original_callback_enforce", generator: a, overwrite_settings: this.default_generators_settings[e], as_generator: e }, function (e) { this.parseGeneratedPreviewCallback(e, t) }.bind(this)) } else "dataset" == e.generator ? chrome.runtime.sendMessage({ type: "get_faker_original_callback_enforce", generator: "Fake Data/Dataset", overwrite_settings: e, as_generator: e.label }, function (e) { this.parseGeneratedPreviewCallback(e, t) }.bind(this)) : chrome.runtime.sendMessage({ type: "run_callback", callback: e.callback, overwrite_settings: Object.assign({}, e), field: e }, function (e) { this.parseGeneratedPreviewCallback(e, t) }.bind(this)) }, parseGeneratedPreviewCallback: function (e, t) { if (e) if ("error" != e.type) { var a; if ("string" == typeof e.callback_before && e.callback_before) if (3 == this.root.getManifestVersion()) a = this.root.evalMV3CodeInSandbox(e.callback_before); else { var s = new Function(e.callback_before); a = s(null) } a && a.then || (a = new Promise((function (e) { e() }))), a.then(function () { var a = e.text || ""; if ("object" === e.text_type) { var s = JSON.parse(e.text, this.root.functionReviver); if (null !== s && s.constructor === Array && "function" === typeof s[0]) { var i = new Function("return " + s[0])(); s[0] = null, a = i.apply(this, s) } else a = JSON.stringify(s, this.root.functionReplacer) } else if ("function" === e.text_type) { i = new Function("return " + e.text)(); a = i.apply(this, [null]) } if ("object" != typeof a || a.constructor != Promise) { var o = a; a = new Promise((function (e) { e(o) })) } a.then(function (a) { if (this.showGeneratedPreview(a || "", t.target), "string" == typeof e.callback_after && e.callback_after) if (3 == this.root.getManifestVersion()) this.root.evalMV3CodeInSandbox(e.callback_after); else { var s = new Function(e.callback_after); s(null) } }.bind(this)) }.bind(this)) } else this.showPreviewError(e.result || "Error", t.target); else this.showPreviewError("Failed to run", t.target) }, showGeneratedPreview: function (e, t) { "" != e.toString() && $(t).closest(".card-footer").find(".preview_label").removeClass("red-text").addClass("text-white").find(".preview_label_text").text(e) }, showPreviewError: function (e, t) { $(t).closest(".card-footer").find(".preview_label").removeClass("text-white").addClass("red-text").find(".preview_label_text").text(e.name || "Error") }, handleScrollEvent: function () { var e, t = $("body").scrollTop(); e = 0 == $("#tab_custom .card:first").length ? $(".tab-content").outerHeight() : $("#tab_custom .card:first").offset().top; var a = t + 50; a < e - 150 && (a = e - 150), $(".add_new_generator_btn").css("top", a) }, openOptionsModal: function (e, t, a) { var s = {}; if ("Default" == a) switch (s = Object.assign({}, this.default_generators_settings[e]), this.checkboxes[e]) { case !0: s.generator = "custom"; break; case "dataset": s.generator = this.checkboxes[e]; break; default: s.generator = e } else s = Object.assign({}, t); this.optionsField = { type: "Generator", subtype: a, id: e, object: s, onsave: this.saveOptionsModal }, this.$nextTick((function () { $("#field_options_modal").modal("show") })) }, saveOptionsModal: function (e) { if ("Default" == e.subtype) this.default_generators_settings[e.id] = Object.assign({}, e.object); else for (var t in this.custom_generators) if (this.custom_generators[t].label == e.id) { Object.assign(this.custom_generators[t], e.object), this.custom_generators = Object.assign([], this.custom_generators); break } $("#field_options_modal").modal("hide") }, rateThumbUp: function () { this.show_sub_rate_question = "rate_up" }, rateThumbDown: function () { this.show_sub_rate_question = "rate_down" }, rateClose: function () { this.show_rate_question = !1, this.show_sub_rate_question = null, this.rate_answered = !0, this.root.getStorageEngine().set({ rate_answered: this.rate_answered }) }, rateSendFeedback: function () { this.root.openFeedbackModal(), this.rateClose() }, dismissMv3Warning: function () { this.dismiss_mv3_warning = !0, this.root.getStorageEngine().set({ dismiss_mv3_warning: !0 }) }, dragStart: function () { this.$refs["page-generators"].classList.add("dragging") }, dragEnd: function () { this.$refs["page-generators"].classList.remove("dragging") } } }, ga = va, ba = (a("727d"), Object(b["a"])(ga, ma, ha, !1, null, null, null)), wa = ba.exports, ka = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "page-account" }, [a("ul", { staticClass: "nav md-tabs nav-justified elegant-color-dark" }, [a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { "active-class": "active", to: "/account/license" } }, [e._v("Fake Data License")])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { "active-class": "active", to: "/account/license-faq" } }, [e._v("Questions About Licenses")])], 1)]), a("div", { staticClass: "tab-content grey darken-3 card" }, [a("div", { staticClass: "tab-pane in active", attrs: { role: "tabpanel" } }, [a("div", ["license" == e.active_tab ? a("account-license", { attrs: { root: e.root } }) : e._e(), "license-faq" == e.active_tab ? a("account-license-faq", { attrs: { root: e.root } }) : e._e()], 1)])])]) }, ya = [], xa = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", [e.root.license_data ? a("div", [a("div", { staticClass: "mb-4 mt-3 text-center" }, [e.license_expired || e.license_blacklisted ? e.license_expired ? a("span", { staticClass: "text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "frown"] } }), e._v("  Oh no! Your license has expired."), a("br"), e._v("You are not a Pro user anymore.")], 1) : e.license_blacklisted ? a("span", { staticClass: "text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "frown"] } }), e._v("  Oh no! Your license has been blacklisted."), a("br"), e._v("You are not a Pro user anymore.")], 1) : e._e() : a("span", { staticClass: "text-success" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trophy"] } }), e._v("  You are cool!")], 1)]), a("div", { staticClass: "row" }, [a("div", { staticClass: "col-md-6 text-center" }, [a("p", [a("span", {}, [e._v("Licensed to:")]), a("br"), a("span", { staticClass: "text-mono", class: { "text-success": !e.license_expired && !e.license_blacklisted, "text-danger": e.license_expired || e.license_blacklisted } }, [e._v(e._s(e.root.license_data.name))])]), a("p", [a("span", {}, [e._v("Email:")]), a("br"), a("span", { staticClass: "text-mono", class: { "text-success": !e.license_expired && !e.license_blacklisted, "text-danger": e.license_expired || e.license_blacklisted } }, [e._v(e._s(e.root.license_data.email))])]), a("p", [a("span", {}, [e._v("Pro Features:")]), a("br"), e.license_expired ? a("span", { staticClass: "text-danger" }, [e._v(" Pro features were available until " + e._s(e.root.parseDate(1e3 * e.root.license_data.expire)) + " ")]) : e.license_blacklisted ? a("span", { staticClass: "text-danger" }, [e._v(" Pro features are not available anymore. ")]) : e.root.license_data.expire ? a("span", { staticClass: "text-success" }, [e._v(" All Pro features are available until"), a("br"), e._v(e._s(e.root.parseDate(1e3 * e.root.license_data.expire)) + " ")]) : a("span", { staticClass: "text-success" }, [e._v(" All Pro features have been unlocked forever! ")])]), a("div", { staticClass: "mt-4 mb-3" }, [a("button", { staticClass: "btn btn-sm btn-elegant", attrs: { type: "button" }, on: { click: e.seeLicenseCode } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "key"] } }), e._v("  See License Key ")], 1), a("button", { staticClass: "btn btn-sm btn-unique", attrs: { type: "button" }, on: { click: e.removeLicense } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"] } }), e._v("  Remove License ")], 1)])]), a("div", { staticClass: "col-md-6 text-center" }, [a("p", [a("span", {}, [e._v("Ultra Features:")]), a("br"), e.license_expired || e.license_blacklisted ? a("span", { staticClass: "text-danger" }, [e._v(" Not available with this license ")]) : e.root.cloud_enabled ? e.root.ultra_subscription_meta ? e.root.ultra_subscription_meta.subscription_active ? a("span", { staticClass: "text-success" }, [e._v(" All Ultra features have been unlocked! ")]) : e.root.ultra_subscription_meta.subscription_active ? e._e() : a("span", { staticClass: "orange-text" }, [e._v(" You are not subscribed to Fake Data Ultra ")]) : a("span", { staticClass: "lime-text" }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  Loading Ultra Subscription status ")], 1) : a("span", { staticClass: "amber-text" }, [e._v(" Fake Data is running offline ")])]), e.root.cloud_enabled && !e.license_expired && !e.license_blacklisted && e.root.ultra_subscription_meta && e.root.ultra_subscription_meta.subscription_active ? a("p", [a("span", [e._v("Next renew date:")]), a("br"), a("span", { staticClass: "text-success" }, [e._v(e._s(e.root.parseDate(e.root.ultra_subscription_meta.subscription_renew_date)))])]) : e._e(), e.license_expired || e.license_blacklisted ? e._e() : a("div", { staticClass: "mt-4 mb-3" }, [e.root.cloud_enabled ? e._e() : a("span", [a("button", { staticClass: "btn btn-sm success-color-dark text-white", attrs: { id: "enable-ultra-cloud-features", type: "button" }, on: { click: function (t) { return e.showEnableFDCloudModal() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "cloud"] } }), e._v("  Enable Cloud features")], 1)]), e.root.cloud_enabled && e.root.ultra_subscription_meta ? a("div", [e.root.ultra_subscription_meta.subscription_active ? a("span", [a("a", { staticClass: "btn btn-sm success-color-dark text-white", attrs: { href: "https://www.fakedata.pro/manage-subscription?user=" + encodeURIComponent(e.root.license_key), id: "manage-subscription-button", target: "_blank" } }, [a("span", [a("font-awesome-icon", { attrs: { icon: ["fas", "user-cog"] } }), e._v("  Manage subscription")], 1)])]) : e.root.ultra_subscription_meta.subscription_active ? e._e() : a("span", [a("a", { staticClass: "btn btn-sm success-color-dark text-white", attrs: { href: "https://www.fakedata.pro/subscription?user=" + encodeURIComponent(e.root.license_key), target: "_blank" } }, [e.root.ultra_subscription_meta.had_trial ? a("span", [a("font-awesome-icon", { attrs: { icon: ["fas", "shopping-cart"] } }), e._v("  Subscribe for $2.99/month")], 1) : a("span", [a("font-awesome-icon", { attrs: { icon: ["fas", "shopping-cart"] } }), e._v("  Start free 30-day trial")], 1)])])]) : e._e(), e.root.cloud_enabled && !e.root.isUltraSubscriber() && e.root.ultra_subscription_meta ? a("div", [a("button", { staticClass: "btn btn-sm btn-unique text-white", attrs: { type: "button" }, on: { click: function (t) { return e.disableFDCloud() } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "cloud"] } }), e._v("  Disable Cloud features")], 1)]) : e._e()])])])]) : a("div", [a("div", { staticClass: "text-center mb-5 mt-3 text-danger" }, [a("span", {}, [a("font-awesome-icon", { attrs: { icon: ["fas", "frown"] } }), e._v("  You are not a Pro user!")], 1)]), a("form", { on: { submit: function (t) { return t.preventDefault(), e.activateLicense.apply(null, arguments) } } }, [a("div", { staticClass: "md-form unique-textarea" }, [a("font-awesome-icon", { class: ["prefix", "grey-text", "fs-25px"], attrs: { icon: ["fas", "key"] } }), a("textarea", { directives: [{ name: "model", rawName: "v-model", value: e.license_key, expression: "license_key" }], staticClass: "form-control md-textarea text-mono text-white background-none", attrs: { id: "license_key", rows: "2", type: "text" }, domProps: { value: e.license_key }, on: { input: function (t) { t.target.composing || (e.license_key = t.target.value) } } }), a("label", { attrs: { for: "license_key" } }, [e._v("License Key")])], 1), a("div", { staticClass: "md-form text-center" }, [a("button", { staticClass: "btn btn-md btn-dark-green", attrs: { disabled: !e.license_key, "data-loading-text": "Loading...", type: "submit" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "unlock-alt"] } }), e._v("  Unlock ")], 1), a("a", { staticClass: "btn btn-md btn-unique", attrs: { href: "https://www.fakedata.pro/license", target: "_blank" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "shopping-cart"] } }), e._v("  Buy Pro License for €" + e._s(e.root.getProLicensePrice()))], 1)])])]), a("hr"), e.root.license_data ? e.root.ultra_subscription_meta && e.root.ultra_subscription_meta.subscription_active ? e._e() : a("div", [a("p", { staticClass: "h5 text-white mt-4 mb-3" }, [e._v("Why you should subscribe to the Ultra Plan?")]), e._m(1)]) : a("div", [a("p", { staticClass: "h5 text-white mt-4 mb-3" }, [e._v("Why you should purchase the Pro License?")]), e._m(0)]), a("div", { staticClass: "card card-cascade narrower elegant-color-dark mt-5" }, [e._m(2), a("div", { staticClass: "px-4" }, [a("div", { staticClass: "table-wrapper" }, [a("table", { staticClass: "table table-hover mb-0 table_free_vs_pro" }, [a("thead", [a("tr", [a("th", { staticClass: "th-lg" }, [e._v("Feature")]), a("th", { staticClass: "text-center position-relative", class: { "elegant-color": !e.root.isLicenseActive() } }, [e._v("Basic"), a("br"), a("small", [e._v("(Free forever)")]), a("span", { staticStyle: { position: "absolute", left: "91px", top: "17px", "z-index": "2" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "chevron-right"] } })], 1)]), a("th", { staticClass: "text-center position-relative", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [e._v("Pro"), a("br"), a("small", [e._v("(€" + e._s(e.root.getProLicensePrice()) + " one-time)")]), a("span", { staticStyle: { position: "absolute", left: "107px", top: "17px" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "chevron-right"] } })], 1)]), a("th", { staticClass: "text-center", class: { "elegant-color": e.root.isUltraSubscriber() } }, [e._v("Ultra"), a("br"), a("small", [e._v("(€2.99/month)")])])])]), a("tbody", [a("tr", [a("td", [e._v("Regular updates with bug fixes and new features")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Create unlimited Custom Generators")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Use RegEx with Unnamed Fields")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Use Custom Code with Generators")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Use Custom Code with Fields")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Backup & Restore data")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Manage global behavior of text inputs, checkboxes and <select> elements")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Manage individual <select> elements on web pages")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Manage individual checkboxes and radio buttons on web pages")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Powerful code editor with syntax highlight")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Advanced settings and customisations for each Generator")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Advanced settings and customisations for each Field")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Custom Code callbacks before and after inserting data")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Import and use your own JavaScript libraries")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Properly fill Google Forms custom inputs")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Custom integration with third party libraries and Google Sheets")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Import your own data through CSV files")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Enable Fake Data public API for using with UI test frameworks")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [e._m(3), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [a("td", [e._v("Generate unlimited private disposable email addresses that will catch incoming emails directly in Fake Data")]), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)]), a("tr", [e._m(4), a("td", { staticClass: "fd_free", class: { "elegant-color": !e.root.isLicenseActive() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_pro", class: { "elegant-color": e.root.isLicenseActive() && !e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-danger"], attrs: { icon: ["fas", "times"] } })], 1), a("td", { staticClass: "fd_ultra", class: { "elegant-color": e.root.isUltraSubscriber() } }, [a("font-awesome-icon", { class: ["text-success"], attrs: { icon: ["fas", "check"] } })], 1)])])])])])]), a("enable-fd-cloud-modal", { attrs: { callback: e.enableFDCloud } }), a("license-key-modal", { attrs: { root: e.root } })], 1) }, Ca = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", { staticClass: "mb-5" }, [a("li", [e._v("You get some pretty cool features. See the table below.")]), a("li", [e._v("You want to get shit done immediately without writing JavaScript code over and over.")]), a("li", [e._v("You will be able to write your code in an actual code editor, not in a lame "), a("code", [e._v("<textarea>")]), e._v(".")]), a("li", [e._v("You support a tool that you probably use on a regular basis.")]), a("li", [e._v("It's a one time payment and you can use it on as many browsers as you want, forever.")]), a("li", [e._v("It's cheap. It's even less than a gram of weed, or so I've heard.")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("ul", { staticClass: "mb-5" }, [a("li", [e._v("You want to take your testing to the next level.")]), a("li", [e._v("Besides all features included in Pro license, you also get some amazing cloud features.")]), a("li", [e._v("Generate real zipcodes for real addresses that actually exists.")]), a("li", [e._v("Testing a lot of forms also means receiving a lot of emails in your personal inbox, which is annoying as hell. Fake Data will help you with that by generating unlimited random addresses that can actually receive emails.")]), a("li", [e._v("Modern websites require SMS verifications. Fake Data will give you a phone number to use when filling forms, and will catch all the messages coming to it.")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "view view-cascade gradient-card-header text-center dark-gradient narrower py-3 mx-4 mb-3" }, [a("span", { staticClass: "white-text mx-3" }, [e._v("Basic vs. Pro vs. Ultra")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("td", [e._v("Generate real address and zipcode combinations that actually exist in this world"), a("br"), a("small", [e._v("* Please see the list of "), a("a", { staticClass: "text-white underline", attrs: { href: "https://docs.fakedata.pro/how-to-use-fake-data/ultra/generate-real-addresses-and-zip-codes.html#change-the-country-of-the-generated-addresses", target: "_blank" } }, [e._v("supported countries here")]), e._v(". More will be added in time or at request")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("td", [e._v("Get your own dedicated phone number to receive SMS and MMS messages directly in Fake Data"), a("br"), a("small", [e._v("* U.S. phone number by default")])]) }], $a = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade license-code-modal", attrs: { role: "dialog", tabindex: "-1" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [e._m(0), a("div", { staticClass: "modal-body" }, [a("div", { staticClass: "text-left" }, [a("code", [e._v(e._s(e.root.license_key))])])]), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-unique", attrs: { "data-dismiss": "modal", type: "button" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Close ")], 1)])])])]) }, Sa = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title" }, [e._v("Your Fake Data License Key")]), a("button", { staticClass: "close", attrs: { "aria-label": "Close", "data-dismiss": "modal", type: "button" } }, [a("span", { staticClass: "text-white", attrs: { "aria-hidden": "true" } }, [e._v("×")])])]) }], Aa = { name: "license-key-modal", props: { root: {} } }, Fa = Aa, Da = Object(b["a"])(Fa, $a, Sa, !1, null, null, null), Ea = Da.exports; const ja = a("5928"); var Oa = { components: { LicenseKeyModal: Ea, EnableFdCloudModal: it }, name: "account.license", data() { return {} }, props: ["root", "license_key"], computed: { license_expired: function () { if (!this.root.license_data) return !0; if (!this.root.license_data.expire) return !1; var e = (new Date).getTime(); return 1e3 * this.root.license_data.expire <= e }, license_blacklisted: function () { return this.root.isLicenseBlacklisted() } }, mounted() { $("body > .enable-fd-cloud-modal").remove(), $("body > .license-code-modal").remove(), $("body").append($(".enable-fd-cloud-modal")), $("body").append($(".license-code-modal")) }, methods: { activateLicense: function () { try { var e = this.root.getPublicKey(), t = this.license_key, a = new ja; a.importKey(e); var s = a.decryptPublic(t, "json"); if ("object" != typeof s) throw "Not a valid Object"; if ("object" !== typeof s) throw "This ain't a license"; if ("undefined" == typeof s.type) { for (var i = ["name", "email", "expire", "seed"], o = 0; o < i.length; o++)if ("undefined" == typeof s[i[o]]) throw "This ain't a license" } else if ("license" != s.type) throw "This ain't a license"; if (s.expire) { var n = (new Date).getTime(); if (1e3 * s.expire <= n) return void toastr.error("License key expired!", !1, { closeButton: !0, timeOut: 2e3 }) } chrome && _chrome.browserAction && _chrome.browserAction.setBadgeText && _chrome.browserAction.setBadgeText({ text: "" }), this.root.getStorageEngine().set(this.root.normalizeVueObject({ license_key: t }), function () { this.root.checkLicenseStatus(function (e) { if (chrome.runtime.sendMessage({ type: "reload_script" }), "success" != e.status) throw "Failed double-checking license"; this.license_key = "", this.root.resetBsEvents() }.bind(this)) }.bind(this)) } catch (r) { console.log(r), toastr.error("Invalid license key!", !1, { closeButton: !0, timeOut: 2e3 }) } }, removeLicense: function () { confirm("Are you really, really sure you want to do this?\n\nOf course, you can always activate the same license back any time.") && this.root.revokeLicense(function () { this.root.resetBsEvents(), chrome && _chrome.browserAction && _chrome.browserAction.setBadgeText && _chrome.browserAction.setBadgeText({ text: "" }) }.bind(this)) }, showEnableFDCloudModal: function () { $(".enable-fd-cloud-modal").modal("show") }, enableFDCloud: function () { this.root.getStorageEngine().set({ cloud_online: !0 }, function () { chrome.runtime.sendMessage({ type: "refresh_data" }), this.root.enableCloudButton(!0) }.bind(this)) }, disableFDCloud: function () { this.root.getStorageEngine().set({ cloud_online: !1 }, function () { chrome.runtime.sendMessage({ type: "refresh_data" }), this.root.enableCloudButton(!1) }.bind(this)) }, seeLicenseCode: function () { $(".license-code-modal").modal() } } }, Pa = Oa, Ma = Object(b["a"])(Pa, xa, Ca, !1, null, null, null), Ta = Ma.exports, Ua = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "license-faq-page" }, [a("p", { staticClass: "mt-3" }, [e._v("You may be asking: \"What the hell is with the two licensing options for Fake Data?\". If that's the case, then you're on the right place! Below are some questions that you may have, as well as the answers for them. They will be short, I promise.")]), a("h1", { staticClass: "mt-5 p-2 font-weight-bold fs-20px text-white bg-dark" }, [e._v("Why are there two licensing options?")]), e._m(0), a("h1", { staticClass: "mt-5 p-2 font-weight-bold fs-20px text-white bg-dark" }, [e._v("Why can't there be only one license type?")]), e._m(1), a("h1", { staticClass: "mt-5 p-2 font-weight-bold fs-20px text-white bg-dark" }, [e._v("How are the two licenses charged?")]), a("p", { staticClass: "pl-3" }, [a("strong", [e._v("Pro License")]), e._v(" is a €" + e._s(e.root.getProLicensePrice()) + " one-time payment and is yours forever. No recurring or additional costs. You pay it once and have it forever. And also you can use it on as many browsers as you want."), a("br"), a("strong", [e._v("Ultra Subscription")]), e._v(" is a recurring €2.99/month or €29.99/year payment. You will get access to Fake Data Cloud as long as your subscription is active. You can cancel it anytime you want and reactivate it as well. ")]), a("h1", { staticClass: "mt-5 p-2 font-weight-bold fs-20px text-white bg-dark" }, [e._v("How can I subscribe to the Ultra plan as a new user?")]), a("p", { staticClass: "pl-3" }, [e._v(" You have to first purchase a Pro License and after that you can upgrade it to Ultra Subscription. Don't worry, there is a 30-day free trial, so you don't have to pay twice. ")]), a("h1", { staticClass: "mt-5 p-2 font-weight-bold fs-20px text-white bg-dark" }, [e._v("Can I test the cloud features before subscribing?")]), a("p", { staticClass: "pl-3" }, [e._v(" After you purchase a Pro License you will be able to start a 30-day free trial for Ultra Subscription. If you don't like it, you can cancel it anytime. ")]), a("h1", { staticClass: "mt-5 p-2 font-weight-bold fs-20px text-white bg-dark" }, [e._v("What happens to the Pro License if Ultra Subscription is canceled?")]), a("p", { staticClass: "pl-3" }, [e._v(" Your Pro License is yours forever. It won't expire and you won't loose access to it (unless you do something really bad, like sharing it with multiple people). Ultra Subscription can be cancelled and reactivated anytime you want. ")])]) }, qa = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", { staticClass: "pl-3" }, [e._v(" The two types of licenses covers two different set of features:"), a("br"), a("strong", { staticClass: "underline" }, [e._v("Pro License:")]), e._v(" - covers all the features of Fake Data that can be implemented offline"), a("br"), a("strong", { staticClass: "underline" }, [e._v("Ultra Subscription:")]), e._v(" - covers all the features of Fake Data that need a cloud server to work"), a("br")]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("p", { staticClass: "pl-3" }, [e._v(" To be fair with users. Most of the features of Fake Data work offline, without any human supervision, external servers, maintenance costs, etc. Once implemented they will work forever."), a("br"), e._v(" The cloud features on the other hand have monthly costs to maintain and keep them running. So it would be fair to not charge monthly costs to users that don't want or don't need the cloud features. ")]) }], La = { name: "account.license-faq", props: ["root"] }, Ba = La, Na = Object(b["a"])(Ba, Ua, qa, !1, null, null, null), Ga = Na.exports, Ia = { components: { AccountLicense: Ta, AccountLicenseFaq: Ga, ProRequired: F }, props: ["root"], data: function () { return { active_tab: this.$route.params.kind || null } }, watch: { $route: function () { this.active_tab = this.$route.params.kind || null }, active_tab: { immediate: !0, handler: function () { this.active_tab ? this.root.resetBsEvents() : this.changeTab("license") } } }, mounted: function () { this.root.currentView = this, this.$nextTick((function () { $("body").scrollTop(0), $(document).scrollTop(0) })) }, methods: { changeTab: function (e) { this.active_tab = e, this.$router.push({ path: "/account/" + e }) } } }, za = Ia, Ra = (a("f420"), Object(b["a"])(za, ka, ya, !1, null, null, null)), Va = Ra.exports, Ya = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "page-cloud" }, [e.root.isUltraSubscriber() && e.root.cloud_enabled ? a("div", [a("ul", { staticClass: "nav md-tabs nav-justified elegant-color-dark" }, [a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/cloud/email", "active-class": "active" } }, [e._v("Email Inbox "), e.root.cloud_notifications_badge && e.root.cloud_notifications_count.emails > 0 ? a("span", { staticClass: "badge badge-danger ml-2" }, [e._v(e._s(e.root.cloud_notifications_count.emails))]) : e._e()])], 1), a("li", { staticClass: "nav-item" }, [a("router-link", { staticClass: "nav-link", attrs: { to: "/cloud/sms", "active-class": "active" } }, [e._v("SMS Inbox "), e.root.cloud_notifications_badge && e.root.cloud_notifications_count.sms > 0 ? a("span", { staticClass: "badge badge-danger ml-2" }, [e._v(e._s(e.root.cloud_notifications_count.sms))]) : e._e()])], 1)]), a("div", { staticClass: "tab-content grey darken-3 card" }, [e.root.cloud_notifications_badge && (e.root.cloud_notifications_count.emails > 0 || e.root.cloud_notifications_count.sms > 0) && !e.root.ultra_subscription_meta.subscription_active ? a("div", { staticClass: "alert alert-danger", staticStyle: { "margin-bottom": "30px" }, attrs: { role: "alert" } }, [a("p", { staticClass: "no-margin" }, [e._v("Your Ultra Subscription is not active anymore. This means that Fake Data Cloud server won't be able to show you any new incoming message that comes for you. That's a unfortunate! Who knows what you may have received?")])]) : e._e(), a("div", { staticClass: "tab-pane in", class: { active: "email" == e.active_tab }, attrs: { id: "tab_email", role: "tabpanel" } }, ["email" == e.active_tab ? a("cloud-email", { attrs: { root: e.root }, model: { value: e.email_data, callback: function (t) { e.email_data = t }, expression: "email_data" } }) : e._e()], 1), a("div", { staticClass: "tab-pane in", class: { active: "sms" == e.active_tab }, attrs: { id: "tab_sms", role: "tabpanel" } }, ["sms" == e.active_tab ? a("cloud-sms", { attrs: { root: e.root }, model: { value: e.sms_data, callback: function (t) { e.sms_data = t }, expression: "sms_data" } }) : e._e()], 1)])]) : a("div", [a("div", { staticClass: "tab-content grey darken-3 card" }, [a("div", { staticClass: "tab-pane in active", attrs: { role: "tabpanel" } }, [a("h5", { staticClass: "text-center" }, [a("router-link", { staticClass: "pro_required text-white", attrs: { to: "/account/license" } }, [a("span", { staticClass: "text-danger" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "lock"] } }), e._v("  Only for Ultra Subscribers")], 1)])], 1), e._m(0)])])])]) }, Wa = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "mt-5 white-space-initial" }, [a("p", [e._v("Did you know that Fake Data can generate for you real disposable emails?")]), a("p", [e._v("This means that when you fill email fields inside forms, Fake Data will insert a random email address that will be able to catch incoming spam emails directly on this page. How cool is that?")]), a("p", [e._v("Unlike other disposable email services, Fake Data has some advantages:")]), a("ul", [a("li", [e._v("The emails are private and only you can see them.")]), a("li", [e._v("Each email address generated is unique and yours. No one will be able to re-use the address and receive your emails.")]), a("li", [e._v("The email address is generated on the fly, in the moment you fill the form with Fake Data. So no more copy-pasting or opening additional websites to get the address.")]), a("li", [e._v("The generated email addresses are yours to keep forever and don't expire as long as you receive at least 1 message per year.")]), a("li", [e._v("You get to generate unlimited addresses.")]), a("li", [e._v("You can customise the addresses that are generated.")])]), a("p", { staticClass: "mt-5" }, [e._v("But wait, there is more! Fake Data will also give your own personal phone number that can receive SMS and MMS messages.")]), a("ul", [a("li", [e._v("The phone number is dedicated to your account. Only you can see the messages you receive.")]), a("li", [e._v("The phone number is yours to keep as long as you keep your subscription active.")])])]) }], Ka = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { attrs: { id: "cloud_email_tab" } }, [a("div", { staticClass: "text-left float-left" }, [a("div", { staticClass: "form-check pl-0 inline-block", staticStyle: { height: "20px", position: "relative", top: "10px", left: "20px", "margin-right": "10px" } }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.check_all, expression: "check_all" }], staticClass: "filled-in form-check-input", attrs: { id: "email_check_all_entries", type: "checkbox" }, domProps: { checked: Array.isArray(e.check_all) ? e._i(e.check_all, null) > -1 : e.check_all }, on: { click: function (t) { return e.toggleCheckAll() }, change: function (t) { var a = e.check_all, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && (e.check_all = a.concat([o])) : n > -1 && (e.check_all = a.slice(0, n).concat(a.slice(n + 1))) } else e.check_all = i } } }), a("label", { staticClass: "form-check-label inline-block", attrs: { for: "email_check_all_entries" } })]), e.refreshing ? a("button", { staticClass: "btn btn-sm elegant-color-dark", attrs: { disabled: "" } }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  Refreshing...")], 1) : a("button", { staticClass: "btn btn-sm elegant-color-dark", on: { click: e.refreshEntries } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "sync"] } }), e._v("  Refresh")], 1), a("div", { staticClass: "dropdown inline-block" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm dropdown-toggle", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e._v(" Show " + e._s(e.filters.show || "all") + " ")]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_generators_menu" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.filters.show = null } } }, [e._v("Show all")]), a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.filters.show = "unread" } } }, [e._v("Show unread")])])]), a("button", { staticClass: "btn btn-sm elegant-color-dark", on: { click: function (t) { e.enable_search = !e.enable_search } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "search"] } }), e._v("  Search")], 1)]), a("div", { staticClass: "text-right float-right" }, [e.mark_as_read_loading ? a("button", { staticClass: "btn btn-sm elegant-color-dark pl-3 pr-3", attrs: { disabled: "" } }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1) : a("button", { staticClass: "btn btn-sm elegant-color-dark pl-3 pr-3", attrs: { title: "Mark all as read" }, on: { click: e.markAllAsRead } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "envelope-open-text"] } })], 1), e.selected_entries.length > 0 ? a("button", { staticClass: "btn btn-sm btn-unique", on: { click: e.deleteMultipleEmails } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"] } }), e._v("  Delete selected")], 1) : e._e(), a("button", { staticClass: "btn btn-sm elegant-color-dark", on: { click: e.showEmailSettingsModal } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "cog"] } })], 1)]), a("div", { staticClass: "clearfix" }), a("div", { staticClass: "slider", class: { closed: !e.enable_search }, staticStyle: { height: "80px" } }, [a("form", { staticClass: "form-inline md-form form-sm unique-textarea search_form", on: { submit: function (t) { return t.stopPropagation(), t.preventDefault(), e.searchEntries.apply(null, arguments) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "search"], size: "sm" } }), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.search_field, expression: "search_field" }], staticClass: "form-control form-control-sm ml-3 w-95 text-white", attrs: { type: "text", placeholder: "Search", "aria-label": "Search" }, domProps: { value: e.search_field }, on: { input: function (t) { t.target.composing || (e.search_field = t.target.value) } } })], 1)]), e.loading_all ? a("div", { staticClass: "mt-5" }, [a("h4", { staticClass: "text-center" }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1)]) : a("div", [e.email_list.length ? a("table", { staticClass: "table table-borderless", attrs: { id: "cloud_email_table" } }, [a("tbody", [e._l(e.email_list, (function (t) { return a("tr", { staticClass: "text-white", class: { "elegant-color-dark": !t.read, "elegant-color-light": t.read, "grey-text": t.read }, on: { click: function (a) { return e.readEmail(t) } } }, [a("td", { staticClass: "state-col", attrs: { width: "30" }, on: { click: function (e) { e.stopPropagation() } } }, ["" == t.state ? a("span", [a("div", { staticClass: "form-check pl-0", staticStyle: { height: "20px" } }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.selected_entries, expression: "selected_entries" }], staticClass: "filled-in form-check-input", attrs: { id: "email_" + t.id, type: "checkbox" }, domProps: { value: t, checked: Array.isArray(e.selected_entries) ? e._i(e.selected_entries, t) > -1 : e.selected_entries }, on: { change: function (a) { var s = e.selected_entries, i = a.target, o = !!i.checked; if (Array.isArray(s)) { var n = t, r = e._i(s, n); i.checked ? r < 0 && (e.selected_entries = s.concat([n])) : r > -1 && (e.selected_entries = s.slice(0, r).concat(s.slice(r + 1))) } else e.selected_entries = o } } }), a("label", { staticClass: "form-check-label inline-block", attrs: { for: "email_" + t.id } })])]) : "deleting" == t.state ? a("span", [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1) : e._e()]), a("td", { staticClass: "text-overflow" }, [e._v(e._s(t.email_from[0].full))]), a("td", { staticClass: "text-overflow" }, [e._v(e._s(t.email_subject))]), a("td", { staticClass: "text-right", staticStyle: { width: "180px" } }, [e._v(e._s(e.root.parseDate(t.email_date, !0, !0)))])]) })), a("tr", [e.has_more ? a("td", { staticClass: "pl-0 pr-0", attrs: { colspan: "4" } }, [a("button", { staticClass: "btn elegant-color-dark btn-lg btn-block", attrs: { type: "button", disabled: e.loading_all || e.refreshing || e.load_more_loading }, on: { click: e.loadMoreEmails } }, [e.loading_all || e.refreshing || e.load_more_loading ? a("span", [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  Loading... ")], 1) : a("span", [a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-down"] } }), e._v("  Load More ")], 1)])]) : e._e()])], 2)]) : a("div", [a("div", { staticClass: "mt-4 text-center" }, [e._v("There are no emails to show")])])]), a("div", { staticClass: "modal fade cloud_email_contents_modal", attrs: { id: "cloud_email_contents_modal", tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [e.active_email ? a("div", { staticClass: "modal-content elegant-color-dark" }, [a("div", { key: e.random_key, staticClass: "modal-body" }, [a("div", { staticClass: "email-controls position-absolute", staticStyle: { right: "10px", "z-index": "100" } }, [a("button", { staticClass: "btn elegant-color btn-sm dropdown-toggle", attrs: { "data-toggle": "dropdown" } }), a("div", { staticClass: "dropdown-menu dropdown-menu-right" }, [e.active_email_options.show_source ? e._e() : a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { return t.preventDefault(), e.showEmailSource.apply(null, arguments) } } }, [e._v("View Source")]), e.active_email_options.show_source ? a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { return t.preventDefault(), e.showEmailContents.apply(null, arguments) } } }, [e._v("View Email")]) : e._e(), a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { return t.preventDefault(), e.downloadEmailContents.apply(null, arguments) } } }, [e._v("Download as .eml")]), a("a", { staticClass: "dropdown-item red-text", attrs: { href: "#" }, on: { click: function (t) { return t.preventDefault(), e.deleteActiveEmail(e.active_email) } } }, [e._v("Delete Email")])])]), a("div", { staticClass: "unique-textarea mt-0" }, [a("small", [e._v("Subject:")]), e._v("  "), a("small", [e._v(e._s(e.active_email.email_subject))])]), e.active_email.email_date ? a("div", { staticClass: "unique-textarea mt-2" }, [a("small", [e._v("Date:")]), e._v("  "), a("small", [e._v(e._s(e.root.parseDate(e.active_email.email_date, !0)))])]) : e._e(), e.active_email.email_from && e.active_email.email_from.length ? a("div", { staticClass: "unique-textarea mt-1" }, [a("small", [e._v("From:")]), e._v("  "), e._l(e.active_email.email_from, (function (t) { return a("a", { staticClass: "badge badge-pill darken-3", class: { red: e.emailIsBlacklisted(t), grey: !e.emailIsBlacklisted(t) }, attrs: { title: e.emailIsBlacklisted(t) ? "Email is blacklisted" : "Add to Blacklist" }, on: { click: function (a) { return e.addEmailToBlacklist(t, "from") } } }, [t.loading ? a("span", [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  ")], 1) : e._e(), e._v(e._s(t.full))]) }))], 2) : e._e(), e.active_email.email_to && e.active_email.email_to.length ? a("div", { staticClass: "unique-textarea mt-1" }, [a("small", [e._v("To:")]), e._v("  "), e._l(e.active_email.email_to, (function (t) { return a("a", { staticClass: "badge badge-pill darken-3", class: { red: e.emailIsBlacklisted(t), grey: !e.emailIsBlacklisted(t) }, attrs: { title: e.emailIsBlacklisted(t) ? "Email is blacklisted" : "Add to Blacklist" }, on: { click: function (a) { return e.addEmailToBlacklist(t, "to") } } }, [t.loading ? a("span", [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  ")], 1) : e._e(), e._v(e._s(t.full))]) }))], 2) : e._e(), e.active_email.email_cc && e.active_email.email_cc.length ? a("div", { staticClass: "unique-textarea mt-1" }, [a("small", [e._v("Cc:")]), e._v("  "), e._l(e.active_email.email_cc, (function (t) { return a("span", { staticClass: "badge badge-pill grey darken-3" }, [e._v(e._s(t.full))]) }))], 2) : e._e(), e.active_email.email_bcc && e.active_email.email_bcc.length ? a("div", { staticClass: "unique-textarea mt-1" }, [a("small", [e._v("Bcc:")]), e._v("  "), e._l(e.active_email.email_bcc, (function (t) { return a("span", { staticClass: "badge badge-pill grey darken-3" }, [e._v(e._s(t.full))]) }))], 2) : e._e(), e.active_email_options.loading ? a("div", { staticClass: "text-center mt-5" }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1) : a("div", { staticClass: "h-100" }, [e.active_email.email_attachments && e.active_email.email_attachments.length ? a("div", { staticClass: "unique-textarea mt-1" }, [a("small", [e._v("Attachments:")]), e._v("  "), e._l(e.active_email.email_attachments, (function (t) { return a("span", { staticClass: "badge badge-pill grey darken-3" }, [a("a", { staticClass: "text-white", attrs: { href: t.link } }, [e._v(e._s(t.name) + " (" + e._s(e.root.prettyBytes(t.size)) + ")")])]) }))], 2) : e._e(), e._m(0)])])]) : e._e()])]), a("cloud-entries-settings-modal", { attrs: { page: "email", blacklist: e.blacklist } })], 1) }, Ha = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "mt-2", attrs: { id: "email_content" } }, [a("iframe", { attrs: { sandbox: "allow-popups allow-popups-to-escape-sandbox", id: "email_content_iframe" } })]) }], Ja = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade cloud-settings-modal", attrs: { role: "dialog", tabindex: "-1" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title" }, [e._v("Manage " + e._s("email" == e.page ? "Email" : "SMS") + " Settings")]), e._m(0)]), a("div", { staticClass: "modal-body" }, [a("div", { staticClass: "text-left" }, [a("div", { staticClass: "position-relative setting_wrapper mt-4" }, [a("label", [e._v("Blacklisted " + e._s("email" == e.page ? "email addresses" : "SMS numbers") + ":")]), e.refreshing ? a("div", [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1) : a("div", { staticClass: "card card-cascade narrower elegant-color" }, [a("div", { staticClass: "px-4" }, [a("div", { staticClass: "table-wrapper" }, [a("table", { staticClass: "table table-hover mb-0" }, [e._m(1), a("tbody", e._l(e.blacklist, (function (t) { return a("tr", [a("td", [e._v(" " + e._s(t) + " ")]), a("td", [e.loading.indexOf(t) >= 0 ? a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }) : a("a", { on: { click: function (a) { return e.removeEmailFromBlacklist(t) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"] } })], 1)], 1)]) })), 0), e.blacklist && e.blacklist.length ? e._e() : a("tfoot", [e._m(2)])])])])])])])]), a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-md btn-unique", attrs: { "data-dismiss": "modal", type: "button" } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "times"], size: "sm" } }), e._v(" Close ")], 1)])])])]) }, Qa = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("button", { staticClass: "close", attrs: { "aria-label": "Close", "data-dismiss": "modal", type: "button" } }, [a("span", { staticClass: "text-white", attrs: { "aria-hidden": "true" } }, [e._v("×")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("thead", [a("tr", [a("th", { staticClass: "th-lg" }, [a("span", { staticClass: "text-white bold" }, [e._v("Email")])]), a("th", { staticStyle: { width: "50px" } }, [e._v(" ")])])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("tr", [a("td", { attrs: { colspan: "2" } }, [e._v("No blacklisted emails.")])]) }], Za = { name: "CloudEntriesSettingsModal", props: ["page", "blacklist"], data() { return { refreshing: !0, loading: [] } }, watch: { blacklist: { immediate: !0, handler: function () { this.refreshing = !this.blacklist } } }, methods: { removeEmailFromBlacklist: function (e) { confirm("Remove " + e + " from blacklist?") && (this.loading.push(e), chrome.runtime.sendMessage({ type: "cloud.delete_from_blacklist", entry_type: "email", email: e }, function (t) { this.loading.splice(this.loading.indexOf(e), 1), t.error ? toastr.error("string" == typeof t.error ? t.error : "Failed to remove email from blacklist.", !1, { closeButton: !0, timeOut: 2e3 }) : (toastr.success("Email removed from blacklist", !1, { closeButton: !0, timeOut: 2e3 }), null !== this.blacklist && this.blacklist.splice(this.blacklist.indexOf(e), 1)) }.bind(this))) } } }, Xa = Za, es = (a("7e13"), Object(b["a"])(Xa, Ja, Qa, !1, null, null, null)), ts = es.exports, as = a("2113"), ss = { name: "cloud.email", components: { CloudEntriesSettingsModal: ts }, props: ["value", "root"], data() { return { current_page: 1, per_page_limit: 25, all_emails: [], meta: null, refreshing: !0, loading_all: !0, load_more_loading: !1, filters: { show: null, search: null }, search_field: "", enable_search: !1, active_email: null, active_email_options: { show_source: !1, loading: !1 }, selected_entries: [], blacklist: null, check_all: !1, mark_as_read_loading: !1 } }, created: function () { this.$eventHub.$on("cloud_new_messages_received", this.refreshEntries) }, beforeDestroy: function () { this.$eventHub.$off("cloud_new_messages_received", this.refreshEntries), $("body > .cloud_email_contents_modal").remove() }, computed: { random_key: function () { return this.active_email.id + Math.random() }, email_list: function () { return this.all_emails }, has_more: function () { return this.meta && this.all_emails.length && this.meta.emails_has_more }, filters_to_send: function () { var e = {}; for (var t in this.filters) this.filters[t] && (e[t] = this.filters[t]); return Object.values(e).length ? e : null } }, mounted: function () { $("body > .cloud_email_contents_modal").remove(), $(".cloud_email_contents_modal").appendTo("body"), $("body > .cloud-settings-modal").remove(), $(".cloud-settings-modal").appendTo("body"), $(".cloud_email_contents_modal").on("hide.bs.modal", function () { this.$route.query && this.$route.query.backto ? chrome.tabs.getCurrent(function (e) { if (this.$route.query.backto && !isNaN(this.$route.query.backto)) try { chrome.tabs.update(parseInt(this.$route.query.backto), { selected: !0 }) } catch (t) { chrome.tabs.update(parseInt(this.$route.query.backto), { active: !0 }) } chrome.tabs.remove(e.id, (function () { })) }.bind(this)) : this.$route.query && this.$route.query.read && this.$router.replace({ query: {} }) }.bind(this)), $(".cloud_email_contents_modal").on("hidden.bs.modal", function () { this.removeLocalBsEvents(), this.active_email = null }.bind(this)), $(".cloud_email_contents_modal").on("shown.bs.modal", function () { this.$nextTick((function () { this.root.resetBsEvents() })) }.bind(this)), this.$route.query && this.$route.query.read && this.readEmail({ id: this.$route.query.read, state: "" }), this.$route.query && this.$route.query.backto || this.getEmailPage(), this.root.resetBsEvents() }, watch: { enable_search: function () { this.enable_search || (this.filters.search = null, this.search_field = "") }, filters: { deep: !0, handler: function () { this.loading_all = !0, this.getEmailPage(null, this.filters_to_send, !0) } }, loading_all: function () { this.selected_entries = [] }, selected_entries: { deep: !0, handler: function () { this.check_all = !1, this.all_emails.length > 0 && this.selected_entries.length == this.all_emails.length && (this.check_all = !0) } }, all_emails: { deep: !0, handler: function () { this.check_all = !1, this.all_emails.length > 0 && this.selected_entries.length == this.all_emails.length && (this.check_all = !0) } } }, methods: { removeLocalBsEvents: function () { if ($(".tooltip").remove(), $(".cloud_email_contents_modal a.badge.badge-pill[data-original-title]").each((function () { $(this).removeAttr("data-original-title"), $(this).removeData("bs.tooltip") })), this.$route.query && this.$route.query.read) { var e = Object.assign({}, this.$route.query); delete e.read, this.$router.replace({ query: e }) } }, appendEmailsToList: function (e, t) { if (e) { for (var a = [].concat(this.all_emails).concat(e), s = {}, i = 0; i < a.length; i++)s[a[i].id + " " + a[i].email_id] = a[i], "undefined" == typeof a[i].state && (a[i].state = ""); a = Object.values(s), a.sort((function (e, t) { return t.email_date.localeCompare(e.email_date) })), this.all_emails = a, t && (this.meta = t), this.root.resetBsEvents() } }, getEmailPage: function (e = null, t = null, a = !1) { return this.refreshing = !0, new Promise(function (s) { chrome.runtime.sendMessage({ type: "cloud.get_email_page", last: e, filters: t }, function (e) { e.blacklist && (this.blacklist = e.blacklist), e.emails && (a && (this.all_emails = []), this.appendEmailsToList(e.emails, e.meta), this.refreshing = !1, this.loading_all = !1, this.load_more_loading = !1, s(e)) }.bind(this)) }.bind(this)) }, loadMoreEmails: function () { this.load_more_loading = !0, this.getEmailPage(this.all_emails[this.all_emails.length - 1].id, this.filters_to_send) }, readEmail: function (e) { "" == e.state && (this.active_email = e, this.active_email_options.loading = !0, this.$nextTick((async function () { $(".cloud_email_contents_modal").modal("show"), this.active_email.email_body || await new Promise(t => { chrome.runtime.sendMessage({ type: "cloud.read_email", email_id: this.active_email.id, include_blacklist: null === this.blacklist }, function (a) { if (a.error) alert(a.error.error || "Crap! Something happened while loading the email"); else { for (var s in a.email) this.$set(e, s, a.email[s]); a.blacklist && (this.blacklist = a.blacklist), t() } }.bind(this)) }), this.active_email_options.loading = !1, this.$nextTick((function () { this.showEmailContents() })) }))) }, showEmailContents: function () { if (!$("#email_content_iframe").length) return; this.active_email_options.show_source = !1; var e = $("#email_content_iframe").get(0), t = this.active_email.email_body; let a; t.html ? (t = t.html, a = !0) : (t = t.text, a = !1); var s = $("<div></div>"); a ? s.html(t.content) : s.html($("<div></div>").css("white-space", "pre").text(t.content)), s.find("script").remove(), s.html(Object(as["a"])(s.html(), { defaultProtocol: "https", target: "_blank" })), s.find("a").attr("target", "_blank"); var i = new Uint8Array([239, 187, 191]), o = new Blob([i, s.html()], { type: "text/html" }); e.src = URL.createObjectURL(o) }, showEmailSource: function () { if ($("#email_content_iframe").length) { this.active_email_options.show_source = !0; var e = $("#email_content_iframe").get(0), t = this.active_email.email_raw, a = $('<div style="white-space: pre; font-size: 12px;"></div>'); a.text(t); var s = new Uint8Array([239, 187, 191]), i = new Blob([s, a.get(0).outerHTML], { type: "text/html" }); e.src = URL.createObjectURL(i) } }, downloadEmailContents: function () { this.downloadFile(this.active_email.email_raw, this.active_email.email_subject + ".eml") }, downloadFile: function (e, t) { var a = document.createElement("a"); a.setAttribute("href", "data:application/octet-stream," + encodeURIComponent(e)), a.setAttribute("download", t), a.style.display = "none", document.body.appendChild(a), a.click(), document.body.removeChild(a) }, refreshEntries: function () { var e = this.filters_to_send; null === e && (e = {}), this.all_emails.length && (e.before_id = this.all_emails[0].id), 0 == Object.values(e).length && (e = null); var t = this.meta.emails_has_more; this.getEmailPage(null, e).then(e => { e.meta.emails_has_more ? (this.all_emails = [], this.appendEmailsToList(e.emails, e.meta)) : this.meta.emails_has_more = t }) }, deleteMultipleEmails: function () { var e = Object.assign([], this.selected_entries), t = e.length; if (!(t < 1)) { if (1 == t) return this.deleteActiveEmail(e[0]); if (confirm("Are you sure you want to delete " + t + " selected " + (1 == t ? "email" : "emails") + "? You will not be able to recover them!")) { var a = []; e.forEach((function (e) { e.state = "deleting", a.push(e.id) })), chrome.runtime.sendMessage({ type: "cloud.delete_multiple_emails", email_ids: a }, function (t) { if (t && t.emails_deleted) { this.all_emails = this.all_emails.filter(e => t.emails_deleted.indexOf(e.id) < 0), this.selected_entries = this.selected_entries.filter(e => t.emails_deleted.indexOf(e.id) < 0); for (var s = 0; s < e.length; s++)e[s].state = ""; a.length == t.emails_deleted.length ? toastr.success(t.emails_deleted.length + " emails deleted", !1, { closeButton: !0, timeOut: 1e3 }) : toastr.warning(t.emails_deleted.length + "/" + a.length + " emails deleted", !1, { closeButton: !0, timeOut: 3e3 }) } else e.forEach((function (e) { e.state = "" })), toastr.error("An error occurred", !1, { closeButton: !0, timeOut: 5e3 }) }.bind(this)) } } }, deleteActiveEmail: function (e) { confirm("Are you sure you want to delete this email? You will not be able to recover it!") && (e.state = "deleting", $(".cloud_email_contents_modal").modal("hide"), chrome.runtime.sendMessage({ type: "cloud.delete_email", email_id: e.id }, function (t) { if (t && t.deleted) { for (var a = 0; a < this.selected_entries.length; a++)if (this.selected_entries[a].id == e.id) { this.selected_entries.splice(a, 1); break } for (a = 0; a < this.all_emails.length; a++)if (this.all_emails[a].id == e.id) { this.all_emails.splice(a, 1), toastr.success("Email deleted", !1, { closeButton: !0, timeOut: 1e3 }); break } } else e.state = "", toastr.error("An error occurred", !1, { closeButton: !0, timeOut: 5e3 }) }.bind(this))) }, searchEntries: function () { this.enable_search || (this.search_field = ""), this.filters.search = this.search_field || null }, showEmailSettingsModal: function () { $(".cloud-settings-modal").modal() }, addEmailToBlacklist: function (e, t) { if (this.emailIsBlacklisted(e)) return this.removeEmailFromBlacklist(e, t); confirm("Add " + e.mail + " to blacklist?\n\nYou will not receive emails " + t + " this address anymore.") && (this.$set(e, "loading", !0), chrome.runtime.sendMessage({ type: "cloud.add_to_blacklist", entry_type: "email", email: e.mail }, function (t) { this.$set(e, "loading", !1), t.error ? toastr.error("string" == typeof t.error ? t.error : "Failed to add email to blacklist.", !1, { closeButton: !0, timeOut: 2e3 }) : (toastr.success("Email blacklisted", !1, { closeButton: !0, timeOut: 2e3 }), null !== this.blacklist && this.blacklist.indexOf(t.email) < 0 && (this.blacklist.push(t.email), this.$nextTick((function () { this.removeLocalBsEvents(), this.root.resetBsEvents() })))) }.bind(this))) }, removeEmailFromBlacklist: function (e, t) { confirm("Remove " + e.mail + " from blacklist?\n\nYou will start receiving again emails " + t + " this address.") && (this.$set(e, "loading", !0), chrome.runtime.sendMessage({ type: "cloud.delete_from_blacklist", entry_type: "email", email: e.mail }, function (t) { this.$set(e, "loading", !1), t.error ? toastr.error("string" == typeof t.error ? t.error : "Failed to remove email from blacklist.", !1, { closeButton: !0, timeOut: 2e3 }) : (toastr.success("Email removed from blacklist", !1, { closeButton: !0, timeOut: 2e3 }), null !== this.blacklist && (this.blacklist.splice(this.blacklist.indexOf(e.mail), 1), this.$nextTick((function () { this.removeLocalBsEvents(), this.root.resetBsEvents() })))) }.bind(this))) }, emailIsBlacklisted: function (e) { return this.blacklist && this.blacklist.indexOf(e.mail) >= 0 }, toggleCheckAll: function () { if (this.check_all) this.selected_entries = []; else for (var e = 0; e < this.all_emails.length; e++)this.selected_entries.indexOf(this.all_emails[e]) < 0 && this.selected_entries.push(this.all_emails[e]) }, markAllAsRead: function () { $(".tooltip").remove(), confirm("Confirm marking all emails as read?") && (this.mark_as_read_loading = !0, chrome.runtime.sendMessage({ type: "cloud.mark_everything_as_read", email_ids: "all" }, function (e) { e.success && this.all_emails && this.all_emails.forEach(e => e.read = 1), this.mark_as_read_loading = !1, this.root.retrieveCloudData() }.bind(this))) } } }, is = ss, os = (a("ef9a"), Object(b["a"])(is, Ka, Ha, !1, null, null, null)), ns = os.exports, rs = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { attrs: { id: "cloud_sms_tab" } }, [a("div", { staticClass: "text-left float-left" }, [a("div", { staticClass: "form-check pl-0 inline-block", staticStyle: { height: "20px", position: "relative", top: "10px", left: "20px", "margin-right": "10px" } }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.check_all, expression: "check_all" }], staticClass: "filled-in form-check-input", attrs: { id: "email_check_all_entries", type: "checkbox" }, domProps: { checked: Array.isArray(e.check_all) ? e._i(e.check_all, null) > -1 : e.check_all }, on: { click: function (t) { return e.toggleCheckAll() }, change: function (t) { var a = e.check_all, s = t.target, i = !!s.checked; if (Array.isArray(a)) { var o = null, n = e._i(a, o); s.checked ? n < 0 && (e.check_all = a.concat([o])) : n > -1 && (e.check_all = a.slice(0, n).concat(a.slice(n + 1))) } else e.check_all = i } } }), a("label", { staticClass: "form-check-label inline-block", attrs: { for: "email_check_all_entries" } })]), e.refreshing ? a("button", { staticClass: "btn btn-sm elegant-color-dark", attrs: { disabled: "" } }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  Refreshing...")], 1) : a("button", { staticClass: "btn btn-sm elegant-color-dark", on: { click: e.refreshEntries } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "sync"] } }), e._v("  Refresh")], 1), a("div", { staticClass: "dropdown inline-block" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm dropdown-toggle", attrs: { type: "button", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" } }, [e._v(" Show " + e._s(e.filters.show || "all") + " ")]), a("div", { staticClass: "dropdown-menu dropdown-menu-right field_generators_menu" }, [a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.filters.show = null } } }, [e._v("Show all")]), a("a", { staticClass: "dropdown-item", attrs: { href: "#" }, on: { click: function (t) { t.preventDefault(), e.filters.show = "unread" } } }, [e._v("Show unread")])])]), a("button", { staticClass: "btn btn-sm elegant-color-dark", on: { click: function (t) { e.enable_search = !e.enable_search } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "search"] } }), e._v("  Search")], 1)]), a("div", { staticClass: "text-right float-right" }, [e.mark_as_read_loading ? a("button", { staticClass: "btn btn-sm elegant-color-dark pl-3 pr-3", attrs: { disabled: "" } }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1) : a("button", { staticClass: "btn btn-sm elegant-color-dark pl-3 pr-3", attrs: { title: "Mark all as read" }, on: { click: e.markAllAsRead } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "envelope-open-text"] } })], 1), e.selected_entries.length > 0 ? a("button", { staticClass: "btn btn-sm btn-unique", on: { click: e.deleteMultipleSms } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "trash"] } }), e._v("  Delete selected")], 1) : e._e()]), a("div", { staticClass: "clearfix" }), a("div", { staticClass: "slider", class: { closed: !e.enable_search }, staticStyle: { height: "80px" } }, [a("form", { staticClass: "form-inline md-form form-sm unique-textarea search_form", on: { submit: function (t) { return t.stopPropagation(), t.preventDefault(), e.searchEntries.apply(null, arguments) } } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "search"], size: "sm" } }), a("input", { directives: [{ name: "model", rawName: "v-model", value: e.search_field, expression: "search_field" }], staticClass: "form-control form-control-sm ml-3 w-95 text-white", attrs: { type: "text", placeholder: "Search", "aria-label": "Search" }, domProps: { value: e.search_field }, on: { input: function (t) { t.target.composing || (e.search_field = t.target.value) } } })], 1)]), e.loading_all ? a("div", { staticClass: "mt-5" }, [a("h4", { staticClass: "text-center" }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1)]) : a("div", [e.sms_list.length ? a("table", { staticClass: "table table-borderless", attrs: { id: "cloud_sms_table" } }, [a("tbody", [e._l(e.sms_list, (function (t) { return a("tr", { staticClass: "text-white", class: { "elegant-color-dark": !t.read, "elegant-color-light": t.read, "grey-text": t.read }, on: { click: function (a) { return e.readSms(t) } } }, [a("td", { staticClass: "state-col", attrs: { width: "30" }, on: { click: function (e) { e.stopPropagation() } } }, ["" == t.state ? a("span", [a("div", { staticClass: "form-check pl-0", staticStyle: { height: "20px" } }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.selected_entries, expression: "selected_entries" }], staticClass: "filled-in form-check-input", attrs: { id: "sms_" + t.id, type: "checkbox" }, domProps: { value: t, checked: Array.isArray(e.selected_entries) ? e._i(e.selected_entries, t) > -1 : e.selected_entries }, on: { change: function (a) { var s = e.selected_entries, i = a.target, o = !!i.checked; if (Array.isArray(s)) { var n = t, r = e._i(s, n); i.checked ? r < 0 && (e.selected_entries = s.concat([n])) : r > -1 && (e.selected_entries = s.slice(0, r).concat(s.slice(r + 1))) } else e.selected_entries = o } } }), a("label", { staticClass: "form-check-label inline-block", attrs: { for: "sms_" + t.id } })])]) : "deleting" == t.state ? a("span", [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1) : e._e()]), a("td", { staticClass: "text-overflow" }, [e._v(e._s(t.sms_from))]), a("td", { staticClass: "text-overflow" }, [e._v(e._s(t.sms_message))]), a("td", { staticClass: "text-right", staticStyle: { width: "180px" } }, [e._v(e._s(e.root.parseDate(t.sms_date, !0, !0)))])]) })), a("tr", [e.has_more ? a("td", { staticClass: "pl-0 pr-0", attrs: { colspan: "4" } }, [a("button", { staticClass: "btn elegant-color-dark btn-lg btn-block", attrs: { type: "button", disabled: e.loading_all || e.refreshing || e.load_more_loading }, on: { click: e.loadMoreSms } }, [e.loading_all || e.refreshing || e.load_more_loading ? a("span", [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  Loading... ")], 1) : a("span", [a("font-awesome-icon", { attrs: { icon: ["fas", "arrow-down"] } }), e._v("  Load More ")], 1)])]) : e._e()])], 2)]) : a("div", [a("div", { staticClass: "mt-4 text-center" }, [e._v("There are no SMS messages to show")])])]), a("div", { staticClass: "modal fade cloud_sms_contents_modal", attrs: { id: "cloud_sms_contents_modal", tabindex: "-1", role: "dialog" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [e.active_sms ? a("div", { staticClass: "modal-content elegant-color-dark" }, [a("div", { staticClass: "modal-body" }, [a("div", { staticClass: "sms-controls position-absolute", staticStyle: { right: "10px", "z-index": "100" } }, [a("button", { staticClass: "btn elegant-color btn-sm dropdown-toggle", attrs: { "data-toggle": "dropdown" } }), a("div", { staticClass: "dropdown-menu dropdown-menu-right" }, [a("a", { staticClass: "dropdown-item red-text", attrs: { href: "#" }, on: { click: function (t) { return t.preventDefault(), e.deleteActiveSms(e.active_sms) } } }, [e._v("Delete SMS")])])]), e.active_sms.sms_date ? a("div", { staticClass: "unique-textarea mt-2" }, [a("small", [e._v("Date:")]), e._v("  "), a("small", [e._v(e._s(e.root.parseDate(e.active_sms.sms_date, !0)))])]) : e._e(), e.active_sms.sms_from ? a("div", { staticClass: "unique-textarea mt-1" }, [a("small", [e._v("From:")]), e._v("  "), a("span", { staticClass: "badge badge-pill grey darken-3" }, [e._v(e._s(e.active_sms.sms_from))])]) : e._e(), e.active_sms.sms_to ? a("div", { staticClass: "unique-textarea mt-1" }, [a("small", [e._v("To:")]), e._v("  "), a("span", { staticClass: "badge badge-pill grey darken-3" }, [e._v(e._s(e.active_sms.sms_to))])]) : e._e(), e.active_sms_options.loading ? a("div", { staticClass: "text-center mt-5" }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1) : a("div", { staticClass: "h-100" }, [e.active_sms.sms_attachments && e.active_sms.sms_attachments.length ? a("div", { staticClass: "unique-textarea mt-1" }, [a("small", [e._v("Attachments:")]), e._v("  "), e._l(e.active_sms.sms_attachments, (function (t) { return a("span", { staticClass: "badge badge-pill grey darken-3" }, [a("a", { staticClass: "text-white", attrs: { href: t.link } }, [e._v(e._s(t.name) + " (" + e._s(e.root.prettyBytes(t.size)) + ")")])]) }))], 2) : e._e(), e._m(0)])])]) : e._e()])])]) }, ls = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "mt-2", attrs: { id: "sms_content" } }, [a("iframe", { attrs: { sandbox: "allow-popups allow-popups-to-escape-sandbox", id: "sms_content_iframe" } })]) }], cs = { name: "cloud.sms", props: ["value", "root"], data() { return { current_page: 1, per_page_limit: 25, all_sms: [], meta: null, refreshing: !0, loading_all: !0, load_more_loading: !1, filters: { show: null, search: null }, search_field: "", enable_search: !1, active_sms: null, active_sms_options: { show_source: !1, loading: !1 }, selected_entries: [], check_all: !1, mark_as_read_loading: !1 } }, created: function () { this.$eventHub.$on("cloud_new_messages_received", this.refreshEntries) }, beforeDestroy: function () { this.$eventHub.$off("cloud_new_messages_received", this.refreshEntries), $("body > .cloud_sms_contents_modal").remove() }, computed: { sms_list: function () { return this.all_sms }, has_more: function () { return this.meta && this.all_sms.length && this.meta.sms_has_more }, filters_to_send: function () { var e = {}; for (var t in this.filters) this.filters[t] && (e[t] = this.filters[t]); return Object.values(e).length ? e : null } }, mounted: function () { $("body > .cloud_sms_contents_modal").remove(), $(".cloud_sms_contents_modal").appendTo("body"), $(".cloud_sms_contents_modal").on("hide.bs.modal", function () { this.$route.query && this.$route.query.backto ? chrome.tabs.getCurrent(function (e) { if (this.$route.query.backto && !isNaN(this.$route.query.backto)) try { chrome.tabs.update(parseInt(this.$route.query.backto), { selected: !0 }) } catch (t) { chrome.tabs.update(parseInt(this.$route.query.backto), { active: !0 }) } chrome.tabs.remove(e.id, (function () { })) }.bind(this)) : this.$route.query && this.$route.query.read && this.$router.replace({ query: {} }) }.bind(this)), $(".cloud_sms_contents_modal").on("hidden.bs.modal", function () { this.active_sms = null }.bind(this)), this.$route.query && this.$route.query.read && this.readSms({ id: this.$route.query.read, state: "" }), this.$route.query && this.$route.query.backto || this.getSmsPage(), this.root.resetBsEvents() }, watch: { enable_search: function () { this.enable_search || (this.filters.search = null, this.search_field = "") }, filters: { deep: !0, handler: function () { this.loading_all = !0, this.getSmsPage(null, this.filters_to_send, !0) } }, loading_all: function () { this.selected_entries = [] }, selected_entries: { deep: !0, handler: function () { this.check_all = !1, this.all_sms.length > 0 && this.selected_entries.length == this.all_sms.length && (this.check_all = !0) } }, all_sms: { deep: !0, handler: function () { this.check_all = !1, this.all_sms.length > 0 && this.selected_entries.length == this.all_sms.length && (this.check_all = !0) } } }, methods: { appendSmsToList: function (e, t) { if (e) { for (var a = [].concat(this.all_sms).concat(e), s = {}, i = 0; i < a.length; i++)s[a[i].sms_id] = a[i], "undefined" == typeof a[i].state && (a[i].state = ""); a = Object.values(s), a.sort((function (e, t) { return t.sms_date.localeCompare(e.sms_date) })), this.all_sms = a, t && (this.meta = t), this.root.resetBsEvents() } }, getSmsPage: function (e = null, t = null, a = !1) { return this.refreshing = !0, new Promise(function (s) { chrome.runtime.sendMessage({ type: "cloud.get_sms_page", last: e, filters: t }, function (e) { e.sms && (a && (this.all_sms = []), this.appendSmsToList(e.sms, e.meta), this.refreshing = !1, this.loading_all = !1, this.load_more_loading = !1, s(e)) }.bind(this)) }.bind(this)) }, loadMoreSms: function () { this.load_more_loading = !0, this.getSmsPage(this.all_sms[this.all_sms.length - 1].id, this.filters_to_send) }, readSms: function (e) { "" == e.state && (this.active_sms = e, this.active_sms_options.loading = !0, this.$nextTick((async function () { $(".cloud_sms_contents_modal").modal("show"), this.active_sms.sms_body || await new Promise(t => { chrome.runtime.sendMessage({ type: "cloud.read_sms", sms_id: this.active_sms.id }, function (a) { if (a.error) alert(a.error.error || "Crap! Something happened while loading the SMS"); else { for (var s in a.sms) this.$set(e, s, a.sms[s]); t() } }.bind(this)) }), this.active_sms_options.loading = !1, this.$nextTick((function () { this.showSmsContents() })) }))) }, showSmsContents: function () { if ($("#sms_content_iframe").length) { this.active_sms_options.show_source = !1; var e = $("#sms_content_iframe").get(0), t = this.active_sms.sms_message, a = $("<div></div>"); a.text(t), a.find("script").remove(), a.html(a.html().replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, "$1<br />$2")), a.html(Object(as["a"])(a.html(), { defaultProtocol: "https", target: "_blank" })), a.find("a").attr("target", "_blank"); var s = new Uint8Array([239, 187, 191]), i = new Blob([s, a.html()], { type: "text/html" }); e.src = URL.createObjectURL(i) } }, refreshEntries: function () { var e = this.filters_to_send; null === e && (e = {}), this.all_sms.length && (e.before_id = this.all_sms[0].id), 0 == Object.values(e).length && (e = null); var t = this.meta.sms_has_more; this.getSmsPage(null, e).then(e => { e.meta.sms_has_more ? (this.all_sms = [], this.appendSmsToList(e.sms, e.meta)) : this.meta.sms_has_more = t }) }, deleteMultipleSms: function () { var e = Object.assign([], this.selected_entries), t = e.length; if (!(t < 1)) { if (1 == t) return this.deleteActiveSms(e[0]); if (confirm("Are you sure you want to delete " + t + " selected " + (1 == t ? "SMS message" : "SMS nessages") + "? You will not be able to recover them!")) { var a = []; e.forEach((function (e) { e.state = "deleting", a.push(e.id) })), chrome.runtime.sendMessage({ type: "cloud.delete_multiple_sms", sms_ids: a }, function (t) { if (t && t.sms_deleted) { this.all_sms = this.all_sms.filter(e => t.sms_deleted.indexOf(e.id) < 0), this.selected_entries = this.selected_entries.filter(e => t.sms_deleted.indexOf(e.id) < 0); for (var s = 0; s < e.length; s++)e[s].state = ""; a.length == t.sms_deleted.length ? toastr.success(t.sms_deleted.length + " SMS messages deleted", !1, { closeButton: !0, timeOut: 1e3 }) : toastr.warning(t.sms_deleted.length + "/" + a.length + " SMS messages deleted", !1, { closeButton: !0, timeOut: 3e3 }) } else e.forEach((function (e) { e.state = "" })), toastr.error("An error occurred", !1, { closeButton: !0, timeOut: 5e3 }) }.bind(this)) } } }, deleteActiveSms: function (e) { confirm("Are you sure you want to delete this SMS message? You will not be able to recover it!") && (e.state = "deleting", $(".cloud_sms_contents_modal").modal("hide"), chrome.runtime.sendMessage({ type: "cloud.delete_sms", sms_id: e.id }, function (t) { if (t && t.deleted) { for (var a = 0; a < this.selected_entries.length; a++)if (this.selected_entries[a].id == e.id) { this.selected_entries.splice(a, 1); break } for (a = 0; a < this.all_sms.length; a++)if (this.all_sms[a].id == e.id) { this.all_sms.splice(a, 1), toastr.success("SMS message deleted", !1, { closeButton: !0, timeOut: 1e3 }); break } } else e.state = "", toastr.error("An error occurred", !1, { closeButton: !0, timeOut: 5e3 }) }.bind(this))) }, searchEntries: function () { this.enable_search || (this.search_field = ""), this.filters.search = this.search_field || null }, toggleCheckAll: function () { if (this.check_all) this.selected_entries = []; else for (var e = 0; e < this.all_sms.length; e++)this.selected_entries.indexOf(this.all_sms[e]) < 0 && this.selected_entries.push(this.all_sms[e]) }, markAllAsRead: function () { $(".tooltip").remove(), confirm("Confirm marking all sms messages as read?") && (this.mark_as_read_loading = !0, chrome.runtime.sendMessage({ type: "cloud.mark_everything_as_read", sms_ids: "all" }, function (e) { e.success && this.all_sms && this.all_sms.forEach(e => e.read = 1), this.mark_as_read_loading = !1, this.root.retrieveCloudData() }.bind(this))) } } }, ds = cs, us = (a("05e8"), Object(b["a"])(ds, rs, ls, !1, null, null, null)), _s = us.exports, ms = { name: "Cloud", components: { CloudEmail: ns, CloudSms: _s }, data() { return { active_tab: this.$route.params.kind || null, email_data: {}, sms_data: {} } }, props: ["root"], watch: { $route: function () { this.active_tab = this.$route.params.kind || null, this.active_sub_tab = this.$route.params.subkind || null, this.active_sub_sub_tab = this.$route.params.subsubkind || null }, active_tab: { immediate: !0, handler: function () { this.active_tab ? this.root.resetBsEvents() : this.changeTab("email") } } }, mounted() { this.root.currentView = this }, methods: { changeTab: function (e) { this.active_tab = e, this.$router.push({ path: "/cloud/" + e }) } } }, hs = ms, ps = Object(b["a"])(hs, Ya, Wa, !1, null, null, null), fs = ps.exports, vs = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "popup-page-main" }, [a("div", { staticClass: "px-3 mt-3 popup-generators-list" }, [e.root.current_version > e.root.last_seen_version && 0 != e.root.last_seen_version && (0 == e.root.dismiss_version_notif || 1 == e.root.dismiss_version_notif) ? a("div", { staticClass: "alert alert-success", staticStyle: { "margin-bottom": "30px" }, attrs: { role: "alert" } }, [a("button", { staticClass: "btn btn-success btn-sm pull-right position-relative", staticStyle: { top: "-10px" }, attrs: { type: "button" }, on: { click: function (t) { return e.root.openOptionsPage("/about/changelog?lastseen=" + e.root.last_seen_version, !0) } } }, [e._v("See what's new")]), a("p", { staticClass: "no-margin" }, [e._v("Fake Data has been updated!")])]) : e._e(), a("div", { staticClass: "mt-4 mb-1 width100" }, [a("div", { staticClass: "width100 text-center" }, [a("button", { staticClass: "btn elegant-color-dark btn-sm", attrs: { type: "button", title: "Generate random values for all of the generators at once" }, on: { click: function (t) { return e.generateAll() } } }, [e._v("Generate All")]), a("button", { staticClass: "btn elegant-color-dark btn-sm", attrs: { type: "button", title: "Clear all the generated values" }, on: { click: function (t) { return e.clearAll() } } }, [e._v("Clear All")]), a("button", { staticClass: "btn elegant-color-dark btn-sm", attrs: { type: "button", title: "Manage settings for existing generators or create new ones" }, on: { click: function (t) { return e.root.openOptionsPage("/generators/default", !0) } } }, [e._v("Manage")])])]), e._l(2, (function (t) { return a("div", { staticClass: "row" }, [1 == t || 2 == t && e.custom_generators.length ? a("div", { staticClass: "col-12 mt-4 cursor-pointer user-select-none", on: { click: function (a) { return e.collapseGenerators(1 == t ? "default" : "custom") } } }, [a("h6", { staticClass: "text-monospace" }, [e._v(e._s(1 == t ? "Default" : "Custom") + " Generators "), a("font-awesome-icon", { attrs: { icon: ["fas", e.popup_generators_list_collapsed && e.popup_generators_list_collapsed[1 == t ? "default" : "custom"] ? "caret-right" : "caret-down"] } })], 1), a("hr", { staticClass: "grey darken-2" })]) : e._e(), e._l(1 == t ? e.root.fields : e.custom_generators.map((function (e) { return e.label })), (function (s) { return e.popup_generators_list_collapsed && e.popup_generators_list_collapsed[1 == t ? "default" : "custom"] ? e._e() : a("div", { staticClass: "mb-4", class: e.getColClass(s) }, [a("span", { staticClass: "user-select-none font-weight-bold text-monospace d-block" }, [a("span", { staticClass: "cursor-pointer", on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.previewGenerator(s, !1, "generate_single") } } }, [e._v(e._s(s))]), e.previews[s] && e.previews[s].generated ? a("span", [e._v("   "), a("a", { attrs: { title: "Generate again" }, on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.previewGenerator(s, !1, "generate_single") } } }, [a("font-awesome-icon", { staticClass: "fa-xs", attrs: { icon: ["fas", "sync"] } })], 1), e._v("  "), e.previews[s].error ? e._e() : a("a", { attrs: { title: "Copy to Clipboard" }, on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.copyToClipboard(s, e.event) } } }, [a("font-awesome-icon", { staticClass: "fa-xs", attrs: { icon: ["fas", "clipboard"] } })], 1), e._v("  "), e.previews[s].error || !e.active_element || !e.active_element.element_is_fillable || e.active_element.elements_in_selection || !("textarea" == e.active_element.element_tag || "input" == e.active_element.element_tag && ["radio", "checkbox", "color", "file", "range", "image"].indexOf(e.active_element.element_tag) < 0) || e.popup_auto_fill_on_generate && "load" != e.previews[s].trigger_by && "generate_all" != e.previews[s].trigger_by ? e._e() : a("a", { attrs: { title: "Fill in selected input" }, on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.insertValueIntoActiveInput(s) } } }, [a("font-awesome-icon", { staticClass: "fa-xs", attrs: { icon: ["fas", "i-cursor"] } })], 1)]) : e._e()]), e.previews[s] && e.previews[s].generated ? e._e() : a("a", { staticClass: "text-muted font-italic", on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.previewGenerator(s, !1, "generate_single") } } }, [e.previews[s] ? a("span", [e._v("generating...")]) : a("span", [e._v("click to generate")]), e._v("   "), a("font-awesome-icon", { staticClass: "fa-xs", class: { "animation-rotate": e.previews[s] }, attrs: { icon: ["fas", "sync"] } })], 1), e.previews[s] && e.previews[s].generated ? a("span", { staticClass: "preview-text" }, [a("span", { class: { "text-danger": e.previews[s].error } }, [e._v(e._s(e.previewText(e.previews[s].text)))])]) : e._e()]) }))], 2) }))], 2), a("nav", { staticClass: "navbar navbar-dark elegant-color-dark fixed-bottom d-block save_bar slider" }, [a("div", { staticClass: "text-center" }, [e.active_element ? a("div", { staticClass: "mt-1" }, [e.active_element && e.active_element.element_is_fillable && !e.active_element.elements_in_selection ? a("button", { staticClass: "btn green darken-3 text-white btn-flat btn-sm font-weight-bold", attrs: { type: "button" }, on: { click: function (t) { return e.forwardCmd("fill_input") } } }, [e._v("Fill Input")]) : e._e(), e.active_element && e.active_element.element_is_fillable && e.active_element.element_in_form && !e.active_element.elements_in_selection ? a("button", { staticClass: "btn green darken-3 text-white btn-flat btn-sm font-weight-bold", attrs: { type: "button" }, on: { click: function (t) { return e.forwardCmd("fill_form") } } }, [e._v("Fill Form")]) : e._e(), e.active_element && e.active_element.elements_in_selection > 0 ? a("button", { staticClass: "btn green darken-3 text-white btn-flat btn-sm font-weight-bold", attrs: { type: "button" }, on: { click: function (t) { return e.fillSelectedFields() } } }, [e._v("Fill " + e._s(e.active_element.elements_in_selection) + " selected fields")]) : e._e(), a("button", { staticClass: "btn green darken-3 text-white btn-flat btn-sm font-weight-bold", attrs: { type: "button" }, on: { click: function (t) { return e.forwardCmd("fill_page") } } }, [e._v("Fill Entire Page")])]) : a("div", { staticStyle: { "margin-top": "13px" } }, [a("small", { staticClass: "text-warning" }, [a("font-awesome-icon", { attrs: { icon: ["fas", "exclamation-triangle"] } }), e._v("  " + e._s(e.fake_data_not_loaded_message))], 1)])])]), a("popup-introduction-modal", { attrs: { root: e.root } })], 1) }, gs = [], bs = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal fade popup-introduction-modal", attrs: { id: "popup-introduction-modal", tabindex: "-1", role: "dialog", "aria-hidden": "true" } }, [a("div", { staticClass: "modal-dialog modal-lg", attrs: { role: "document" } }, [a("div", { staticClass: "modal-content elegant-color-dark" }, [e._m(0), a("div", { staticClass: "modal-body" }, [a("p", [e._v("Get easy access to all of your Generators and actions to trigger them.")]), a("p", [e._v("Quickly fill all inputs in a form or in the entire page.")]), a("p", [a("pro-required", { attrs: { ultra_required: !0, root: e.root } }), e._v("  See your SpamBox much faster with unified Email and SMS inbox.")], 1), a("br"), a("p", [e._v("If you hate this popup, you can always disable it from the Settings page.")])]), e._m(1)])])]) }, ws = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-header" }, [a("h5", { staticClass: "modal-title text-white" }, [e._v("Behold the new Fake Data popup!")])]) }, function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "modal-footer" }, [a("button", { staticClass: "btn btn-sm btn-dark-green", attrs: { type: "button", "data-dismiss": "modal" } }, [e._v("Cool!")])]) }], ks = { components: { ProRequired: F }, name: "enable-fd-cloud-modal", props: ["root"], mounted() { this.root.getStorageEngine().get({ show_fd_popup_welcome: !1 }, function (e) { e.show_fd_popup_welcome && $(this.$el).modal("show") }.bind(this)), $(this.$el).on("hide.bs.modal", this.onModalClosed) }, methods: { onModalClosed: function () { this.root.getStorageEngine().set({ show_fd_popup_welcome: !1 }) } } }, ys = ks, xs = Object(b["a"])(ys, bs, ws, !1, null, null, null), Cs = xs.exports, $s = { components: { PopupIntroductionModal: Cs }, name: "PopupMain", props: ["root"], data() { return { active_element: null, previews: {}, popup_last_previews: {}, fake_data_not_loaded_message: "Fake Data has not been loaded correctly here. Try refreshing the page.", insert_method: null, custom_generators: [], popup_auto_fill_on_generate: !0, popup_generators_list_collapsed: null } }, mounted() { this.loadLastPreviews(), this.root.resetBsEvents(), this.sendToActiveTab({ type: "get_last_active_element" }, this.onActiveInputsUpdated), this.checkUrlOfActivePage(), this.root.dismiss_version_notif++ }, methods: { loadLastPreviews: function () { this.root.getStorageEngine().get({ popup_last_previews: null, insert_method: "replace", custom_generators: [], popup_auto_fill_on_generate: !0, popup_generators_list_collapsed: null }, function (e) { if (e && (this.insert_method = e.insert_method, this.custom_generators = e.custom_generators, this.popup_auto_fill_on_generate = e.popup_auto_fill_on_generate, this.popup_generators_list_collapsed = e.popup_generators_list_collapsed, e.popup_last_previews)) for (var t in this.popup_last_previews = e.popup_last_previews, e.popup_last_previews) this.showGeneratedPreview(e.popup_last_previews[t], t, !1, "load") }.bind(this)) }, checkUrlOfActivePage: function () { chrome.tabs.query({ active: !0, currentWindow: !0 }, function (e) { var t = e[0].url; if (t) { var a = new URL(t); ("addons.mozilla.org" == a.hostname && "firefox" == this.root.getBrowser() || "chrome.google.com" == a.hostname && "firefox" != this.root.getBrowser() || "microsoftedge.microsoft.com" == a.hostname && "edge" == this.root.getBrowser() || "addons.opera.com" == a.hostname && "opera" == this.root.getBrowser() || "http:" != a.protocol && "https:" != a.protocol && "file:" != a.protocol) && (this.fake_data_not_loaded_message = "Fake Data cannot run properly on this page.") } }.bind(this)) }, sendToActiveTab: function (e, t = null) { let a = this; chrome.tabs.query({ active: !0, currentWindow: !0 }, (function (s) { chrome.tabs.sendMessage(s[0].id, e, (function () { chrome.runtime.lastError || "function" == typeof t && t.apply(a, arguments) })) })) }, forwardCmd: function (e) { this.sendToActiveTab({ type: "browser_action", action: e }) }, onActiveInputsUpdated: function (e) { this.active_element = e, this.$nextTick((function () { this.root.resetBsEvents() })) }, getColClass: function (e) { var t = []; return this.root.fields.indexOf(e) >= 0 ? t.push("col-6") : t.push("col-12"), t.join(" ") }, previewGenerator: function (e, t = !1, a = null) { this.previews[e] && !this.previews[e].generated || (this.$set(this.previews, e, { generated: !1, text: "", error: !1, trigger_by: a }), $(".tooltip").remove(), chrome.runtime.sendMessage({ type: "get_faker_original_callback", field_name: e, generator: e, keep_fill_session: t }, function (t) { this.parseGeneratedPreviewCallback(t, e, a) }.bind(this))) }, previewText: function (e, t = 50) { return e.length > t ? e.substr(0, t - 3) + "..." : e }, copyToClipboard: function (e) { var t = "A" == event.target.tagName ? $(event.target) : $(event.target).closest("a"), a = t.attr("title") || t.attr("data-original-title"); if (t.one("mouseout", (function () { t.tooltip("dispose").attr("title", a).tooltip() })), !this.previews[e] || !this.previews[e].generated || this.previews[e].error || !this.previews[e].text) return void t.tooltip("dispose").attr("title", "Nothing to copy").tooltip("show"); t.tooltip("dispose").attr("title", "Copied!").tooltip("show"); const s = document.createElement("textarea"); s.value = this.previews[e].text, document.body.appendChild(s), s.select(), document.execCommand("copy"), document.body.removeChild(s) }, parseGeneratedPreviewCallback: function (e, t, a) { if (this.previews[t]) if (e) if ("error" != e.type) { var s; if ("string" == typeof e.callback_before && e.callback_before) if (3 == this.root.getManifestVersion()) s = this.root.evalMV3CodeInSandbox(e.callback_before); else { var i = new Function(e.callback_before); s = i(null) } s && s.then || (s = new Promise((function (e) { e() }))), s.then(function () { var s = e.text || ""; if ("object" === e.text_type) { var i = JSON.parse(e.text, this.root.functionReviver); if (null !== i && i.constructor === Array && "function" === typeof i[0]) { var o = new Function("return " + i[0])(); i[0] = null, s = o.apply(this, i) } else s = JSON.stringify(i, this.root.functionReplacer) } else if ("function" === e.text_type) { o = new Function("return " + e.text)(); s = o.apply(this, [null]) } if ("object" != typeof s || s.constructor != Promise) { var n = s; s = new Promise((function (e) { e(n) })) } s.then(function (s) { if (this.previews[t] && (this.showGeneratedPreview(s || "", t, !1, a), "string" == typeof e.callback_after && e.callback_after)) if (3 == this.root.getManifestVersion()) this.root.evalMV3CodeInSandbox(e.callback_after); else { var i = new Function(e.callback_after); i(null) } }.bind(this)) }.bind(this)) } else this.showGeneratedPreview(e.result || "Error", t, !0, a); else this.showGeneratedPreview("Failed to run", t, !0, a) }, showGeneratedPreview: function (e, t, a, s) { this.$set(this.previews, t, { generated: !0, text: e, error: a, trigger_by: s }), this.root.resetBsEvents(), "generate_single" == s && !this.previews[t].error && this.active_element && this.active_element.element_is_fillable && !this.active_element.elements_in_selection && ("textarea" == this.active_element.element_tag || "input" == this.active_element.element_tag && ["radio", "checkbox", "color", "file", "range", "image"].indexOf(this.active_element.element_tag) < 0) && this.popup_auto_fill_on_generate && this.insertValueIntoActiveInput(t), !a && e && e != this.popup_last_previews[t] && (this.popup_last_previews[t] = e, this.root.getStorageEngine().set(this.root.normalizeVueObject({ popup_last_previews: this.popup_last_previews }))) }, generateAll: function () { var e = "fd-popup-" + performance.now(); for (var t in this.root.fields) this.previewGenerator(this.root.fields[t], e, "generate_all"); for (var t in this.custom_generators) this.previewGenerator(this.custom_generators[t].label, e, "generate_all") }, clearAll: function () { this.previews = {}, this.popup_last_previews = {}, this.root.getStorageEngine().set(this.root.normalizeVueObject({ popup_last_previews: this.popup_last_previews })), $(".tooltip").remove() }, insertValueIntoActiveInput: function (e) { chrome.runtime.sendMessage({ type: "send_fake_command", text: this.previews[e].text, text_type: typeof this.previews[e].text, label: e, insert_method: this.insert_method }) }, fillSelectedFields: function () { this.sendToActiveTab({ type: "fill_selected_fields" }) }, collapseGenerators: function (e) { this.popup_generators_list_collapsed || (this.popup_generators_list_collapsed = {}), this.$set(this.popup_generators_list_collapsed, e, !this.popup_generators_list_collapsed[e]), this.root.getStorageEngine().set(this.root.normalizeVueObject({ popup_generators_list_collapsed: this.popup_generators_list_collapsed })) } } }, Ss = $s, As = Object(b["a"])(Ss, vs, gs, !1, null, "HA_MODULE_56c1fcee8ce5fc2cd4a2cc348694266a", null), Fs = As.exports, Ds = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "popup-page-spambox" }, [e.root.isUltraSubscriber() && e.root.cloud_enabled ? a("div", [a("div", { staticClass: "mt-4 mb-4 width100" }, [a("div", [e.refreshing ? a("button", { staticClass: "btn btn-sm elegant-color-dark", attrs: { disabled: "" } }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } }), e._v("  Refreshing...")], 1) : a("button", { staticClass: "btn btn-sm elegant-color-dark", on: { click: e.refreshEntries } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "sync"] } }), e._v("  Refresh")], 1), e.mark_as_read_loading ? a("button", { staticClass: "btn btn-sm elegant-color-dark pl-3 pr-3", attrs: { disabled: "" } }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1) : a("button", { staticClass: "btn btn-sm elegant-color-dark pl-3 pr-3", attrs: { title: "Mark all as read" }, on: { click: e.markAllAsRead } }, [a("font-awesome-icon", { attrs: { icon: ["fas", "envelope-open-text"] } })], 1), a("button", { staticClass: "btn btn-sm pull-right elegant-color-dark", on: { click: function (t) { return e.root.openOptionsPage("/cloud/email", !0) } } }, [e._v("View all Messages")])])]), e.loading_all ? a("div", { staticClass: "mt-5" }, [a("h4", { staticClass: "text-center" }, [a("font-awesome-icon", { staticClass: "animation-rotate", attrs: { icon: ["fas", "sync"] } })], 1)]) : a("div", [e.all_emails.length ? a("div", [e.all_emails.length ? a("table", { staticClass: "table table-borderless", attrs: { id: "cloud_email_table" } }, [a("tbody", e._l(e.all_emails, (function (t) { return a("tr", { staticClass: "text-white cursor-pointer", class: { "elegant-color-dark": !t.read, "elegant-color-light": t.read, "grey-text": t.read }, on: { click: function (a) { return e.readEmail(t) } } }, [a("td", { staticClass: "text-overflow" }, [e._v(e._s(t.subject))]), a("td", { staticClass: "text-right", staticStyle: { width: "180px" } }, [e._v(e._s(e.root.parseDate(t.date, !0, !0)))])]) })), 0)]) : e._e()]) : a("div", [a("p", { staticClass: "text-center" }, [e._v("No messages received.")])])])]) : a("div", [a("div", { staticClass: "tab-content" }, [a("div", { staticClass: "tab-pane in active", attrs: { role: "tabpanel" } }, [a("h4", { staticClass: "text-center" }, [a("a", { staticClass: "pro_required text-white", on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.root.openOptionsPage("/account/license", !0) } } }, [a("span", { staticClass: "text-danger" }, [a("font-awesome-icon", { staticClass: "mb-3", staticStyle: { "font-size": "32px" }, attrs: { icon: ["fas", "lock"] } }), a("br"), e._v("Only for Ultra Subscribers")], 1)])]), e._m(0), a("div", { staticClass: "text-center mt-5" }, [a("a", { staticClass: "btn btn-success btn-dark-green", on: { click: function (t) { return t.stopPropagation(), t.preventDefault(), e.root.openOptionsPage("/account/license", !0) } } }, [e._v(" Become Ultra Subscriber ")])])])])])]) }, Es = [function () { var e = this, t = e.$createElement, a = e._self._c || t; return a("div", { staticClass: "mt-5 white-space-initial" }, [a("p", [e._v("Did you know that Fake Data can generate for you private disposable emails?")]), a("p", [e._v("Whenever you fill an email address inside a form, Fake Data will instantly generate a unique random address that can catch all incoming emails and show them to you right here. Awesome, right?")]), a("p", [e._v("Unlike other disposable email services, Fake Data has some advantages:")]), a("ul", [a("li", { staticClass: "mb-3" }, [e._v("The emails are private and only you can see them.")]), a("li", { staticClass: "mb-3" }, [e._v("Each email address generated is unique and yours. No one will be able to re-use the address and receive your emails.")]), a("li", { staticClass: "mb-3" }, [e._v("All emails are arriving in the same inbox, and there is no need to check each address individually.")]), a("li", { staticClass: "mb-3" }, [e._v("You can generate unlimited addresses that never expire as long as you receive 1 message per year.")]), a("li", { staticClass: "mb-3" }, [e._v("You can customise the addresses that are generated.")]), a("li", [e._v("It's much cheaper than other premium plans of similar services")])]), a("p", { staticClass: "mt-5" }, [e._v("But wait, there is more! Fake Data will also give your own personal phone number that can receive SMS and MMS messages.")]), a("ul", [a("li", { staticClass: "mb-3" }, [e._v("The phone number is dedicated to your account. Only you can see the messages you receive.")]), a("li", [e._v("The phone number is yours to keep as long as you keep your subscription active.")])])]) }], js = { name: "PopupSpambox", props: ["root"], data() { return { all_emails: [], meta: null, refreshing: !0, loading_all: !0, load_more_loading: !1, init_loaded: !1, mark_as_read_loading: !1 } }, watch: { "root.ultra_subscription_meta": function () { !this.init_loaded && this.root.isUltraSubscriber() && this.root.cloud_enabled && this.getMessages() } }, mounted() { this.root.resetBsEvents(), !this.init_loaded && this.root.isUltraSubscriber() && this.root.cloud_enabled && this.getMessages() }, methods: { readEmail: function (e) { chrome.tabs.query({ active: !0, currentWindow: !0 }, function (t) { var a = "/cloud/" + e._entry_type + "/?read=" + e.id; t && t.length && t[0].id && (a += "&backto=" + t[0].id), this.root.openOptionsPage(a, !0) }.bind(this)) }, getMessages: function (e = null, t = null, a = !1) { return this.refreshing = !0, this.init_loaded = !0, new Promise(function (a) { chrome.runtime.sendMessage({ type: "cloud.get_popup_email_sms", last: e, filters: t }, function (e) { e && e.email_sms && (this.appendEmailsToList(e.email_sms, e.meta), this.refreshing = !1, this.loading_all = !1, this.load_more_loading = !1, this.root.retrieveCloudData(), a(e)) }.bind(this)) }.bind(this)) }, appendEmailsToList: function (e, t) { if (e) { for (var a = [].concat(this.all_emails).concat(e), s = {}, i = 0; i < a.length; i++)s[a[i].id + " " + a[i].email_id] = a[i], "undefined" == typeof a[i].state && (a[i].state = ""); a = Object.values(s), a.sort((function (e, t) { return t.date.localeCompare(e.date) })), this.all_emails = a, t && (this.meta = t), this.root.resetBsEvents() } }, refreshEntries: function () { var e = {}; this.all_emails.length && (e.before_id = this.all_emails[0].id), 0 == Object.values(e).length && (e = null), this.getMessages(null, e) }, markAllAsRead: function () { $(".tooltip").remove(), confirm("Confirm marking all messages as read?") && (this.mark_as_read_loading = !0, chrome.runtime.sendMessage({ type: "cloud.mark_everything_as_read", email_ids: "all", sms_ids: "all" }, function (e) { e.success && this.all_emails && this.all_emails.forEach(e => e.read = 1), this.mark_as_read_loading = !1, this.root.retrieveCloudData() }.bind(this))) } } }, Os = js, Ps = (a("7fc0"), Object(b["a"])(Os, Ds, Es, !1, null, "HA_MODULE_b85a1f8d91fe526cf8ac43938734cb60", null)), Ms = Ps.exports; r["c"].add(l["a"]), r["c"].add(c["a"]), s["a"].component("font-awesome-icon", d["a"]), s["a"].config.devtools = !1, s["a"].use(i["a"]), s["a"].prototype.$eventHub = new s["a"], s["a"].use(_.a, { options: { indentUnit: 4, tabSize: 4, indentWithTabs: !0, viewportMargin: 1 / 0, mode: "text/javascript", theme: "monokai", lineNumbers: !0, line: !0, lineWrapping: !0, autoCloseBrackets: !0, styleActiveLine: !0, keyMap: "sublime", extraKeys: { Esc(e) { e.getOption("fullScreen") && e.setOption("fullScreen", !1), e.getOption("fullScreen") ? $("body").addClass("has_full_editor") : $("body").removeClass("has_full_editor") } } } }); var Ts = new i["a"]({ parseQuery: function (e) { return n.a.parse(e) }, stringifyQuery(e) { var t = n.a.stringify(e); return t ? "?" + t : "" } }), Us = s["a"];[{ path: "/settings", component: gt, name: "Settings" }, { path: "/settings/:kind", component: gt, name: "Settings" }, { path: "/settings/:kind/:subkind", component: gt, name: "Settings" }, { path: "/settings/:kind/:subkind/:subsubkind", component: gt, name: "Settings" }, { path: "/fields", component: ea }, { path: "/fields/:kind", component: ea }, { path: "/howto", component: na }, { path: "/rtfm", component: na }, { path: "/rtfm/:kind", component: na }, { path: "/about", component: _a }, { path: "/about/:kind", component: _a }, { path: "/changelog", redirect: "/about/changelog" }, { path: "/generators", component: wa }, { path: "/generators/:kind", component: wa }, { path: "/account", component: Va }, { path: "/account/:kind", component: Va }, { path: "/cloud", component: fs }, { path: "/cloud/:kind", component: fs }, { path: "/", redirect: "/generators/default" }, { path: "/popup/main", component: Fs, props: { popup: !0 }, name: "PopupMain" }, { path: "/popup/spambox", component: Ms, props: { popup: !0 }, name: "PopupSpambox" }].forEach(e => Ts.addRoute(e)), new s["a"]({ router: Ts, render: e => e(T) }).$mount("#app") }, 6: function (e, t) { }, "61f1": function (e, t, a) { "use strict"; a("63f1") }, "622c": function (e, t, a) { "use strict"; a("fc78") }, "63f1": function (e, t, a) { }, 6442: function (e, t, a) { }, 7: function (e, t) { }, "727d": function (e, t, a) { "use strict"; a("3ca4") }, "747b": function (e, t, a) { }, "79f1": function (e, t, a) { }, "7e13": function (e, t, a) { "use strict"; a("a23c") }, "7fc0": function (e, t, a) { "use strict"; a("79f1") }, 8: function (e, t) { }, "825d": function (e, t, a) { }, 8394: function (e, t, a) { }, "85ec": function (e, t, a) { }, "8c91": function (e, t, a) { "use strict"; a("2388") }, 9: function (e, t) { }, 9445: function (e, t, a) { }, a23c: function (e, t, a) { }, aa59: function (e, t, a) { }, ad14: function (e, t, a) { }, b792: function (e, t, a) { }, bbf5: function (e, t, a) { }, bcfa: function (e, t, a) { "use strict"; a("9445") }, be72: function (e, t, a) { "use strict"; a("cd7e") }, c081: function (e, t, a) { "use strict"; a("bbf5") }, cd7e: function (e, t, a) { }, d829: function (e, t, a) { "use strict"; a("43a3") }, db24: function (e, t, a) { "use strict"; a("1518") }, e09e: function (e, t, a) { }, ef9a: function (e, t, a) { "use strict"; a("22a7") }, f302: function (e, t, a) { "use strict"; a.r(t), t["default"] = [{ release_date: "2023-08-31", version: "4.6.0", items: ["Bug fix: Sometimes the Manage Field modal was not properly detecting conflicting fields for Named Fields.", "Bug fix: Sometimes the Manage Field modal did not open the correct Unnamed Field if it had a different but matching selector.", 'If "Fallback to Unnamed Fields" setting is disabled, the Manage Field modal will no longer look for conflicting fields, since they have no effect anyway.', "In the Manage Field modal, if you try to save a Named Field as Unnamed field and you don't have the setting enabled, you will see a warning message.", { text: "When managing Unnamed Fields, you can now use XPath instead of CSS selectors to match elements.", docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/fields/match-unnamed-fields-xpath.html" }, { pro: !0, text: "Choosing the setting to always fill All Checkboxes was not working on Google Forms. Now it's fixed." }] }, { release_date: "2023-07-11", version: "4.5.0", items: [{ pro: !0, text: "You can now add Datasets from Google Sheets and keep them synced automatically.", docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/pro/datasets/dataset-from-google-sheets.html" }, { pro: !0, text: "Fixed a bug in Dataset preview where values would not match the columns." }, { ultra: !0, text: "Fixed an issue where email attachments that had no filename were not handled properly." }, { text: "Updated the privacy policy page to include how is your data used by the extension when connecting a new Dataset from Google Sheets. TL;DR: your data is safe and private, and nothing leaves your browser.", docs_link: "https://fakedata.pro/privacy-policy#datasets_google_sheets", docs_text: "Read more" }, "Fixed deprecation warning from latest faker.js update.", "Suppressed some errors for MV3"] }, { release_date: "2023-06-09", version: "4.4.1", items: ["Updated <code>faker.js</code> library to version 8.0.2 (#651d1a8).", { ultra: !0, text: "Plain text emails should no longer be rendered as HTML." }, "A few wording updates on the options page"] }, { release_date: "2023-05-29", version: "4.4.0", items: [{ pro: !0, text: "Introducing a new feature called Datasets! Bring your own data from CSV files inside Generators!", docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/pro/datasets/using-datasets.html" }, { ultra: !0, text: "For Cloud Email prefixes you can now include random data from Faker library.", docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/ultra/use-dynamic-prefix-for-disposable-emails.html" }, { ultra: !0, text: "In a future update, you will be able to add your own custom domain for Cloud Emails. This update includes some preparations for that." }] }, { release_date: "2023-04-04", version: "4.3.5", items: ["Fix Ukrainian locale person names."] }, { release_date: "2023-03-12", version: "4.3.4", items: [{ ultra: !0, text: "Allow requesting address for a specific location through JS code.", docs_link: "https://docs.fakedata.pro/writing-code/request-cloud-place.html" }] }, { release_date: "2023-02-22", version: "4.3.3", items: [{ ultra: !0, text: "Select2 dropdowns will now work with Cloud Places when selecting countries, states, or cities." }] }, { release_date: "2023-02-15", version: "4.3.2", items: ["Fix an error that might arise when checking for Shadow DOM.", "Fix crash when DOM observer is enabled and non `HTMLElement`s are created.", "Fixed a bug in field matching.", { pro: !0, text: "Fill entire form action from context menu was not working on Google Forms. Now it does." }, { ultra: !0, text: "Fixed an issue that would fail to generate cloud data properly if the communication with the server gets lost and then restored." }] }, { release_date: "2022-11-16", version: "4.3.1", items: [{ ultra: !0, text: "You can now generate real addresses and zip codes for the Czech Republic." }, { ultra: !0, text: "Fixed a bug in MV3 version where the Cloud generators would not fill anything when the service worker is re-started by the fill event." }, { ultra: !0, text: "Fixed images not showing properly in emails where the linked image was embedded as an attachment." }, "Fixed an issue in MV3 version where filling a custom generator from context menu would not work with inputs inside an iframe.", "Reworked Shadow DOM handling, and should not break websites anymore.", "Small UI updates and fixes. The settings page will now also show the current Fake Data version and the Manifest Version that you are using.", "When sending feedback using the popup from the bottom-right corner, you can now choose whether you want to send some additional debug info or not."] }, { release_date: "2022-10-11", version: "4.3.0", items: [{ pro: !0, text: 'You can now undo a fill by right-clicking on the input field and selecting "Undo fill" or "Undo fill for entire form". Only for basic HTML inputs for now. Custom elements will be coming soon.', docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/pro/undo-input-fill.html" }, "You will now get a warning message if you try to fill all the inputs in the page while editing a Google Form. No more swearing and cursing for losing all your work.", "Fixed an issue where defining a custom range for number generator would not work as expected with an input type number with min/max attributes set.", "Fixed some errors happening on the MV3 version of Fake Data."] }, { release_date: "2022-09-04", version: "4.2.0", items: [{ ultra: !0, text: "You can now mark all emails or sms messages as read from the SpamBox page, not only from popup." }, { ultra: !0, text: "You can now generate real Romanian addresses and zipcodes combinations." }, "URLs declared for autofill setting will be matched for both http:// and https://."] }, { release_date: "2022-08-29", version: "4.1.0", items: [{ text: "You can now define which URLs you want to autofill on page load.", docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/settings/settings-fill-on-page-load.html#manage-urls-that-are-filled-or-not-filled-automatically" }, "Fixed Romanian city locale.", "Fixed a bug where a radio button group was changed multiple times instead of once.", { text: "Starting with Oct. 1st, Fake Data Pro license will be &euro;4.99.", readmore_link: "https://www.fakedata.pro/blog/pricing-update-2022" }] }, { release_date: "2022-07-28", version: "4.0.0", items: ['Reworked a lot of internal code so that Fake Data is now ready for the upcoming <a href="https://developer.chrome.com/docs/extensions/mv3/mv2-sunset/" class="text-white underline" target="_blank">Google MV3 update</a>. The current version will still use MV2 APIs until December 2022 when the transition to MV3 will happen. <a href="https://docs.fakedata.pro/writing-code/mv2-to-mv3-migration.html" target="_blank" class="btn btn-warning btn-xs position-relative" >Read more</a>', 'Updated <a href="https://github.com/faker-js/faker" target="_blank" class="text-white underline">Faker library</a> to the new community-supported version (forked at version 7.2.0, commit #38805db2).', "Fixed paragraph generator, which was not respecting the sentence count settings.", { text: "There is a new help page that looks much better (it's still a work in progress). And it has demo videos too!", docs_link: "https://docs.fakedata.pro/" }, { text: "You can now reorder Custom Generators.", docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/generators/generators.html#reordering-custom-generators" }, { text: 'You can now ignore fields and forms with <code>autocomplete="off"</code> attribute. By default, this is disabled, but you can enable it from the Settings page.', docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/settings/developer-options/field-matching/ignore-fields-with-autocomplete-off.html" }, "Fake Data will now select multiple random options for multi-selects. You can customise this behavior from the settings page.", { pro: !0, text: "When managing a &lt;select&gt; dropdown. you can now exclude options from being selected. This works for both simple and multi selects." }, { pro: !0, text: "Integration with react-select custom dropdowns.", docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/settings/developer-options/custom-integrations/react-select.html" }, { pro: !0, text: "Integration with Vuetify custom elements.", docs_link: "https://docs.fakedata.pro/how-to-use-fake-data/settings/developer-options/custom-integrations/vuetify.html" }, "Fixed some typos throughout the options page."] }, { release_date: "2022-03-26", version: "3.12.3", items: [{ pro: !0, text: "Fixed Google Forms integration to work properly with the latest Google update on the forms." }] }, { release_date: "2022-02-07", version: "3.12.2", items: ['<span class="text-warning">Show a warning message regarding the Google\'s upcoming MV3 API transition and its implications for Fake Data. <a href="https://github.com/haterapps/fake-data/issues/12" target="_blank" class="btn btn-warning btn-xs position-relative" >Read more</a></span>'] }, { release_date: "2021-11-29", version: "3.12.1", items: ["Fixed a bug which prevented Fake Data to load correctly in some cases after restoring a backup."] }, { release_date: "2021-10-22", version: "3.12.0", items: [{ ultra: !0, text: "You can now mark all messages as read from Popup." }, { ultra: !0, text: "Updated colors for messages inside popup to match the ones from SpamBox page, so they are more consistent now." }, { ultra: !0, text: "Fix: Email page was not closing correctly after opening from popup and then blacklisting an address." }, "Small UI fixes on Options page."] }, { release_date: "2021-10-09", version: "3.11.0", items: ['Fixed "Portuguese (Brazil)" locale missing city names.', "You can now do a backup and restore the settings and loaded libraries."] }, { release_date: "2021-09-30", version: "3.10.1", items: [{ ultra: !0, text: "You can now generate real addresses for Brazil." }, { ultra: !0, text: "Bug fix: When opening an email from the popup and then try to blacklist the receiver address, the animation will show correctly." }] }, { release_date: "2021-08-28", version: "3.10.0", items: ["When ignoring non-empty fields setting is enabled, checkboxes and radio buttons will only be ignored if they are checked, or based on their appropriate setting.", { ultra: !0, text: "France addresses and zip codes can now be generated using Cloud Places." }, "Small UI fixes."] }, { release_date: "2021-08-03", version: "3.9.0", items: [{ pro: !0, text: 'Fixed a bug on "autofill inputs" feature for custom registered elements.' }, "Generators list inside popup can now be collapsed.", "In the Popup Settings page, you can now choose which screen should open by default."] }, { release_date: "2021-07-30", version: "3.8.0", items: ['Fixed a bug in "Fill on page load" action that was not always triggering correctly.', "Besides filling on page load, Fake Data can now monitor DOM changes and fill inputs as they appear on the page. This option can be enabled in the Settings page after enabling filling on load.", "Fill entire page action is now available in context menu as well, only when Fill entire form is not available.", { ultra: !0, text: "Inside Cloud Settings page, you can now choose between two domain names to use for generating disposable addresses: <code>mail.fakedata.pro</code> or <code>fakedata.email</code>." }, { ultra: !0, text: "The new default domain for disposable addresses will be <code>@fakedata.email</code>. Previously generated addresses will continue to work." }] }, { release_date: "2021-07-26", version: "3.7.0", items: ["Introducing the new Popup feature that gives easy access to Generators, fill actions, and SpamBox. It should also make Fake Data more intuitive for first-time users.", "Removed URL generator from Default Generators section. In case you were having Fields that were using it, a new URL Custom Generator was automatically created, so you can delete it after not using it anymore.", "Added a new section in Settings page for Popup settings.", "A few other small fixes on this options page", { ultra: !0, text: "The new Popup will contain a unified inbox with both Emails and SMS messages for quick access." }] }, { release_date: "2021-07-12", version: "3.6.5", items: ["Bug fix: Fake Data was crashing on filling elements with an id attribute containing special characters."] }, { release_date: "2021-07-09", version: "3.6.4", items: ["New Fake Data API method: <code>fakeData.getGeneratorMatchForElement(&lt;DOM_input_element&gt;)</code> - will return the generator name that would be used to fill an input field.", "Bug fix: When managing a radio button with no name and label, the dropdown with the values was showing an empty entry instead of the value.", { ultra: !0, text: "Bug fix: <code>fakeData.getLastGeneratedValue()</code> was not returning anything for Cloud Place fields when filling the entire form at once." }, "Slightly improve fuzzy matching of address fields."] }, { release_date: "2021-07-02", version: "3.6.3", items: [{ ultra: !0, text: "When receiving OTP codes via SMS messages, you can now automate filling them by creating a Custom Generator with the following line of code:<br /><code>return new Promise(resolve => fakeData.ultra.getLastSms().then(sms => resolve(sms.parsing.numbers[0])));</code><br /><br />" }, "Bug fixed: Managing an element whose attributes were constantly changing would throw an error if you tried to change the matching selector."] }, { release_date: "2021-06-10", version: "3.6.2", items: ["There was an error when trying to load a backup file in order to restore it. That is fixed now.", "Fake Data was freezing when managing a &lt;select&gt; element and making multiple changes. Not anymore!"] }, { release_date: "2021-05-18", version: "3.6.1", items: [{ ultra: !0, text: "You can now generate real zip codes and street names for Netherlands country." }, { pro: !0, text: "Fixed a bug in Google Forms integration where changing the behavior of a checkbox would affect all the checkboxes under the same group." }] }, { release_date: "2021-05-15", version: "3.6.0", items: [{ ultra: !0, text: "Added Belgium for Cloud Places generators. You can now generate real addresses and zipcodes from Belgium." }, { ultra: !0, text: "Under Cloud Settings you can now choose the preferred country for Cloud Place generators." }, { ultra: !0, text: "When your Ultra Subscription is expired and new incoming messages are received, Fake Data will now show a warning saying that you cannot read them instead of just showing a confusing notification bubble." }, { ultra: !0, text: "Fixed a bug where multiple Cloud Emails with same ID were not showing on the list at the same time." }, "A few more bug fixes inside <code>fakeData</code> API.", "Updated UI framework library used on this page."] }, { release_date: "2021-05-05", version: "3.5.6", items: [{ ultra: !0, text: "Sometimes the Preview buttons didn't work on Fields page for entries that were using an Ultra Place generator. It's fixed now." }, "Fixed a bug in <code>fakeData</code> API for foreground scripts."] }, { release_date: "2021-04-09", version: "3.5.5", items: ["Fixed UI on manage select element that broke after the last update.", "<code>fakeData.getLastGeneratedValue()</code> was not returning the correct value everytime. Now it should be fixed."] }, { release_date: "2021-04-06", version: "3.5.4", items: ["Updated libraries used in this options page."] }, { release_date: "2021-04-04", version: "3.5.3", items: ["Fix license activation on old versions of Firefox."] }, { release_date: "2021-04-03", version: "3.5.2", items: ["Fixed a bug that prevented fields to be managed if they had a label tag overlapping them."] }, { release_date: "2021-03-17", version: "3.5.1", items: ["Fixed an error that sometimes occurred when managing an unnamed field."] }, { release_date: "2021-03-14", version: "3.5.0", items: [{ ultra: !0, text: "Replaced the library that parses links inside emails with one that doesn't break links, hopefully." }, { ultra: !0, text: "Renamed Cloud menu item to SpamBox." }, { ultra: !0, text: "Updated UI to allow you to select all emails or sms messages at once, if you want to." }, { pro: !0, text: "Updated Marketplace link for Google Sheets Add-on." }, { pro: !0, text: "When you try to load a third-party library into Fake Data with a file name that already exists, Fake Data will now overwrite the old one." }, "SpamBox menu item is now visible to Free and Pro users and will describe what awesome features you can unlock by subscribing to Ultra plan."] }, { release_date: "2021-03-07", version: "3.4.0", items: [{ ultra: !0, text: "You can now add email addresses to blacklist and stop receiving messages from or to them. This way you can also deactivate your previously generated cloud email addresses that are still receiving spam." }, { ultra: !0, text: "Fixed badge notification counter was not cleared when removing License key." }, { ultra: !0, text: "Fixed Google Sheets integration to work well with the latest Cloud Generators." }, "Password fields will now be filled with same password regardless of the used Generator, when filling entire form. This can be disabled from settings."] }, { release_date: "2021-02-16", version: "3.3.0", items: [{ pro: !0, text: "On Account page, you can now see your activated license key." }, "When filling entire form, password fields will be filled with same value. This setting can be disabled from Settings / Developer Options / Field Matching.", "Small UI fixes."] }, { release_date: "2021-02-03", version: "3.2.0", items: ["Returning <code>false</code> was not skipping the field properly when it was executed as content script. Now it does.", "Updated donation link.", "Updated styling a little on the lame code editor", { ultra: !0, text: "Badge notifications for emails and sms are enabled by default." }, { ultra: !0, text: "SMS messages will now show line breaks properly instead of having the entire message on one line" }, { ultra: !0, text: "Plain text links from received emails and sms messages are now clickable." }] }, { release_date: "2021-01-12", version: "3.1.1", items: ["Fixed compatibility issue with older versions of browser."] }, { release_date: "2021-01-05", version: "3.1.0", items: [{ ultra: !0, text: "Fixed a bug where address generators with Cloud Place enabled were not filling correctly when triggered from context menu." }, { ultra: !0, text: "Fixed a visual bug where Cloud Phone would disappear while editing Cloud Settings." }, "You can now automatically fill entire page when it loads! Just enable this in Settings.", "A new setting has been added for grouping Default Generators under their own parent in context menu, in order to reduce clutter."] }, { release_date: "2020-12-25", version: "3.0.0", items: ["Fake Data v3 is here and comes with some big awesome features!<br /><br />", { ultra: !0, text: "Testing forms implies testing emails, and you must be receiving a lot. Fake Data comes now unlimited private disposable email addresses that you can use to receive emails directly in Fake Data." }, { ultra: !0, text: "Sometimes testing forms implies also receiving SMS messages. Fake Data offers you a real phone number that will receive SMS and MMS messages directly in Fake Data" }, { ultra: !0, text: "When filling address fields and zipcodes, you can now fill them with real addresses and real zip codes that match. At this moment, the database contains only US names. But more can be added in the future or at request." }, { ultra: !0, text: "Added new Cloud generators for disposable email addresses, real phone number and generating real street addresses with real zip codes." }, { ultra: !0, text: "A new monthly subscription that will cover the cloud features described above. No worries, the lifetime Pro license will not go anywhere and will still be available for all offline features that exists and will come." }, { pro: !0, text: "Added new Account page where you can manage your Pro license and Ultra Subscription." }, { pro: !0, text: "Fixed a bug where managing a &lt;select&gt; element will not populate with the previously selected value." }, { pro: !0, text: 'When managing a checkbox, you can now choose the option to "Leave the element as is" instead of "Always checked" or "Always unchecked".' }, "You can now choose a keyboard shortcut to quickly manage a field.", 'Moved Changelog page under "About"', "Few small UI updates on the Generators page."] }, { release_date: "2020-10-11", version: "2.19.2", items: ["Fixed some localization bugs in name and address generators."] }, { release_date: "2020-09-30", version: "2.19.1", items: [{ pro: !0, text: "Fixed jQuery conflict issue on Select2 custom integration." }] }, { release_date: "2020-09-21", version: "2.19.0", items: ['You can now set additional keyboard-only shortcuts from browser settings. Go to <a href="#/settings/keyboard" class="text-white underline">Keyboard Shortcuts page</a> for more info.'] }, { release_date: "2020-09-11", version: "2.18.5", items: ["Updated <code>moment-with-locales.js</code> library to the latest version as of today (2.27.0)", "Updated <code>faker.js</code> library to the latest version as of today (commit #91dc8a3)", "This also comes with new locales, although not 100% accurate: Arabic, Azerbaijani, Czech, Dutch (Belgium), English (South Africa), Finnish, French (Switzerland), Portuguese (Portugal), Romanian"] }, { release_date: "2020-09-10", version: "2.18.4", items: ["Fixed double-click shortcut on Firefox, on &lt;select&gt; elements.", "Updated <code>jQuery.js</code> to the latest version as of this day (3.5.1)"] }, { release_date: "2020-09-08", version: "2.18.3", items: [{ pro: !0, text: "Improved Google Forms integration" }, { pro: !0, text: "Improved detection and learning of custom handled form elements" }] }, { release_date: "2020-08-26", version: "2.18.2", items: ["Fixed a crash that occurred when Fake Data was trying to fill inputs that were wrapped in a label with an invalid selector in <code>for</code> attribute.", "Fixed a bug that caused Shadow DOM elements to not be created properly on Salesforce-based platforms."] }, { release_date: "2020-08-23", version: "2.18.1", items: ["Fix: Address generator won't generate street numbers starting with 0."] }, { release_date: "2020-08-06", version: "2.18.0", items: ["Small UI fixes where long text was expanding too much and looked out of place.", { pro: !0, text: "Fake Data can now fill Google Forms custom elements. Make sure you enable the Custom Integration for this to work." }, { pro: !0, text: "Fake Data API update: Custom elements registered with <code>fakeData.registerElement()</code> can now overwrite standard HTML inputs with <code>isHTMLInput: true</code> property." }] }, { release_date: "2020-07-15", version: "2.17.1", items: ["<code>full_name</code> Generator will not add a prefix or suffix to the name anymore. Only first name and last name will be generated."] }, { release_date: "2020-06-27", version: "2.17.0", items: ["When you manage a field, Fake Data will now show conflicting Unnamed Fields for the selected element, in case there are any.", "Fixed a bug where keyboard shortcuts were stopping from registering correctly", 'Added new method <code>fakeData.getFillSession()</code> that can be used to detect if two fields are filled from the same "fill entire form / page" trigger.'] }, { release_date: "2020-05-04", version: "2.16.1", items: ["Fix a bug in Firefox that prevented custom background libraries to be loaded correctly."] }, { release_date: "2020-05-02", version: "2.16.0", items: ["You can now choose from Settings page whether to ignore non-empty fields or not when filling entire form at once."] }, { release_date: "2020-04-19", version: "2.15.0", items: ["Settings page now contains a new tab for stats, which shows you how many times you have used Fake Data. No worries, the data is 100% offline as usual, and is not sent anywhere.", "A new button dedicated for sending feedback has been added in the bottom right corner of the page. Use it anytime you want.", "A non-intrusive question to rate Fake Data may show up while using the extension. This will happen only one time, I promise!", "Fixed some bugs that happened when learning new fields."] }, { release_date: "2020-03-25", version: "2.14.0", items: ['You can now fill only some fields at once by selecting/highlighting them with your mouse and choosing "Fill &lt;X&gt; selected fields" option from context menu.', "When you manage a field and update its selector, you can now reset it to its original version.", "Fixed a dumb mistake that broke logo on last update.", "In case of data load issue (it shouldn't happen), an error message is now displayed.", { pro: !0, text: "Loaded libraries can now be downloaded back to your computer, in case you want to make updates to them." }] }, { release_date: "2020-03-16", version: "2.13.0", items: ["Fake Data will now be able to fill forms with dynamic visible fields, where they appear progressively based on other field values.", { pro: !0, text: 'Fake Data can now be used with UI testing frameworks, by injecting <code>fakeData</code> object to <code>window</code>. Enable this cool feature from <a href="#/settings/developer/integrations" class="text-white underline">Custom Integrations</a> section.' }] }, { release_date: "2020-03-05", version: "2.12.1", items: ['Fixed <code>fakeData.getLastGeneratedValue</code> function that was not returning the expected value if a Generator was triggered from "Preview" button or from context menu.', 'GitHub is now used for how-to pages &amp; submitting public bug reports. <a href="https://github.com/haterapps/fake-data" target="_blank" class="btn elegant-color-dark btn-sm">Open page</a>', '"Fill entire form" button has been added to context menu - hopefully Fake Data is less shitty now.', 'Fix for "Manage Field" button that was enabled on restricted browser pages, even if it was not managing the correct field.'] }, { release_date: "2020-02-17", version: "2.12.0", items: ['Fixed a bug where "Manage Field" option was disabled when &lt;label&gt; tag contained multiple children elements.', "Fixed Salesforce Spring '20 error.", "Other minor errors fixed.", "Launched Fake Data on Microsoft Edge Addons store."] }, { release_date: "2019-06-01", version: "2.11.0", items: ["Fixed a crash that was occurring on websites that use CustomElements and Shadow DOM.", { pro: !0, text: 'New Google Sheets integration! You can now fill spreadsheets with Fake Data. Go to <a href="#/settings/developer/integrations" class="text-white underline">Custom Integrations</a> section and read the instructions there for more info.' }] }, { release_date: "2019-04-27", version: "2.10.1", items: ["Fixed a bug that was causing an error when returning non-string values on inputs with maxlength attribute."] }, { release_date: "2019-04-07", version: "2.10.0", items: ["New API method <code>fakeData.getLastGeneratedValue(generator)</code>, which will return the last value used for a certain generator.", "When an input field does not match anything, it will now insert a lorem ipsum sentence instead of leaving it empty. This can be customised, read further.", "A new Settings page, under Developer Options, has been created which allows you to fine tune the field matching options:", "<indent></indent> Ability to use Unnamed Fields rules as fallback when Named Fields does not match anything (default: Off).", "<indent></indent> Ability to use a Fallback Generator instead of leaving an input empty when nothing is matched (default: Sentence Generator).", "<indent></indent> When using Fuzzy matching and Fallback Generator, you can choose which one is triggered first (default: Fuzzy matching first).", "<indent></indent> Fuzzy match toggle has been moved to this new page.", "Few other tiny improvements to this options page."] }, { release_date: "2019-03-20", version: "2.9.5", items: ["Bug fix: Filling radio inputs was not working as expected on Firefox."] }, { release_date: "2019-03-17", version: "2.9.4", items: ["Bug fix: Some <code>date</code> inputs with either <code>min</code> or <code>max</code> (but not both) attributes set were not interpreted correctly.", "Fixed the date and time pickers that got fucked up in Chrome after an update at some point."] }, { release_date: "2019-03-12", version: "2.9.3", items: ["The <code>min</code> and <code>max</code> attributes were not respected anymore on number and date inputs if no Pro license was present. As biased as it may sound, this was not the intended behavior and now it's fixed.", "Inputs with type <code>number</code> and <code>range</code> will now respect the <code>step</code> attribute too.", 'Continuing the Shadow DOM implementation, "Fill entire form" and "Fill entire page" actions will now work with such components.'] }, { release_date: "2019-03-11", version: "2.9.2", items: ["There is a thing called Shadow DOM, inside which Fake Data was failing to fill the input fields. But that is not a problem anymore. Only <code>open</code> Shadow DOMs for now. The <code>closed</code> ones later. Nested Shadow DOMs are supported too.", "When you were trying to update a selector of an element that was inside a page with iframes, Fake Data was searching inside all frames to validate the new selector, and shit was happening. Now it's behaving correctly.", { pro: !0, text: "Fixed a bug that made <code>&lt;select&gt;</code> options to be read too early when you delayed the filling with a <code>Promise</code>, which defeated half of the purpose of the delay." }] }, { release_date: "2019-03-06", version: "2.9.1", items: ['"Manage Field" option is now available when right-clicking on a label. No more target practicing on checkboxes and radio buttons.', "Elements with invalid class names were crashing the extension. Now it's fixed."] }, { release_date: "2019-02-26", version: "2.9.0", items: ["Happy New Year! Oh, wait... Anyway, below are the first updates of 2019:<br /><br />", "When managing an Unnamed Field, you can now manually update the selector if you don't like the suggested one.", "Fixed error that was triggered when filling entire page through extension icon.", "Fixed bug that was opening a new tab when pressing enter on the search form from the Fields page.", { pro: !0, text: "Fixed bug where Option Fields where not matched correctly against existing selectors." }, "Updated third party UI frameworks and libraries.", '"How To" page now contains a TL;DR version for the "Basic Usage" section. Nobody has time to read paragraphs when coming here for the first time.', "Some other small updates and fixes that are not worth mentioning here.", { pro: !0, text: 'People have said how shitty Fake Data is for not supporting material form elements. Starting from today this will change, and Fake Data will not be shitty anymore. Or at least not for this reason. Under "<a class="text-white" href="#/settings/developer/integrations">Settings / Developer Options / Custom Integrations</a>" you can now enable integrations for third party form libraries. More of them will be coming soon.' }] }, { release_date: "2018-12-11", version: "2.8.0", items: ["Returning <code>false</code> on Custom Code will now make the input fields to be skipped instead of truncating the content.", "Bug fixed: When selecting from context menu a Generator that was returning a function, the code was inserted as text instead of being executed correctly.", "Bug fixed: On latest Firefox Nightly versions with IndexedDB as new default storage engine, the data got corrupted when saving.", { pro: !0, text: "Under Developer Options / Loaded Libraries you can now decide to load scripts either in background or in foreground page." }, { pro: !0, text: "Bug fixed: On code editor, keyboard shortcut for commenting code was not working." }] }, { release_date: "2018-11-13", version: "2.7.1", items: ['<span title="At this moment this works only on fields that are focused.">*</span>On Chrome and Opera, inserting data into inputs will now preserve the "Undo" history.', "Few background improvements when filling input fields by clicking on extension icon.", "<code>&lt;select&gt;</code> elements with <code>multiple</code> attribute will not have their default action prevented anymore while holding down one of Fake Data's keyboard shortcuts.", "Corrected some typos &amp; updated few texts."] }, { release_date: "2018-10-28", version: "2.7.0", items: ["Fixed double click event on touch devices / emulators - on Keyboard Settings page this time.", "New setting added for changing default action when pressing Fake Data extension icon."] }, { release_date: "2018-10-26", version: "2.6.2", items: ["Fixed double click event on touch devices / emulators."] }, { release_date: "2018-10-10", version: "2.6.1", items: ["Fixed bug that was not filling input fields with a maxlength value of &lt;empty string&gt;."] }, { release_date: "2018-10-07", version: "2.6.0", items: ["API method <code>fakeData.getGeneratorValue(generator [, data])</code> can now be triggered from foreground context, not only from background.", { pro: !0, text: "New Developer Option will allow you to load your own js libraries and use them to write even more cool Generators." }, 'Thanks to Google\'s new publishing requirements, Fake Data package is and will be slightly larger, for "readability purposes". <a href="https://blog.chromium.org/2018/10/trustworthy-chrome-extensions-by-default.html" target="_blank" class="text-white underline">In case you are curious.</a>'] }, { release_date: "2018-10-01", version: "2.5.0", items: ["Minor UI &amp; language updates.", "Fixed context menu showing empty option on Chrome latest versions.", 'Fixed bug that triggered "change" event for every individual radio button in a group, instead for only the checked one.', "Unnamed fields with RegEx option enabled that were saved prior to version 2.3.2, were not matched correctly when filling inputs with keyboard shortcut. Now this should be fixed.", { pro: !0, text: "Backup and restore Option Fields is now possible." }, { pro: !0, text: "You can now manage each checkbox and radio button individually and decide whether to be checked or unchecked. These settings will go under Option Fields." }] }, { release_date: "2018-09-26", version: "2.4.0", items: ["Fixed a bug that made context menu not being refreshed if a Generator was having a syntax error.", "Fixed an error that was being thrown on inputs with empty id attribute.", "Detecting default keyboard shortcuts will no longer be based on user agent string.", 'Text inputs will now have both "change" and "input" event triggered after inserting data into them. Previously only "input" event was triggered.', 'New page for "Developer Options" added under Settings. <em class="small">(More options under this section are coming soon)</em>', "New Developer Option: Manage triggered events on HTML elements after Fake Data inserts data into them.", { pro: !0, text: "Option Fields can now have RegEx urls." }] }, { release_date: "2018-08-11", version: "2.3.2", items: ["Updated third party library that was crashing on elements with a lot of class names.", "Updated Unnamed Fields selector testing to work between the new library and already saved Fields.", "Prepared updates from v2.3.0 for Firefox.", 'Updated "How to" page to cover the new Option Fields.', "Fixed broken API for Custom Codes when returning an array with function.", { pro: !0, text: "Updated some settings to code editor to make indentation consistent across different keyboard shortcuts." }] }, { release_date: "2018-08-06", version: "2.3.1", items: ['Email Generator will now return addresses in all lowercase if using the "Default Behavior".', "Fixed: Clicking on the Preview button on Default Generators while toggling from Custom to Default behavior without saving was still showing the Custom Code result.", "Fixed: Named Fields with same name as Custom Generators should not be allowed to be saved.", "Fixed: Inputs with same name as Generators should not be stored as Named Fields when filling from the context menu.", { pro: !0, text: 'Fixed a bug that was not displaying all options for large SELECT elements with "optgroup" inside them.' }] }, { release_date: "2018-08-05", version: "2.3.0", items: ['Special HTML inputs, like date, time, month, etc. can now be managed using the "Manage Field" button from context menu.', "Added new Generator for random numbers. It will also be used for number inputs.", "Improvements to fuzzy match feature.", "Added new Setting for &lt;select&gt; elements behavior.", "UI updates to Options page.", "When filling entire form, HTML inputs that are not visible will no longer be processed.", "Other small bug fixes.", { pro: !0, text: "You can now manage HTML &lt;select&gt; elements and choose which option to be always selected, instead of random values." }, { pro: !0, text: 'New Fields page added: "Option Fields" for managing learned &lt;select&gt; elements.' }] }, { release_date: "2018-07-26", version: "2.2.2", items: ["Improvements to fuzzy match feature.", "Updated text content in some sections."] }, { release_date: "2018-07-22", version: "2.2.1", items: ['Fixed a bug that was not inserting data when choosing the "datetime" Generator from context menu.', { pro: !0, text: "Extra options for datetime Generator will now show a larger range of years to choose from." }] }, { release_date: "2018-07-19", version: "2.2.0", items: ['Fixed: "See what\'s new" notification should not be displayed on first startup.', "Small visual fixes.", "Inputs with a name or id are now fuzzy matched against known Named Fields to identify a potential Generator.", "New Setting to enable or disable fuzzy matching.", { pro: !0, text: "Fixed: Extra options for Default Generators were not backed up and / or restored correctly." }, { pro: !0, text: "Fixed: Before / After callbacks were not working when choosing a Generator from the context menu." }] }, { release_date: "2018-07-11", version: "2.1.1", items: ["Fix language setting that was not being applied to datetime Generator.", { pro: !0, text: "Fixed a bug with datetime interval selector that was keeping old values selected." }] }, { release_date: "2018-07-09", version: "2.1.0", items: ['Added new Generator for Date & Time (datetime) powered by <a href="https://momentjs.com/" class="text-white" target="_blank">Moment.js</a>.', 'In a past update, Fake Data was updated to handle multiple input fields automatically: "date", "datetime", "datetime-local", "month" and "time". Now these fields will respect the new datetime Generator settings.', { pro: !0, text: "Ability to change date format for datetime Generator." }, { pro: !0, text: "Ability to choose start &amp; end interval for generating dates in datetime Generator." }, { pro: !0, text: "Enabled Sublime keyboard shortcuts for Custom Code editor." }] }, { release_date: "2018-06-28", version: "2.0.4", items: ["Last update shamefully broke the auto-learn feature. Now it's fixed."] }, { release_date: "2018-06-28", version: "2.0.3", items: ['Checkboxes marked as "required" will always be selected, unless "Do nothing" setting is chosen.', "Added new setting to check only required checkboxes and radio buttons.", "Named Fields can now be saved as Unnamed Fields, so the settings will only be applied to the page where the form field was found.", 'Promises can now be returned in Custom Code, for delayed or async inserting data into input fields. <a href="https://github.com/haterapps/fake-data/wiki/Help-Page#update-27-jun-2018--v203" target="_blank" class="btn elegant-color-dark btn-sm">Read more</a>', '"Pro required" badges will now go to the license page.', { pro: !0, text: "Added minimum validation to inputs from Extra options modal." }] }, { release_date: "2018-06-24", version: "2.0.2", items: ["Prepare the new version for Firefox and fix runtime errors on it.", "Remove development messages from console."] }, { release_date: "2018-06-22", version: "2.0.1", items: [{ pro: !0, text: "Fixed before/after callbacks that were not working on Default Generators with Custom Callback set." }] }, { release_date: "2018-06-22", version: "2.0.0", items: ["Two years have passed since the first launch, and with a huge success, with more than 5 downloads across all browsers, Fake Data is ready for a big update that brings a lot of new features:", "New and completely redesigned interface, using material components.", "Preview button added in more places where there is possibility to write Custom Code.", { pro: !0, text: "In exchange for few bucks, you can now ease your life and have access to features that previously could be achieved only with Custom Code." }, { pro: !0, text: "New Custom Code editor with syntax highlight and ability to make it full screen." }, { pro: !0, text: "Ability to change language along with other options (like phone number format, password length) more easily, without using any Custom Code, globally for each Generator or individually for each Field." }, { pro: !0, text: "Ability to run Custom Code before and after inserting data into a field." }] }, { release_date: "2018-04-04", version: "1.16.1", items: ["Better detection for Ctrl, Alt, Shift, Windows / Cmd keys."] }, { release_date: "2018-04-04", version: "1.16.0", items: ['Custom Generators can now be nested in the context menu by using "/" character in their name.', 'Added new API functions for Custom Codes. <a href="https://github.com/haterapps/fake-data/wiki/Help-Page#update-04-apr-2018--v1160" target="_blank" class="btn elegant-color-dark btn-sm">Read more</a>', "Fixed a bug that showed a wrong preview value for Default Generators when switching from Custom Code.", "Fixed a bug that removed Custom Code for Default Generators instead of keeping them for later use, when switching back to Default value.", "Changing faker language inside a Custom Code will now reset after execution instead of being persistent.", "Fixed a bug where renaming a Custom Generator multiple times in a row will corrupt Fields that are using it."] }, { release_date: "2018-03-29", version: "1.15.1", items: ["Automatically detect input fields with type=tel."] }, { release_date: "2018-03-21", version: "1.15.0", items: ["Fill entire form feature will now check random checkboxes and will choose random option from radio buttons group.", "Checkbox behavior can be updated from Settings page.", "Fixed a bug where using fill entire form feature on an input that is not inside a form will throw an error."] }, { release_date: "2018-03-01", version: "1.14.2", items: ["Fixed an embarrassing one-letter typo in the code that was causing regex enabled fields to not match on other similar pages."] }, { release_date: "2018-02-24", version: "1.14.1", items: ["Updated more libraries."] }, { release_date: "2018-02-22", version: "1.14.0", items: ["Automatically detect and generate fake data for other types of input fields: email, password, url, number, range, color, time, month, date, datetime, datetime-local.", "Fixed a bug that would not update the input when returning in a Custom Code a function that returns a string.", "Added a missing permission which prevented the extension to work on file:// urls.", 'Functions returned in Custom Codes can now receive multiple arguments by returning an array with the first element as the callback function, and the rest of elements as the arguments. <a href="https://github.com/haterapps/fake-data/wiki/Help-Page" target="_blank" class="btn elegant-color-dark btn-sm">WTF?</a>', "Small visual improvements and updates on the options page.", "Updated some libraries."] }, { release_date: "2018-01-27", version: "1.13.1", items: ["Fixed bug that froze the browser on some inputs."] }, { release_date: "2018-01-26", version: "1.13.0", items: ["URLs for unnamed fields can now be identified with regex.", "With Custom Code option you can now return functions that will be executed on DOM context.", "Added nicer tooltips on buttons.", "Meaningless background updates."] }, { release_date: "2017-08-20", version: "1.12.0", items: ["NEW Feature: Keyboard shortcut to fill entire form.", "Keypress combination detection fix on Settings page."] }, { release_date: "2017-08-15", version: "1.11.5", items: ["Bug fix that broke default settings for update/restore feature."] }, { release_date: "2017-08-13", version: "1.11.4", items: ["Updated libraries."] }, { release_date: "2017-07-31", version: "1.11.3", items: ["Some workaround for macOS keyup event while Cmd is pressed.", "Fixed bug on key press combination detection."] }, { release_date: "2017-07-11", version: "1.11.2", items: ["Updated icons.", "Removed unused fonts and icons to reduce filesize."] }, { release_date: "2017-07-10", version: "1.11.1", items: ["Updated some language on About page.", "Fixed issue where fake data could not be inserted in dynamic generated iframes.", "Other background bug fixes."] }, { release_date: "2017-06-29", version: "1.10.2", items: ["Ugly bug fix."] }, { release_date: "2017-06-23", version: "1.10.0", items: ["Added preview button on Generators which allows you to see the results on the fly.", "Fix backup restore file input to accept only allowed file types.", "Fix bug that prevented pressing any button after leaving the Settings page.", 'Fix tab not closing on Firefox after "Manage Field" modal is closed.', "Managing a field that has an identical name with a Default Generator will now disable the Save button.", "Few other insignificant fixes."] }, { release_date: "2017-06-20", version: "1.9.0", items: ["Add setting for changing default keyboard shortcut."] }, { release_date: "2017-06-16", version: "1.8.1", items: ["Separated Generators and Settings in two different pages.", "NEW Feature: Backup and Restore data across browsers.", "Removing Custom Generators will also remove fields that are using it.", "Fixed bug when changing some Fields does not show the Save/Cancel bar.", "Fixed bug when renaming Custom Generators will corrupt Fields that are using it."] }, { release_date: "2017-06-12", version: "1.7.0", items: ['Added option to "Manage Field" inside context menu.'] }, { release_date: "2017-04-17", version: "1.6.0", items: ["NEW Feature: Unnamed fields are now saved by their unique selector. See Fields page for more info.", "New preloaded custom generator: last_generated_email - useful inside forms that require you to retype email.", "New default generators: Full Name, Job Title.", "Prevent choosing same option on &lt;select&gt; elements.", "Do not allow multiple Generators with same label.", "Correct typo.", "Removed stupid console logs."] }, { release_date: "2017-03-15", version: "1.5.0", items: ["Respect input maxlength attribute."] }, { release_date: "2017-03-09", version: "1.4.2", items: ["You can now create custom global generators.", "Bug fixes."] }, { release_date: "2017-02-15", version: "1.3.0", items: ["Pick random option from &lt;select&gt; dropdowns."] }, { release_date: "2017-02-13", version: "1.2.0", items: ["Prevent inserting data on readonly or disabled fields.", "Fix Cmd / Alt button remaining pressed when switching windows.", "Update language dropdown with human-readable labels instead of locale codes."] }, { release_date: "2017-01-18", version: "1.1.1", items: ["Identify fields by their id if name is empty or inexistent.", "Fix some typos."] }, { release_date: "2017-01-09", version: "1.0.6.1", items: ["Small bug fix."] }, { release_date: "2017-01-05", version: "1.0.6", items: ["Bug fix."] }, { release_date: "2016-12-22", version: "1.0.5", items: ["Error fix when clicking checkbox elements.", "Clicking the extension icon will now open the options page instead of doing nothing."] }, { release_date: "2016-12-16", version: "1.0.4", items: ["Added option to choose how the text will be inserted in the input field."] }, { release_date: "2016-11-28", version: "1.0.3", items: ["Ported extension to Firefox", "Fixed Chrome small icon which was greyed out"] }, { release_date: "2016-11-23", version: "1.0.2", items: ["You can now set custom code for extra fields, not only for predefined generators", "Added this changelog page"] }, { release_date: "2016-07-11", version: "1.0.1", items: ["Bug fix"] }, { release_date: "2016-07-10", version: "1.0.0", items: ["Initial release"] }] }, f361: function (e, t, a) { "use strict"; a("aa59") }, f420: function (e, t, a) { "use strict"; a("e09e") }, f955: function (e, t, a) { "use strict"; a("825d") }, fc78: function (e, t, a) { }, fd3d: function (e, t, a) { } });